;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:Maybe address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonTransfer
;;

builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $JettonTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: JettonTransferNotification
;; Header: 0x7362d09c
;; TLB: jetton_transfer_notification#7362d09c query_id:uint64 amount:coins sender:address forward_payload:remainder<slice> = JettonTransferNotification
;;

(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'sender, v'forward_payload));
}

;;
;; Type: JettonBurn
;; Header: 0x595f07bc
;; TLB: jetton_burn#595f07bc query_id:uint64 amount:coins response_destination:address custom_payload:Maybe ^cell = JettonBurn
;;

builder $JettonBurn$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'query_id, v'amount, v'response_destination, v'custom_payload) = v;
    build_0 = store_uint(build_0, 1499400124, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    return build_0;
}

cell $JettonBurn$_store_cell((int, int, slice, cell) v) inline {
    return $JettonBurn$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell)) $JettonBurn$_constructor_query_id_amount_response_destination_custom_payload(int query_id, int amount, slice response_destination, cell custom_payload) inline {
    return (query_id, amount, response_destination, custom_payload);
}

;;
;; Type: GasConfig
;; TLB: _ lpMinExecutionFee:coins perpMinExecutionFee:coins lpGasConsumption:coins perpGasConsumption:coins poolLpGasConsumption:coins poolPerpGasConsumption:coins minTonsForStorage:coins gasTransferJetton:coins gasForBurnTlp:coins = GasConfig
;;

(slice, ((int, int, int, int, int, int, int, int, int))) $GasConfig$_load(slice sc_0) inline_ref {
    var v'lpMinExecutionFee = sc_0~load_coins();
    var v'perpMinExecutionFee = sc_0~load_coins();
    var v'lpGasConsumption = sc_0~load_coins();
    var v'perpGasConsumption = sc_0~load_coins();
    var v'poolLpGasConsumption = sc_0~load_coins();
    var v'poolPerpGasConsumption = sc_0~load_coins();
    var v'minTonsForStorage = sc_0~load_coins();
    var v'gasTransferJetton = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasForBurnTlp = sc_1~load_coins();
    return (sc_0, (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp));
}

tuple $GasConfig$_as_optional((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return __tact_tuple_create_9(v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp);
}

_ $GasConfig$_get_lpMinExecutionFee((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'lpMinExecutionFee;
}

_ $GasConfig$_get_perpMinExecutionFee((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'perpMinExecutionFee;
}

_ $GasConfig$_get_lpGasConsumption((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'lpGasConsumption;
}

_ $GasConfig$_get_perpGasConsumption((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'perpGasConsumption;
}

_ $GasConfig$_get_poolLpGasConsumption((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'poolLpGasConsumption;
}

_ $GasConfig$_get_poolPerpGasConsumption((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'poolPerpGasConsumption;
}

_ $GasConfig$_get_minTonsForStorage((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'minTonsForStorage;
}

_ $GasConfig$_get_gasTransferJetton((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'gasTransferJetton;
}

_ $GasConfig$_get_gasForBurnTlp((int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp) = v;
    return v'gasForBurnTlp;
}

((int, int, int, int, int, int, int, int, int)) $GasConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'lpMinExecutionFee, int vvv'perpMinExecutionFee, int vvv'lpGasConsumption, int vvv'perpGasConsumption, int vvv'poolLpGasConsumption, int vvv'poolPerpGasConsumption, int vvv'minTonsForStorage, int vvv'gasTransferJetton, int vvv'gasForBurnTlp) = __tact_tuple_destroy_9(v);
    return (vvv'lpMinExecutionFee, vvv'perpMinExecutionFee, vvv'lpGasConsumption, vvv'perpGasConsumption, vvv'poolLpGasConsumption, vvv'poolPerpGasConsumption, vvv'minTonsForStorage, vvv'gasTransferJetton, vvv'gasForBurnTlp);
}

;;
;; Type: ExecutorConfig
;; TLB: _ executors:dict<address, bool> lpExecutors:dict<address, bool> compensator:address = ExecutorConfig
;;

(slice, ((cell, cell, slice))) $ExecutorConfig$_load(slice sc_0) inline {
    var v'executors = sc_0~load_dict();
    var v'lpExecutors = sc_0~load_dict();
    var v'compensator = sc_0~__tact_load_address();
    return (sc_0, (v'executors, v'lpExecutors, v'compensator));
}

tuple $ExecutorConfig$_as_optional((cell, cell, slice) v) inline {
    var (v'executors, v'lpExecutors, v'compensator) = v;
    return __tact_tuple_create_3(v'executors, v'lpExecutors, v'compensator);
}

_ $ExecutorConfig$_get_executors((cell, cell, slice) v) inline {
    var (v'executors, v'lpExecutors, v'compensator) = v;
    return v'executors;
}

_ $ExecutorConfig$_get_lpExecutors((cell, cell, slice) v) inline {
    var (v'executors, v'lpExecutors, v'compensator) = v;
    return v'lpExecutors;
}

_ $ExecutorConfig$_get_compensator((cell, cell, slice) v) inline {
    var (v'executors, v'lpExecutors, v'compensator) = v;
    return v'compensator;
}

((cell, cell, slice)) $ExecutorConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'executors, cell vvv'lpExecutors, slice vvv'compensator) = __tact_tuple_destroy_3(v);
    return (vvv'executors, vvv'lpExecutors, vvv'compensator);
}

;;
;; Type: ContractConfig
;; TLB: _ tlpWallet:address jettonWallet:address pool:address = ContractConfig
;;

(slice, ((slice, slice, slice))) $ContractConfig$_load(slice sc_0) inline {
    var v'tlpWallet = sc_0~__tact_load_address();
    var v'jettonWallet = sc_0~__tact_load_address();
    var v'pool = sc_0~__tact_load_address();
    return (sc_0, (v'tlpWallet, v'jettonWallet, v'pool));
}

tuple $ContractConfig$_as_optional((slice, slice, slice) v) inline {
    var (v'tlpWallet, v'jettonWallet, v'pool) = v;
    return __tact_tuple_create_3(v'tlpWallet, v'jettonWallet, v'pool);
}

_ $ContractConfig$_get_tlpWallet((slice, slice, slice) v) inline {
    var (v'tlpWallet, v'jettonWallet, v'pool) = v;
    return v'tlpWallet;
}

_ $ContractConfig$_get_jettonWallet((slice, slice, slice) v) inline {
    var (v'tlpWallet, v'jettonWallet, v'pool) = v;
    return v'jettonWallet;
}

_ $ContractConfig$_get_pool((slice, slice, slice) v) inline {
    var (v'tlpWallet, v'jettonWallet, v'pool) = v;
    return v'pool;
}

((slice, slice, slice)) $ContractConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'tlpWallet, slice vvv'jettonWallet, slice vvv'pool) = __tact_tuple_destroy_3(v);
    return (vvv'tlpWallet, vvv'jettonWallet, vvv'pool);
}

;;
;; Type: UpdateConfig
;; Header: 0x9b32c809
;; TLB: update_config#9b32c809 orderLockTime:Maybe uint32 gasConfig:Maybe GasConfig{lpMinExecutionFee:coins,perpMinExecutionFee:coins,lpGasConsumption:coins,perpGasConsumption:coins,poolLpGasConsumption:coins,poolPerpGasConsumption:coins,minTonsForStorage:coins,gasTransferJetton:coins,gasForBurnTlp:coins} executorConfig:Maybe ExecutorConfig{executors:dict<address, bool>,lpExecutors:dict<address, bool>,compensator:address} contractConfig:Maybe ContractConfig{tlpWallet:address,jettonWallet:address,pool:address} = UpdateConfig
;;

(slice, ((int, tuple, tuple, tuple))) $UpdateConfig$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2603796489);
    var v'orderLockTime = sc_0~load_int(1) ? sc_0~load_uint(32) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasConfig = sc_1~load_int(1) ? $GasConfig$_as_optional(sc_1~$GasConfig$_load()) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'executorConfig = sc_2~load_int(1) ? $ExecutorConfig$_as_optional(sc_2~$ExecutorConfig$_load()) : null();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'contractConfig = sc_3~load_int(1) ? $ContractConfig$_as_optional(sc_3~$ContractConfig$_load()) : null();
    return (sc_0, (v'orderLockTime, v'gasConfig, v'executorConfig, v'contractConfig));
}

;;
;; Type: SendProtocolFee
;; Header: 0x5dd58461
;; TLB: send_protocol_fee#5dd58461 trxId:uint64 feeReceiver:address amount:coins = SendProtocolFee
;;

(slice, ((int, slice, int))) $SendProtocolFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1574274145);
    var v'trxId = sc_0~load_uint(64);
    var v'feeReceiver = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'trxId, v'feeReceiver, v'amount));
}

;;
;; Type: CancelLiquidityOrder
;; Header: 0x481e7561
;; TLB: cancel_liquidity_order#481e7561 orderId:uint64 trxId:uint64 executionFeeReceiver:Maybe address = CancelLiquidityOrder
;;

(slice, ((int, int, slice))) $CancelLiquidityOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1209955681);
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    return (sc_0, (v'orderId, v'trxId, v'executionFeeReceiver));
}

;;
;; Type: ExecuteLiquidityOrder
;; Header: 0xabcf587b
;; TLB: execute_liquidity_order#abcf587b orderId:uint64 trxId:uint64 executionFeeReceiver:Maybe address prices:dict<uint16, uint128> lpFundingFeeGrowth:coins rolloverFeeGrowth:coins = ExecuteLiquidityOrder
;;

(slice, ((int, int, slice, cell, int, int))) $ExecuteLiquidityOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2882492539);
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'prices = sc_0~load_dict();
    var v'lpFundingFeeGrowth = sc_0~load_coins();
    var v'rolloverFeeGrowth = sc_0~load_coins();
    return (sc_0, (v'orderId, v'trxId, v'executionFeeReceiver, v'prices, v'lpFundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: UpdateLiquidityPool
;; Header: 0x5523d11e
;; TLB: update_liquidity_pool#5523d11e isIncrease:bool orderId:uint64 account:address jettonDelta:coins trxId:uint64 prices:dict<uint16, uint128> lpFundingFeeGrowth:coins rolloverFeeGrowth:coins = UpdateLiquidityPool
;;

builder $UpdateLiquidityPool$_store(builder build_0, (int, int, slice, int, int, cell, int, int) v) inline_ref {
    var (v'isIncrease, v'orderId, v'account, v'jettonDelta, v'trxId, v'prices, v'lpFundingFeeGrowth, v'rolloverFeeGrowth) = v;
    build_0 = store_uint(build_0, 1428410654, 32);
    build_0 = build_0.store_int(v'isIncrease, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_dict(v'prices);
    build_0 = build_0.store_coins(v'lpFundingFeeGrowth);
    build_0 = build_0.store_coins(v'rolloverFeeGrowth);
    return build_0;
}

cell $UpdateLiquidityPool$_store_cell((int, int, slice, int, int, cell, int, int) v) inline {
    return $UpdateLiquidityPool$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $UpdateLiquidityPool$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1428410654);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    return (sc_0, (v'isIncrease, v'orderId));
}

((int, int, slice, int, int, cell, int, int)) $UpdateLiquidityPool$_constructor_isIncrease_orderId_trxId_account_jettonDelta_prices_lpFundingFeeGrowth_rolloverFeeGrowth(int isIncrease, int orderId, int trxId, slice account, int jettonDelta, cell prices, int lpFundingFeeGrowth, int rolloverFeeGrowth) inline {
    return (isIncrease, orderId, account, jettonDelta, trxId, prices, lpFundingFeeGrowth, rolloverFeeGrowth);
}

;;
;; Type: LiquidityPoolUpdated
;; Header: 0xcd6336bc
;; TLB: liquidity_pool_updated#cd6336bc isIncrease:bool orderId:uint64 tlpPrice:uint128 tlpDelta:coins jettonDelta:coins trxId:uint64 = LiquidityPoolUpdated
;;

(slice, ((int, int, int, int, int, int))) $LiquidityPoolUpdated$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3445831356);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    var v'tlpPrice = sc_0~load_uint(128);
    var v'tlpDelta = sc_0~load_coins();
    var v'jettonDelta = sc_0~load_coins();
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'isIncrease, v'orderId, v'tlpPrice, v'tlpDelta, v'jettonDelta, v'trxId));
}

;;
;; Type: CreateCompensate
;; Header: 0xfc33877d
;; TLB: create_compensate#fc33877d orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins = CreateCompensate
;;

(slice, ((int, int, int, slice, int, slice, int))) $CreateCompensate$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4231235453);
    var v'orderType = sc_0~load_int(1) ? sc_0~load_uint(8) : null();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'refundReceiver = sc_0~__tact_load_address_opt();
    var v'refundAmount = sc_0~load_coins();
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'executionFee = sc_0~load_coins();
    return (sc_0, (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee));
}

;;
;; Type: ExecuteOrCancelCompensate
;; Header: 0x88e7f927
;; TLB: execute_or_cancel_compensate#88e7f927 isCancel:bool compensateId:uint64 trxId:uint64 = ExecuteOrCancelCompensate
;;

(slice, ((int, int, int))) $ExecuteOrCancelCompensate$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2296903975);
    var v'isCancel = sc_0~load_int(1);
    var v'compensateId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'isCancel, v'compensateId, v'trxId));
}

;;
;; Type: CreateDecreasePerpOrder
;; Header: 0xeef5924d
;; TLB: create_decrease_perp_order#eef5924d executionFee:coins tokenId:uint16 isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 trxId:uint64 requestTime:uint32 = CreateDecreasePerpOrder
;;

(slice, ((int, int, int, int, int, int, int, int))) $CreateDecreasePerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4009071181);
    var v'executionFee = sc_0~load_coins();
    var v'tokenId = sc_0~load_uint(16);
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'triggerPrice = sc_0~load_uint(128);
    var v'trxId = sc_0~load_uint(64);
    var v'requestTime = sc_0~load_uint(32);
    return (sc_0, (v'executionFee, v'tokenId, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'trxId, v'requestTime));
}

;;
;; Type: CreateTpSlPerpOrder
;; Header: 0xf94f80bb
;; TLB: create_tp_sl_perp_order#f94f80bb executionFee:coins tokenId:uint16 isLong:bool tpSize:coins tpPrice:uint128 slSize:coins slPrice:uint128 trxId:uint64 requestTime:uint32 = CreateTpSlPerpOrder
;;

(slice, ((int, int, int, int, int, int, int, int, int))) $CreateTpSlPerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4182737083);
    var v'executionFee = sc_0~load_coins();
    var v'tokenId = sc_0~load_uint(16);
    var v'isLong = sc_0~load_int(1);
    var v'tpSize = sc_0~load_coins();
    var v'tpPrice = sc_0~load_uint(128);
    var v'slSize = sc_0~load_coins();
    var v'slPrice = sc_0~load_uint(128);
    var v'trxId = sc_0~load_uint(64);
    var v'requestTime = sc_0~load_uint(32);
    return (sc_0, (v'executionFee, v'tokenId, v'isLong, v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'trxId, v'requestTime));
}

;;
;; Type: CancelPerpOrder
;; Header: 0x099ff4a3
;; TLB: cancel_perp_order#099ff4a3 executionFeeReceiver:Maybe address orderId:uint64 trxId:uint64 = CancelPerpOrder
;;

(slice, ((slice, int, int))) $CancelPerpOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 161477795);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'executionFeeReceiver, v'orderId, v'trxId));
}

;;
;; Type: ExecutePerpOrder
;; Header: 0xe984aae0
;; TLB: execute_perp_order#e984aae0 executionFeeReceiver:Maybe address orderId:uint64 trxId:uint64 tokenId:uint16 price:uint128 fundingFeeGrowth:coins rolloverFeeGrowth:coins = ExecutePerpOrder
;;

(slice, ((slice, int, int, int, int, int, int))) $ExecutePerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3917785824);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'tokenId = sc_0~load_uint(16);
    var v'price = sc_0~load_uint(128);
    var v'fundingFeeGrowth = sc_0~load_coins();
    var v'rolloverFeeGrowth = sc_0~load_coins();
    return (sc_0, (v'executionFeeReceiver, v'orderId, v'trxId, v'tokenId, v'price, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: LiquidatePerpPosition
;; Header: 0xfb837963
;; TLB: liquidate_perp_position#fb837963 liquidationFeeReceiver:Maybe address tokenId:uint16 account:address isLong:bool trxId:uint64 price:uint128 fundingFeeGrowth:coins rolloverFeeGrowth:coins = LiquidatePerpPosition
;;

(slice, ((slice, int, slice, int, int, int, int, int))) $LiquidatePerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4219697507);
    var v'liquidationFeeReceiver = sc_0~__tact_load_address_opt();
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'trxId = sc_0~load_uint(64);
    var v'price = sc_0~load_uint(128);
    var v'fundingFeeGrowth = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'rolloverFeeGrowth = sc_1~load_coins();
    return (sc_0, (v'liquidationFeeReceiver, v'tokenId, v'account, v'isLong, v'trxId, v'price, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: ADLPerpPosition
;; Header: 0xc3100342
;; TLB: adl_perp_position#c3100342 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins trxId:uint64 price:uint128 fundingFeeGrowth:coins rolloverFeeGrowth:coins = ADLPerpPosition
;;

(slice, ((int, slice, int, int, int, int, int, int, int))) $ADLPerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3272606530);
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'trxId = sc_0~load_uint(64);
    var v'price = sc_0~load_uint(128);
    var v'fundingFeeGrowth = sc_0~load_coins();
    var v'rolloverFeeGrowth = sc_0~load_coins();
    return (sc_0, (v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'trxId, v'price, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: UpdatePerpPosition
;; Header: 0xff57e557
;; TLB: update_perp_position#ff57e557 orderId:uint64 opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool trxId:uint64 price:uint128 fundingFeeGrowth:coins rolloverFeeGrowth:coins = UpdatePerpPosition
;;

builder $UpdatePerpPosition$_store(builder build_0, (int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'orderId, v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'trxId, v'price, v'fundingFeeGrowth, v'rolloverFeeGrowth) = v;
    build_0 = store_uint(build_0, 4283950423, 32);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_coins(v'marginDelta);
    build_0 = build_0.store_coins(v'sizeDelta);
    build_0 = build_0.store_uint(v'triggerPrice, 128);
    build_0 = build_0.store_int(v'triggerAbove, 1);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'price, 128);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'fundingFeeGrowth);
    build_1 = build_1.store_coins(v'rolloverFeeGrowth);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $UpdatePerpPosition$_store_cell((int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $UpdatePerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $UpdatePerpPosition$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4283950423);
    var v'orderId = sc_0~load_uint(64);
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_uint(16);
    return (sc_0, (v'orderId, v'opType, v'tokenId));
}

((int, int, int, slice, int, int, int, int, int, int, int, int, int)) $UpdatePerpPosition$_constructor_orderId_opType_trxId_account_tokenId_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_price_fundingFeeGrowth_rolloverFeeGrowth(int orderId, int opType, int trxId, slice account, int tokenId, int isLong, int marginDelta, int sizeDelta, int triggerPrice, int triggerAbove, int price, int fundingFeeGrowth, int rolloverFeeGrowth) inline {
    return (orderId, opType, tokenId, account, isLong, marginDelta, sizeDelta, triggerPrice, triggerAbove, trxId, price, fundingFeeGrowth, rolloverFeeGrowth);
}

((int, int, int, slice, int, int, int, int, int, int, int, int, int)) $UpdatePerpPosition$_constructor_opType_orderId_trxId_account_tokenId_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_price_fundingFeeGrowth_rolloverFeeGrowth(int opType, int orderId, int trxId, slice account, int tokenId, int isLong, int marginDelta, int sizeDelta, int triggerPrice, int triggerAbove, int price, int fundingFeeGrowth, int rolloverFeeGrowth) inline {
    return (orderId, opType, tokenId, account, isLong, marginDelta, sizeDelta, triggerPrice, triggerAbove, trxId, price, fundingFeeGrowth, rolloverFeeGrowth);
}

;;
;; Type: PerpPositionUpdated
;; Header: 0xef01c2b4
;; TLB: perp_position_updated#ef01c2b4 orderId:uint64 payout:coins trxId:uint64 = PerpPositionUpdated
;;

(slice, ((int, int, int))) $PerpPositionUpdated$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4009870004);
    var v'orderId = sc_0~load_uint(64);
    var v'payout = sc_0~load_coins();
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'orderId, v'payout, v'trxId));
}

;;
;; Type: LiquidityOrderCreatedEvent
;; Header: 0xc4d020e4
;; TLB: liquidity_order_created_event#c4d020e4 opType:uint8 account:address jettonDelta:coins executionFee:coins orderId:uint64 trxId:uint64 = LiquidityOrderCreatedEvent
;;

builder $LiquidityOrderCreatedEvent$_store(builder build_0, (int, slice, int, int, int, int) v) inline_ref {
    var (v'opType, v'account, v'jettonDelta, v'executionFee, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 3301974244, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityOrderCreatedEvent$_store_cell((int, slice, int, int, int, int) v) inline {
    return $LiquidityOrderCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int)) $LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(int opType, slice account, int jettonDelta, int executionFee, int orderId, int trxId) inline {
    return (opType, account, jettonDelta, executionFee, orderId, trxId);
}

;;
;; Type: LiquidityOrderCancelledEvent
;; Header: 0xb9b03cbc
;; TLB: liquidity_order_cancelled_event#b9b03cbc opType:uint8 orderId:uint64 trxId:uint64 = LiquidityOrderCancelledEvent
;;

builder $LiquidityOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 3115334844, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityOrderCancelledEvent$_store_cell((int, int, int) v) inline {
    return $LiquidityOrderCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId(int opType, int orderId, int trxId) inline {
    return (opType, orderId, trxId);
}

;;
;; Type: LiquidityOrderExecutedEvent
;; Header: 0x2a138100
;; TLB: liquidity_order_executed_event#2a138100 opType:uint8 orderId:uint64 trxId:uint64 = LiquidityOrderExecutedEvent
;;

builder $LiquidityOrderExecutedEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 705921280, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityOrderExecutedEvent$_store_cell((int, int, int) v) inline {
    return $LiquidityOrderExecutedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $LiquidityOrderExecutedEvent$_constructor_opType_orderId_trxId(int opType, int orderId, int trxId) inline {
    return (opType, orderId, trxId);
}

;;
;; Type: PerpOrderCreatedEvent
;; Header: 0x66ef465f
;; TLB: perp_order_created_event#66ef465f opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool executionFee:coins orderId:uint64 trxId:uint64 blockTime:uint32 requestTime:uint32 = PerpOrderCreatedEvent
;;

builder $PerpOrderCreatedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'orderId, v'trxId, v'blockTime, v'requestTime) = v;
    build_0 = store_uint(build_0, 1726957151, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_coins(v'marginDelta);
    build_0 = build_0.store_coins(v'sizeDelta);
    build_0 = build_0.store_uint(v'triggerPrice, 128);
    build_0 = build_0.store_int(v'triggerAbove, 1);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_uint(v'requestTime, 32);
    return build_0;
}

cell $PerpOrderCreatedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpOrderCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, int, int)) $PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_blockTime_requestTime_trxId(int opType, int tokenId, slice account, int isLong, int marginDelta, int sizeDelta, int executionFee, int orderId, int triggerPrice, int triggerAbove, int blockTime, int requestTime, int trxId) inline {
    return (opType, tokenId, account, isLong, marginDelta, sizeDelta, triggerPrice, triggerAbove, executionFee, orderId, trxId, blockTime, requestTime);
}

;;
;; Type: PerpOrderCancelledEvent
;; Header: 0xf2c5aeac
;; TLB: perp_order_cancelled_event#f2c5aeac opType:uint8 orderId:uint64 trxId:uint64 = PerpOrderCancelledEvent
;;

builder $PerpOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 4073041580, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $PerpOrderCancelledEvent$_store_cell((int, int, int) v) inline {
    return $PerpOrderCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $PerpOrderCancelledEvent$_constructor_opType_orderId_trxId(int opType, int orderId, int trxId) inline {
    return (opType, orderId, trxId);
}

;;
;; Type: PerpOrderExecutedEvent
;; Header: 0xfc1cdc95
;; TLB: perp_order_executed_event#fc1cdc95 opType:uint8 orderId:uint64 trxId:uint64 = PerpOrderExecutedEvent
;;

builder $PerpOrderExecutedEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 4229749909, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $PerpOrderExecutedEvent$_store_cell((int, int, int) v) inline {
    return $PerpOrderExecutedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $PerpOrderExecutedEvent$_constructor_opType_orderId_trxId(int opType, int orderId, int trxId) inline {
    return (opType, orderId, trxId);
}

;;
;; Type: CompensateCreatedEvent
;; Header: 0x9628ba96
;; TLB: compensate_created_event#9628ba96 compensateId:uint64 orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins unlockTime:uint32 = CompensateCreatedEvent
;;

builder $CompensateCreatedEvent$_store(builder build_0, (int, int, int, int, slice, int, slice, int, int) v) inline_ref {
    var (v'compensateId, v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    build_0 = store_uint(build_0, 2519251606, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = ~ null?(v'orderType) ? build_0.store_int(true, 1).store_uint(v'orderType, 8) : build_0.store_int(false, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = __tact_store_address_opt(build_0, v'refundReceiver);
    build_0 = build_0.store_coins(v'refundAmount);
    build_0 = __tact_store_address_opt(build_0, v'executionFeeReceiver);
    build_0 = build_0.store_coins(v'executionFee);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'unlockTime, 32);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $CompensateCreatedEvent$_store_cell((int, int, int, int, slice, int, slice, int, int) v) inline {
    return $CompensateCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, slice, int, int)) $CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int compensateId, int orderType, int orderId, int trxId, slice refundReceiver, int refundAmount, slice executionFeeReceiver, int executionFee, int unlockTime) inline {
    return (compensateId, orderType, orderId, trxId, refundReceiver, refundAmount, executionFeeReceiver, executionFee, unlockTime);
}

;;
;; Type: CompensateCancelledEvent
;; Header: 0x4bc341d5
;; TLB: compensate_cancelled_event#4bc341d5 compensateId:uint64 trxId:uint64 = CompensateCancelledEvent
;;

builder $CompensateCancelledEvent$_store(builder build_0, (int, int) v) inline {
    var (v'compensateId, v'trxId) = v;
    build_0 = store_uint(build_0, 1271087573, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $CompensateCancelledEvent$_store_cell((int, int) v) inline {
    return $CompensateCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int)) $CompensateCancelledEvent$_constructor_compensateId_trxId(int compensateId, int trxId) inline {
    return (compensateId, trxId);
}

;;
;; Type: CompensateExecutedEvent
;; Header: 0xdb45e438
;; TLB: compensate_executed_event#db45e438 compensateId:uint64 trxId:uint64 = CompensateExecutedEvent
;;

builder $CompensateExecutedEvent$_store(builder build_0, (int, int) v) inline {
    var (v'compensateId, v'trxId) = v;
    build_0 = store_uint(build_0, 3678790712, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $CompensateExecutedEvent$_store_cell((int, int) v) inline {
    return $CompensateExecutedEvent$_store(begin_cell(), v).end_cell();
}

((int, int)) $CompensateExecutedEvent$_constructor_compensateId_trxId(int compensateId, int trxId) inline {
    return (compensateId, trxId);
}

;;
;; Type: ConfigData
;; TLB: _ isExecutor:Maybe bool orderLockTime:uint32 lpMinExecutionFee:coins perpMinExecutionFee:coins lpGasConsumption:coins perpGasConsumption:coins poolLpGasConsumption:coins poolPerpGasConsumption:coins minTonsForStorage:coins gasTransferJetton:coins gasForBurnTlp:coins totalExecutionFee:coins tlpWallet:address jettonWallet:address pool:address = ConfigData
;;

(int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice) $ConfigData$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice)) v) inline {
    var (v'isExecutor, v'orderLockTime, v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp, v'totalExecutionFee, v'tlpWallet, v'jettonWallet, v'pool) = v; 
    return (v'isExecutor, v'orderLockTime, v'lpMinExecutionFee, v'perpMinExecutionFee, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp, v'totalExecutionFee, v'tlpWallet, v'jettonWallet, v'pool);
}

((int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice)) $ConfigData$_constructor_isExecutor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_lpGasConsumption_perpGasConsumption_poolLpGasConsumption_poolPerpGasConsumption_minTonsForStorage_gasTransferJetton_gasForBurnTlp_totalExecutionFee_tlpWallet_jettonWallet_pool(int isExecutor, int orderLockTime, int lpMinExecutionFee, int perpMinExecutionFee, int lpGasConsumption, int perpGasConsumption, int poolLpGasConsumption, int poolPerpGasConsumption, int minTonsForStorage, int gasTransferJetton, int gasForBurnTlp, int totalExecutionFee, slice tlpWallet, slice jettonWallet, slice pool) inline {
    return (isExecutor, orderLockTime, lpMinExecutionFee, perpMinExecutionFee, lpGasConsumption, perpGasConsumption, poolLpGasConsumption, poolPerpGasConsumption, minTonsForStorage, gasTransferJetton, gasForBurnTlp, totalExecutionFee, tlpWallet, jettonWallet, pool);
}

;;
;; Type: LiquidityOrder
;; TLB: _ isIncrease:bool account:address jettonDelta:coins executionFee:coins blockTime:uint32 isPending:bool executionFeeReceiver:address lastOperator:Maybe address = LiquidityOrder
;;

builder $LiquidityOrder$_store(builder build_0, (int, slice, int, int, int, int, slice, slice) v) inline_ref {
    var (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    build_0 = build_0.store_int(v'isIncrease, 1);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_int(v'isPending, 1);
    build_0 = __tact_store_address(build_0, v'executionFeeReceiver);
    var build_1 = begin_cell();
    build_1 = __tact_store_address_opt(build_1, v'lastOperator);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LiquidityOrder$_store_cell((int, slice, int, int, int, int, slice, slice) v) inline {
    return $LiquidityOrder$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, slice, slice)) $LiquidityOrder$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'isIncrease, slice vvv'account, int vvv'jettonDelta, int vvv'executionFee, int vvv'blockTime, int vvv'isPending, slice vvv'executionFeeReceiver, slice vvv'lastOperator) = __tact_tuple_destroy_8(v);
    return (vvv'isIncrease, vvv'account, vvv'jettonDelta, vvv'executionFee, vvv'blockTime, vvv'isPending, vvv'executionFeeReceiver, vvv'lastOperator);
}

cell $LiquidityOrder$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $LiquidityOrder$_store_cell($LiquidityOrder$_not_null(v));
}

(slice, ((int, slice, int, int, int, int, slice, slice))) $LiquidityOrder$_load(slice sc_0) inline_ref {
    var v'isIncrease = sc_0~load_int(1);
    var v'account = sc_0~__tact_load_address();
    var v'jettonDelta = sc_0~load_coins();
    var v'executionFee = sc_0~load_coins();
    var v'blockTime = sc_0~load_uint(32);
    var v'isPending = sc_0~load_int(1);
    var v'executionFeeReceiver = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'lastOperator = sc_1~__tact_load_address_opt();
    return (sc_0, (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator));
}

tuple $LiquidityOrder$_as_optional((int, slice, int, int, int, int, slice, slice) v) inline {
    var (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    return __tact_tuple_create_8(v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator);
}

tuple $LiquidityOrder$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LiquidityOrder$_as_optional(sc~$LiquidityOrder$_load());
}

tuple $LiquidityOrder$_to_tuple(((int, slice, int, int, int, int, slice, slice)) v) inline {
    var (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    return __tact_tuple_create_8(v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator);
}

tuple $LiquidityOrder$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LiquidityOrder$_to_tuple($LiquidityOrder$_not_null(v)); 
}

((int, slice, int, int, int, int, slice, slice)) $LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(int isIncrease, slice account, int jettonDelta, int executionFee, int blockTime, int isPending, slice executionFeeReceiver, slice lastOperator) inline {
    return (isIncrease, account, jettonDelta, executionFee, blockTime, isPending, executionFeeReceiver, lastOperator);
}

;;
;; Type: LiquidityOrderData
;; TLB: _ liquidityOrderIndexNext:uint64 liquidityOrder:Maybe LiquidityOrder{isIncrease:bool,account:address,jettonDelta:coins,executionFee:coins,blockTime:uint32,isPending:bool,executionFeeReceiver:address,lastOperator:Maybe address} = LiquidityOrderData
;;

(int, tuple) $LiquidityOrderData$_to_external(((int, tuple)) v) inline {
    var (v'liquidityOrderIndexNext, v'liquidityOrder) = v; 
    return (v'liquidityOrderIndexNext, $LiquidityOrder$_to_opt_tuple(v'liquidityOrder));
}

((int, tuple)) $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder(int liquidityOrderIndexNext, tuple liquidityOrder) inline {
    return (liquidityOrderIndexNext, liquidityOrder);
}

;;
;; Type: PerpOrder
;; TLB: _ opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool executionFee:coins blockTime:uint32 isPending:bool executionFeeReceiver:address lastOperator:Maybe address = PerpOrder
;;

builder $PerpOrder$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, slice, slice) v) inline_ref {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_coins(v'marginDelta);
    build_0 = build_0.store_coins(v'sizeDelta);
    build_0 = build_0.store_uint(v'triggerPrice, 128);
    build_0 = build_0.store_int(v'triggerAbove, 1);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_int(v'isPending, 1);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'executionFeeReceiver);
    build_1 = __tact_store_address_opt(build_1, v'lastOperator);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpOrder$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, slice, slice) v) inline {
    return $PerpOrder$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, slice, slice)) $PerpOrder$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'opType, int vvv'tokenId, slice vvv'account, int vvv'isLong, int vvv'marginDelta, int vvv'sizeDelta, int vvv'triggerPrice, int vvv'triggerAbove, int vvv'executionFee, int vvv'blockTime, int vvv'isPending, slice vvv'executionFeeReceiver, slice vvv'lastOperator) = __tact_tuple_destroy_13(v);
    return (vvv'opType, vvv'tokenId, vvv'account, vvv'isLong, vvv'marginDelta, vvv'sizeDelta, vvv'triggerPrice, vvv'triggerAbove, vvv'executionFee, vvv'blockTime, vvv'isPending, vvv'executionFeeReceiver, vvv'lastOperator);
}

cell $PerpOrder$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $PerpOrder$_store_cell($PerpOrder$_not_null(v));
}

(slice, ((int, int, slice, int, int, int, int, int, int, int, int, slice, slice))) $PerpOrder$_load(slice sc_0) inline_ref {
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'triggerPrice = sc_0~load_uint(128);
    var v'triggerAbove = sc_0~load_int(1);
    var v'executionFee = sc_0~load_coins();
    var v'blockTime = sc_0~load_uint(32);
    var v'isPending = sc_0~load_int(1);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'executionFeeReceiver = sc_1~__tact_load_address();
    var v'lastOperator = sc_1~__tact_load_address_opt();
    return (sc_0, (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator));
}

tuple $PerpOrder$_as_optional((int, int, slice, int, int, int, int, int, int, int, int, slice, slice) v) inline {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    return __tact_tuple_create_13(v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator);
}

tuple $PerpOrder$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PerpOrder$_as_optional(sc~$PerpOrder$_load());
}

tuple $PerpOrder$_to_tuple(((int, int, slice, int, int, int, int, int, int, int, int, slice, slice)) v) inline {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator) = v;
    return __tact_tuple_create_13(v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending, v'executionFeeReceiver, v'lastOperator);
}

tuple $PerpOrder$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $PerpOrder$_to_tuple($PerpOrder$_not_null(v)); 
}

((int, int, slice, int, int, int, int, int, int, int, int, slice, slice)) $PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(int opType, int tokenId, slice account, int isLong, int marginDelta, int sizeDelta, int triggerPrice, int triggerAbove, int executionFee, int blockTime, int isPending, slice executionFeeReceiver, slice lastOperator) inline {
    return (opType, tokenId, account, isLong, marginDelta, sizeDelta, triggerPrice, triggerAbove, executionFee, blockTime, isPending, executionFeeReceiver, lastOperator);
}

;;
;; Type: PerpOrderEx
;; TLB: _ tpSize:coins tpPrice:uint128 slSize:coins slPrice:uint128 executionFee:coins = PerpOrderEx
;;

builder $PerpOrderEx$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee) = v;
    build_0 = build_0.store_coins(v'tpSize);
    build_0 = build_0.store_uint(v'tpPrice, 128);
    build_0 = build_0.store_coins(v'slSize);
    build_0 = build_0.store_uint(v'slPrice, 128);
    build_0 = build_0.store_coins(v'executionFee);
    return build_0;
}

cell $PerpOrderEx$_store_cell((int, int, int, int, int) v) inline {
    return $PerpOrderEx$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int)) $PerpOrderEx$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'tpSize, int vvv'tpPrice, int vvv'slSize, int vvv'slPrice, int vvv'executionFee) = __tact_tuple_destroy_5(v);
    return (vvv'tpSize, vvv'tpPrice, vvv'slSize, vvv'slPrice, vvv'executionFee);
}

cell $PerpOrderEx$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $PerpOrderEx$_store_cell($PerpOrderEx$_not_null(v));
}

(slice, ((int, int, int, int, int))) $PerpOrderEx$_load(slice sc_0) inline {
    var v'tpSize = sc_0~load_coins();
    var v'tpPrice = sc_0~load_uint(128);
    var v'slSize = sc_0~load_coins();
    var v'slPrice = sc_0~load_uint(128);
    var v'executionFee = sc_0~load_coins();
    return (sc_0, (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee));
}

tuple $PerpOrderEx$_as_optional((int, int, int, int, int) v) inline {
    var (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee) = v;
    return __tact_tuple_create_5(v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee);
}

tuple $PerpOrderEx$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PerpOrderEx$_as_optional(sc~$PerpOrderEx$_load());
}

tuple $PerpOrderEx$_to_tuple(((int, int, int, int, int)) v) inline {
    var (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee) = v;
    return __tact_tuple_create_5(v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee);
}

tuple $PerpOrderEx$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $PerpOrderEx$_to_tuple($PerpOrderEx$_not_null(v)); 
}

((int, int, int, int, int)) $PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee(int tpSize, int tpPrice, int slSize, int slPrice, int executionFee) inline {
    return (tpSize, tpPrice, slSize, slPrice, executionFee);
}

;;
;; Type: PerpOrderData
;; TLB: _ perpOrderIndexNext:uint64 perpOrder:Maybe PerpOrder{opType:uint8,tokenId:uint16,account:address,isLong:bool,marginDelta:coins,sizeDelta:coins,triggerPrice:uint128,triggerAbove:bool,executionFee:coins,blockTime:uint32,isPending:bool,executionFeeReceiver:address,lastOperator:Maybe address} perpOrderEx:Maybe PerpOrderEx{tpSize:coins,tpPrice:uint128,slSize:coins,slPrice:uint128,executionFee:coins} = PerpOrderData
;;

(int, tuple, tuple) $PerpOrderData$_to_external(((int, tuple, tuple)) v) inline {
    var (v'perpOrderIndexNext, v'perpOrder, v'perpOrderEx) = v; 
    return (v'perpOrderIndexNext, $PerpOrder$_to_opt_tuple(v'perpOrder), $PerpOrderEx$_to_opt_tuple(v'perpOrderEx));
}

((int, tuple, tuple)) $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx(int perpOrderIndexNext, tuple perpOrder, tuple perpOrderEx) inline {
    return (perpOrderIndexNext, perpOrder, perpOrderEx);
}

;;
;; Type: Compensate
;; TLB: _ orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins unlockTime:uint32 = Compensate
;;

builder $Compensate$_store(builder build_0, (int, int, int, slice, int, slice, int, int) v) inline_ref {
    var (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    build_0 = ~ null?(v'orderType) ? build_0.store_int(true, 1).store_uint(v'orderType, 8) : build_0.store_int(false, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = __tact_store_address_opt(build_0, v'refundReceiver);
    build_0 = build_0.store_coins(v'refundAmount);
    build_0 = __tact_store_address_opt(build_0, v'executionFeeReceiver);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'unlockTime, 32);
    return build_0;
}

cell $Compensate$_store_cell((int, int, int, slice, int, slice, int, int) v) inline {
    return $Compensate$_store(begin_cell(), v).end_cell();
}

((int, int, int, slice, int, slice, int, int)) $Compensate$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'orderType, int vvv'orderId, int vvv'trxId, slice vvv'refundReceiver, int vvv'refundAmount, slice vvv'executionFeeReceiver, int vvv'executionFee, int vvv'unlockTime) = __tact_tuple_destroy_8(v);
    return (vvv'orderType, vvv'orderId, vvv'trxId, vvv'refundReceiver, vvv'refundAmount, vvv'executionFeeReceiver, vvv'executionFee, vvv'unlockTime);
}

cell $Compensate$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $Compensate$_store_cell($Compensate$_not_null(v));
}

(slice, ((int, int, int, slice, int, slice, int, int))) $Compensate$_load(slice sc_0) inline_ref {
    var v'orderType = sc_0~load_int(1) ? sc_0~load_uint(8) : null();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'refundReceiver = sc_0~__tact_load_address_opt();
    var v'refundAmount = sc_0~load_coins();
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'executionFee = sc_0~load_coins();
    var v'unlockTime = sc_0~load_uint(32);
    return (sc_0, (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime));
}

tuple $Compensate$_as_optional((int, int, int, slice, int, slice, int, int) v) inline {
    var (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    return __tact_tuple_create_8(v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime);
}

tuple $Compensate$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Compensate$_as_optional(sc~$Compensate$_load());
}

tuple $Compensate$_to_tuple(((int, int, int, slice, int, slice, int, int)) v) inline {
    var (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    return __tact_tuple_create_8(v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime);
}

tuple $Compensate$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Compensate$_to_tuple($Compensate$_not_null(v)); 
}

((int, int, int, slice, int, slice, int, int)) $Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int orderType, int orderId, int trxId, slice refundReceiver, int refundAmount, slice executionFeeReceiver, int executionFee, int unlockTime) inline {
    return (orderType, orderId, trxId, refundReceiver, refundAmount, executionFeeReceiver, executionFee, unlockTime);
}

;;
;; Type: CompensateData
;; TLB: _ compensateIndexNext:uint64 compensate:Maybe Compensate{orderType:Maybe uint8,orderId:uint64,trxId:uint64,refundReceiver:Maybe address,refundAmount:coins,executionFeeReceiver:Maybe address,executionFee:coins,unlockTime:uint32} = CompensateData
;;

(int, tuple) $CompensateData$_to_external(((int, tuple)) v) inline {
    var (v'compensateIndexNext, v'compensate) = v; 
    return (v'compensateIndexNext, $Compensate$_to_opt_tuple(v'compensate));
}

((int, tuple)) $CompensateData$_constructor_compensateIndexNext_compensate(int compensateIndexNext, tuple compensate) inline {
    return (compensateIndexNext, compensate);
}

;;
;; Type: OrderBook
;;

builder $OrderBook$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) v) inline {
    var (v'owner, v'stopped, v'orderLockTime, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp, v'lpMinExecutionFee, v'perpMinExecutionFee, v'tlpWallet, v'jettonWallet, v'pool, v'executors, v'lpExecutors, v'compensator, v'liquidityOrders, v'liquidityOrderIndexNext, v'perpOrders, v'perpOrderExs, v'perpOrderIndexNext, v'compensates, v'compensateIndexNext, v'totalExecutionFee) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = build_0.store_uint(v'orderLockTime, 32);
    build_0 = build_0.store_coins(v'lpGasConsumption);
    build_0 = build_0.store_coins(v'perpGasConsumption);
    build_0 = build_0.store_coins(v'poolLpGasConsumption);
    build_0 = build_0.store_coins(v'poolPerpGasConsumption);
    build_0 = build_0.store_coins(v'minTonsForStorage);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'gasTransferJetton);
    build_1 = build_1.store_coins(v'gasForBurnTlp);
    build_1 = build_1.store_coins(v'lpMinExecutionFee);
    build_1 = build_1.store_coins(v'perpMinExecutionFee);
    build_1 = __tact_store_address(build_1, v'tlpWallet);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'jettonWallet);
    build_2 = __tact_store_address(build_2, v'pool);
    build_2 = build_2.store_dict(v'executors);
    build_2 = build_2.store_dict(v'lpExecutors);
    build_2 = __tact_store_address(build_2, v'compensator);
    build_2 = build_2.store_dict(v'liquidityOrders);
    build_2 = build_2.store_uint(v'liquidityOrderIndexNext, 64);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'perpOrders);
    build_3 = build_3.store_dict(v'perpOrderExs);
    build_3 = build_3.store_uint(v'perpOrderIndexNext, 64);
    build_3 = build_3.store_dict(v'compensates);
    build_3 = build_3.store_uint(v'compensateIndexNext, 64);
    build_3 = build_3.store_coins(v'totalExecutionFee);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int))) $OrderBook$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'orderLockTime = sc_0~load_uint(32);
    var v'lpGasConsumption = sc_0~load_coins();
    var v'perpGasConsumption = sc_0~load_coins();
    var v'poolLpGasConsumption = sc_0~load_coins();
    var v'poolPerpGasConsumption = sc_0~load_coins();
    var v'minTonsForStorage = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasTransferJetton = sc_1~load_coins();
    var v'gasForBurnTlp = sc_1~load_coins();
    var v'lpMinExecutionFee = sc_1~load_coins();
    var v'perpMinExecutionFee = sc_1~load_coins();
    var v'tlpWallet = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'jettonWallet = sc_2~__tact_load_address();
    var v'pool = sc_2~__tact_load_address();
    var v'executors = sc_2~load_dict();
    var v'lpExecutors = sc_2~load_dict();
    var v'compensator = sc_2~__tact_load_address();
    var v'liquidityOrders = sc_2~load_dict();
    var v'liquidityOrderIndexNext = sc_2~load_uint(64);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'perpOrders = sc_3~load_dict();
    var v'perpOrderExs = sc_3~load_dict();
    var v'perpOrderIndexNext = sc_3~load_uint(64);
    var v'compensates = sc_3~load_dict();
    var v'compensateIndexNext = sc_3~load_uint(64);
    var v'totalExecutionFee = sc_3~load_coins();
    return (sc_0, (v'owner, v'stopped, v'orderLockTime, v'lpGasConsumption, v'perpGasConsumption, v'poolLpGasConsumption, v'poolPerpGasConsumption, v'minTonsForStorage, v'gasTransferJetton, v'gasForBurnTlp, v'lpMinExecutionFee, v'perpMinExecutionFee, v'tlpWallet, v'jettonWallet, v'pool, v'executors, v'lpExecutors, v'compensator, v'liquidityOrders, v'liquidityOrderIndexNext, v'perpOrders, v'perpOrderExs, v'perpOrderIndexNext, v'compensates, v'compensateIndexNext, v'totalExecutionFee));
}

(slice, ((int))) $OrderBook$init$_load(slice sc_0) inline {
    var v'deployId = sc_0~load_int(257);
    return (sc_0, (v'deployId));
}

(slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $OrderBook$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$OrderBook$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int deployId) = $sc~$OrderBook$init$_load();
        $sc.end_parse();
        return $OrderBook$_contract_init(deployId);
    }
}

() $OrderBook$_contract_store((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $OrderBook$_store(b, v);
    set_data(b.end_cell());
}