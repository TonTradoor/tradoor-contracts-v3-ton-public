#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_OrderBook.headers.fc";
#include "tact_OrderBook.stdlib.fc";
#include "tact_OrderBook.constants.fc";
#include "tact_OrderBook.storage.fc";

;;
;; Contract OrderBook functions
;;

(slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $OrderBook$_contract_init(int $deployId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = (null(), false, 180, 40000000, 90000000, 40000000, 90000000, 10000000, 80000000, 80000000, 50000000, 100000000, null(), null(), null(), null(), null(), null(), null(), 1, null(), null(), 1, null(), 1, 0);
    $self'owner = __tact_context_get_sender();
    $self'jettonWallet = __tact_context_get_sender();
    $self'tlpWallet = __tact_context_get_sender();
    $self'pool = __tact_context_get_sender();
    $self'compensator = __tact_context_get_sender();
    return ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice)) $OrderBook$_fun_configData((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, slice $account) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    int $isExecutor = null();
    if ((~ null?($account))) {
        $isExecutor = __tact_dict_get_slice_int($self'executors, 267, __tact_not_null($account), 1);
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $ConfigData$_constructor_isExecutor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_lpGasConsumption_perpGasConsumption_poolLpGasConsumption_poolPerpGasConsumption_minTonsForStorage_gasTransferJetton_gasForBurnTlp_totalExecutionFee_tlpWallet_jettonWallet_pool($isExecutor, $self'orderLockTime, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'totalExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_refundJetton((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, slice $jettonWallet, int $query_id, int $amount, slice $to, slice $destination) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    if (($amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($jettonWallet, $self'gasTransferJetton, 2, false, $JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($query_id, $amount, $to, $destination, null(), 0, $global_emptySlice()))));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), int) $OrderBook$_fun_exceedGas((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $orderType, int $executionFeeDelta, int $executionMultiple, int $transferJetton) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $tonBalanceBeforeMsg = (((__tact_my_balance() - $self'totalExecutionFee) + $executionFeeDelta) - $ctx'value);
    $tonBalanceBeforeMsg = max(0, $tonBalanceBeforeMsg);
    int $storageFee = ($self'minTonsForStorage - min($tonBalanceBeforeMsg, $self'minTonsForStorage));
    int $extraValue = max(0, ($tonBalanceBeforeMsg - $self'minTonsForStorage));
    int $gasConsumption = (($orderType == 1) ? $self'lpGasConsumption : $self'perpGasConsumption);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ((((($ctx'value - $storageFee) - ($gasConsumption * $executionMultiple)) + $extraValue) - (($executionFeeDelta > 0) ? $executionFeeDelta : 0)) - ($transferJetton ? $self'gasTransferJetton : 0)));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_refundExceedTon((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $orderType, slice $to, int $executionFeeDelta, int $executionMultiple, int $transferJetton) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    int $refundValue = ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_exceedGas($orderType, $executionFeeDelta, $executionMultiple, $transferJetton);
    if (($refundValue > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($to, $refundValue, 2));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), int) $OrderBook$_fun_getPoolGas((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $orderType) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ($self'minTonsForStorage + (($orderType == 1) ? $self'poolLpGasConsumption : $self'poolPerpGasConsumption)));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_handleCreateIncreaseLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $query_id, int $jettonFromAmount, slice $account, int $executionFee, int $jettonDelta) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $refundComment = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    int $refund = false;
    if (($ctx'value < ($executionFee + $self'lpGasConsumption))) {
        $refund = true;
        $refundComment = __gen_slice_string_8ba9018bc74a66ae95c44ce5cb80fbce64c3667445aa0d92336158bca8b98806();
    }
    if (($jettonFromAmount < $jettonDelta)) {
        $refund = true;
        $refundComment = __gen_slice_string_8ce2da4af26e604e5fe31bdccf91e209e52cfe8aa03ca684428d0631f501a690();
    }
    if (($executionFee < $self'lpMinExecutionFee)) {
        $refund = true;
        $refundComment = __gen_slice_string_dec71a65a2cdc865d4307f5761ab01137c82cb0513cb4734f6a1048ca6ce4039();
    }
    if ($refund) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $query_id, $jettonFromAmount, $account, $account);
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_forward($account, $String$_fun_asComment($refundComment), true, null());
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    int $orderId = $self'liquidityOrderIndexNext;
    $self'liquidityOrderIndexNext = $self'liquidityOrderIndexNext + 1;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $orderId, $LiquidityOrder$_store_cell($LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(true, $account, $jettonDelta, $executionFee, now(), false, $account, null())));
    $self'totalExecutionFee = $self'totalExecutionFee + $executionFee;
    $global_emit($LiquidityOrderCreatedEvent$_store_cell($LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(1, $account, $jettonDelta, $executionFee, $orderId, $query_id)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(1, $account, $executionFee, 1, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_handleCreateDecreaseLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $query_id, int $jettonFromAmount, slice $account, int $executionFee, int $tlpDelta) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    throw_unless(41207, (~ null?(__tact_dict_get_slice_int($self'lpExecutors, 267, $account, 1))));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, (($ctx'value - $executionFee) >= $self'lpGasConsumption));
    throw_unless(24562, ($executionFee >= $self'lpMinExecutionFee));
    int $orderId = $self'liquidityOrderIndexNext;
    $self'liquidityOrderIndexNext = $self'liquidityOrderIndexNext + 1;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $orderId, $LiquidityOrder$_store_cell($LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(false, $account, $tlpDelta, $executionFee, now(), false, $account, null())));
    $self'totalExecutionFee = $self'totalExecutionFee + $executionFee;
    $global_emit($LiquidityOrderCreatedEvent$_store_cell($LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(2, $account, $tlpDelta, $executionFee, $orderId, $query_id)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(1, $account, $executionFee, 1, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), (int, tuple)) $OrderBook$_fun_liquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $orderId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder($self'liquidityOrderIndexNext, $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $orderId))));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), int) $OrderBook$_fun_createPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $trxId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $executionFee, int $requestTime) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    int $triggerAbove = false;
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    if (( (($opType == 10)) ? (true) : (($opType == 11)) )) {
        $triggerAbove = (~ $isLong);
        if (( (( (($tpSize > 0)) ? (($tpPrice > 0)) : (false) )) ? (true) : (( (($slSize > 0)) ? (($slPrice > 0)) : (false) )) )) {
            $self'perpOrderExs~__tact_dict_set_uint_cell(64, $orderId, $PerpOrderEx$_store_cell($PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee($tpSize, $tpPrice, $slSize, $slPrice, $executionFee)));
        }
    } else {
        if (($opType == 12)) {
            $triggerAbove = $isLong;
        } else {
            $triggerAbove = (($opType == 13) ? $isLong : (~ $isLong));
        }
    }
    int $blockTime = now();
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $triggerAbove, $executionFee, $blockTime, false, $account, null())));
    $global_emit($PerpOrderCreatedEvent$_store_cell($PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_blockTime_requestTime_trxId($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $executionFee, $orderId, $triggerPrice, $triggerAbove, $blockTime, $requestTime, $trxId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $orderId);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_handleCreateIncreasePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $query_id, int $jettonFromAmount, slice $account, int $executionFee, int $isMarket, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $requestTime) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $refundComment = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    int $refund = false;
    if (($ctx'value < ($executionFee + $self'perpGasConsumption))) {
        $refund = true;
        $refundComment = __gen_slice_string_8ba9018bc74a66ae95c44ce5cb80fbce64c3667445aa0d92336158bca8b98806();
    }
    if (($jettonFromAmount < $marginDelta)) {
        $refund = true;
        $refundComment = __gen_slice_string_8ce2da4af26e604e5fe31bdccf91e209e52cfe8aa03ca684428d0631f501a690();
    }
    int $executionFeeMultiple = 1;
    if (( (($tpSize > 0)) ? (($tpPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (( (($slSize > 0)) ? (($slPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (($executionFee < ($self'perpMinExecutionFee * $executionFeeMultiple))) {
        $refund = true;
        $refundComment = __gen_slice_string_dec71a65a2cdc865d4307f5761ab01137c82cb0513cb4734f6a1048ca6ce4039();
    }
    if ($refund) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $query_id, $jettonFromAmount, $account, $account);
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_forward($account, $String$_fun_asComment($refundComment), true, null());
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    int $opType = ($isMarket ? 10 : 11);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($query_id, $opType, $account, $tokenId, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $tpSize, $tpPrice, $slSize, $slPrice, ($executionFee / $executionFeeMultiple), $requestTime);
    $self'totalExecutionFee = $self'totalExecutionFee + $executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, $account, $executionFee, 1, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), (int, tuple, tuple)) $OrderBook$_fun_perpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $orderId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx($self'perpOrderIndexNext, $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $orderId)), $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $orderId))));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), (int, tuple)) $OrderBook$_fun_compensate((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, int $compensateId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $CompensateData$_constructor_compensateIndexNext_compensate($self'compensateIndexNext, $Compensate$_load_opt(__tact_dict_get_uint_cell($self'compensates, 64, $compensateId))));
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_requireNotStopped((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    throw_unless(40368, (~ $self'stopped));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_requireStopped((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    throw_unless(53296, $self'stopped);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), int) $OrderBook$_fun_stopped((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $self'stopped);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_fun_requireOwner((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), slice) $OrderBook$_fun_owner((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), $self'owner);
}

;;
;; Receivers of a Contract OrderBook
;;

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_UpdateConfig((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, tuple, tuple, tuple) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'orderLockTime, $msg'gasConfig, $msg'executorConfig, $msg'contractConfig) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireOwner();
    $self'orderLockTime = __tact_not_null($msg'orderLockTime);
    tuple $contractConfig = $msg'contractConfig;
    if ((~ null?($contractConfig))) {
        $self'tlpWallet = $ContractConfig$_get_tlpWallet($ContractConfig$_not_null($contractConfig));
        $self'jettonWallet = $ContractConfig$_get_jettonWallet($ContractConfig$_not_null($contractConfig));
        $self'pool = $ContractConfig$_get_pool($ContractConfig$_not_null($contractConfig));
    }
    tuple $executorConfig = $msg'executorConfig;
    if ((~ null?($executorConfig))) {
        cell $executors = $ExecutorConfig$_get_executors($ExecutorConfig$_not_null($executorConfig));
        var ($executor, $enable, $fresh$flag_0) = __tact_dict_min_slice_int($executors, 267, 1);
        while ($fresh$flag_0) {
            $self'executors~__tact_dict_set_slice_int(267, $executor, ($enable ? true : null()), 1);
            ($executor, $enable, $fresh$flag_0) = __tact_dict_next_slice_int($executors, 267, $executor, 1);
        }
        cell $lpExecutors = $ExecutorConfig$_get_lpExecutors($ExecutorConfig$_not_null($executorConfig));
        var ($executor, $enable, $fresh$flag_1) = __tact_dict_min_slice_int($lpExecutors, 267, 1);
        while ($fresh$flag_1) {
            $self'lpExecutors~__tact_dict_set_slice_int(267, $executor, ($enable ? true : null()), 1);
            ($executor, $enable, $fresh$flag_1) = __tact_dict_next_slice_int($lpExecutors, 267, $executor, 1);
        }
        $self'compensator = $ExecutorConfig$_get_compensator($ExecutorConfig$_not_null($executorConfig));
    }
    tuple $gasConfig = $msg'gasConfig;
    if ((~ null?($gasConfig))) {
        $self'lpGasConsumption = $GasConfig$_get_lpGasConsumption($GasConfig$_not_null($gasConfig));
        $self'perpGasConsumption = $GasConfig$_get_perpGasConsumption($GasConfig$_not_null($gasConfig));
        $self'poolLpGasConsumption = $GasConfig$_get_poolLpGasConsumption($GasConfig$_not_null($gasConfig));
        $self'poolPerpGasConsumption = $GasConfig$_get_poolPerpGasConsumption($GasConfig$_not_null($gasConfig));
        $self'minTonsForStorage = $GasConfig$_get_minTonsForStorage($GasConfig$_not_null($gasConfig));
        $self'gasTransferJetton = $GasConfig$_get_gasTransferJetton($GasConfig$_not_null($gasConfig));
        $self'lpMinExecutionFee = $GasConfig$_get_lpMinExecutionFee($GasConfig$_not_null($gasConfig));
        $self'perpMinExecutionFee = $GasConfig$_get_perpMinExecutionFee($GasConfig$_not_null($gasConfig));
        $self'gasForBurnTlp = $GasConfig$_get_gasForBurnTlp($GasConfig$_not_null($gasConfig));
    }
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_reply(__gen_cell_comment_6295eb1c7c2429a7653770536e6fe4b297a8392349c80f082ccbf76fc3404f1f());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) %$OrderBook$_internal_empty((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_JettonTransferNotification((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'forward_payload) = $msg;
    if (( (( ~ __tact_slice_eq_bits($self'jettonWallet, __tact_context_get_sender()) )) ? (( ~ __tact_slice_eq_bits($self'tlpWallet, __tact_context_get_sender()) )) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_notify($JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $msg'sender, $msg'sender, null(), 0, $global_emptySlice())));
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    if ($self'stopped) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton(__tact_context_get_sender(), $msg'query_id, $msg'amount, $msg'sender, $msg'sender);
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_forward($msg'sender, __gen_cell_comment_fe23d22dd1bc5949b7236270d9979ccb65af285127385c3167cb66b9ea8a97e5(), true, null());
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    int $exist = ($msg'forward_payload~load_uint(1) == 1);
    if ((~ $exist)) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton(__tact_context_get_sender(), $msg'query_id, $msg'amount, $msg'sender, $msg'sender);
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_forward($msg'sender, __gen_cell_comment_38d9a6bcfd62e0adf3e99c849984e2cf2a3ded8b23400bd1c243e2ef9984651b(), true, null());
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    if (( __tact_slice_eq_bits($self'jettonWallet, __tact_context_get_sender()) )) {
        slice $operation = $Cell$_fun_asSlice($msg'forward_payload~load_ref());
        int $opCode = $operation~load_uint(8);
        if (( ($exist) ? (($opCode == 1)) : (false) )) {
            int $jettonDelta = $operation~load_coins();
            int $executionFee = $operation~load_coins();
            ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_handleCreateIncreaseLiquidityOrder($msg'query_id, $msg'amount, $msg'sender, $executionFee, $jettonDelta);
        } elseif (( ($exist) ? (($opCode == 2)) : (false) )) {
            int $executionFee = $operation~load_coins();
            int $isMarket = ($operation~load_int(1) == -1);
            int $tokenId = $operation~load_uint(16);
            int $isLong = ($operation~load_int(1) == -1);
            int $marginDelta = $operation~load_coins();
            int $sizeDelta = $operation~load_coins();
            int $triggerPrice = $operation~load_uint(128);
            int $requestTime = $operation~load_uint(32);
            slice $tpSl = $Cell$_fun_asSlice($operation~load_ref());
            int $tpSize = $tpSl~load_coins();
            int $tpPrice = $tpSl~load_uint(128);
            int $slSize = $tpSl~load_coins();
            int $slPrice = $tpSl~load_uint(128);
            ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_handleCreateIncreasePerpOrder($msg'query_id, $msg'amount, $msg'sender, $executionFee, $isMarket, $tokenId, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $tpSize, $tpPrice, $slSize, $slPrice, $requestTime);
        } else {
            ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_notify($JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $msg'sender, $msg'sender, null(), 0, $global_emptySlice())));
        }
    } else {
        slice $operation = $Cell$_fun_asSlice($msg'forward_payload~load_ref());
        int $tlpDelta = $operation~load_coins();
        int $executionFee = $operation~load_coins();
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_handleCreateDecreaseLiquidityOrder($msg'query_id, $msg'amount, $msg'sender, $executionFee, $tlpDelta);
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_CancelLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'orderId, $msg'trxId, $msg'executionFeeReceiver) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= ($self'lpGasConsumption + $self'gasTransferJetton)));
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $LiquidityOrder$_not_null($orderOpt);
    throw_unless(24173, (~ $order'isPending));
    int $isExecutor = (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1)));
    throw_unless(41207, ( ($isExecutor) ? (true) : (( __tact_slice_eq_bits($order'account, $ctx'sender) )) ));
    if ((~ $isExecutor)) {
        throw_unless(39703, (($order'blockTime + $self'orderLockTime) <= now()));
    }
    $self'liquidityOrders~__tact_dict_delete_uint(64, $msg'orderId);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton(($order'isIncrease ? $self'jettonWallet : $self'tlpWallet), $msg'trxId, $order'jettonDelta, $order'account, $ctx'sender);
    slice $executionFeeReceiver = ((~ null?($msg'executionFeeReceiver)) ? __tact_not_null($msg'executionFeeReceiver) : $ctx'sender);
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($LiquidityOrderCancelledEvent$_store_cell($LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId(($order'isIncrease ? 1 : 2), $msg'orderId, $msg'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(1, $ctx'sender, (- $order'executionFee), 1, $order'isIncrease);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_ExecuteLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, slice, cell, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'orderId, $msg'trxId, $msg'executionFeeReceiver, $msg'prices, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $LiquidityOrder$_not_null($orderOpt);
    int $estimateGas = (((($self'lpGasConsumption * 2) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))) + ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_getPoolGas(1)) + $self'gasTransferJetton);
    if ((~ $order'isIncrease)) {
        $estimateGas = $estimateGas + $self'gasTransferJetton;
    }
    throw_unless(19305, ($ctx'value >= $estimateGas));
    throw_unless(24173, (~ $order'isPending));
    throw_unless(41207, (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1))));
    $order'executionFeeReceiver = ((~ null?($msg'executionFeeReceiver)) ? __tact_not_null($msg'executionFeeReceiver) : $ctx'sender);
    $order'lastOperator = $ctx'sender;
    $order'isPending = true;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $msg'orderId, $LiquidityOrder$_store_cell(($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator)));
    $global_send($SendParameters$_constructor_to_value_mode_body($self'pool, 0, 64, $UpdateLiquidityPool$_store_cell($UpdateLiquidityPool$_constructor_isIncrease_orderId_trxId_account_jettonDelta_prices_lpFundingFeeGrowth_rolloverFeeGrowth($order'isIncrease, $msg'orderId, $msg'trxId, $order'account, $order'jettonDelta, $msg'prices, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth))));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_LiquidityPoolUpdated((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'isIncrease, $msg'orderId, $msg'tlpPrice, $msg'tlpDelta, $msg'jettonDelta, $msg'trxId) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(41207, ( __tact_slice_eq_bits($self'pool, $ctx'sender) ));
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $LiquidityOrder$_not_null($orderOpt);
    if ((~ $msg'isIncrease)) {
        throw_unless(19305, ($ctx'value >= (($self'lpGasConsumption + $self'gasForBurnTlp) + $self'gasTransferJetton)));
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'tlpWallet, $self'gasForBurnTlp, 2, false, $JettonBurn$_store_cell($JettonBurn$_constructor_query_id_amount_response_destination_custom_payload($msg'trxId, $msg'tlpDelta, $order'account, null()))));
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $msg'trxId, $msg'jettonDelta, $order'account, $order'lastOperator);
    }
    $self'liquidityOrders~__tact_dict_delete_uint(64, $msg'orderId);
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($order'executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($LiquidityOrderExecutedEvent$_store_cell($LiquidityOrderExecutedEvent$_constructor_opType_orderId_trxId(($order'isIncrease ? 1 : 2), $msg'orderId, $msg'trxId)));
    if ((~ null?($order'lastOperator))) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(1, __tact_not_null($order'lastOperator), (- $order'executionFee), 1, true);
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_receive_binary_bounce_UpdateLiquidityPool((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int) $src) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($src'isIncrease, $src'orderId) = $src;
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $src'orderId));
    if (null?($orderOpt)) {
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $LiquidityOrder$_not_null($orderOpt);
    $order'isPending = false;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $src'orderId, $LiquidityOrder$_store_cell(($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator)));
    if ((~ null?($order'lastOperator))) {
        $global_send($SendParameters$_constructor_to_value_mode(__tact_not_null($order'lastOperator), 0, 66));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_CreateDecreasePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'executionFee, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'trxId, $msg'requestTime) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, (($ctx'value - $msg'executionFee) >= $self'perpGasConsumption));
    throw_unless(24562, ($msg'executionFee >= $self'perpMinExecutionFee));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($msg'trxId, 12, $ctx'sender, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, 0, 0, 0, 0, $msg'executionFee, $msg'requestTime);
    $self'totalExecutionFee = $self'totalExecutionFee + $msg'executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, $ctx'sender, $msg'executionFee, 1, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_CreateTpSlPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'executionFee, $msg'tokenId, $msg'isLong, $msg'tpSize, $msg'tpPrice, $msg'slSize, $msg'slPrice, $msg'trxId, $msg'requestTime) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $executionFeeMultiple = 0;
    if (( (($msg'tpSize > 0)) ? (($msg'tpPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (( (($msg'slSize > 0)) ? (($msg'slPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    throw_unless(19305, (($ctx'value - $msg'executionFee) >= ($self'perpGasConsumption * $executionFeeMultiple)));
    throw_unless(24562, ($msg'executionFee >= ($self'perpMinExecutionFee * $executionFeeMultiple)));
    if (( (($msg'tpSize > 0)) ? (($msg'tpPrice > 0)) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($msg'trxId, 13, $ctx'sender, $msg'tokenId, $msg'isLong, 0, $msg'tpSize, $msg'tpPrice, 0, 0, 0, 0, ($msg'executionFee / $executionFeeMultiple), $msg'requestTime);
    }
    if (( (($msg'slSize > 0)) ? (($msg'slPrice > 0)) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($msg'trxId, 14, $ctx'sender, $msg'tokenId, $msg'isLong, 0, $msg'slSize, $msg'slPrice, 0, 0, 0, 0, ($msg'executionFee / $executionFeeMultiple), $msg'requestTime);
    }
    $self'totalExecutionFee = $self'totalExecutionFee + $msg'executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, $ctx'sender, $msg'executionFee, $executionFeeMultiple, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_CancelPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (slice, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'executionFeeReceiver, $msg'orderId, $msg'trxId) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $PerpOrder$_not_null($orderOpt);
    if (( (($order'opType == 10)) ? (true) : (($order'opType == 11)) )) {
        throw_unless(19305, ($ctx'value >= ($self'perpGasConsumption + $self'gasTransferJetton)));
    } else {
        throw_unless(19305, ($ctx'value >= $self'perpGasConsumption));
    }
    throw_unless(24173, (~ $order'isPending));
    int $isExecutor = (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1)));
    throw_unless(41207, ( ($isExecutor) ? (true) : (( __tact_slice_eq_bits($order'account, $ctx'sender) )) ));
    if (( ((~ $isExecutor)) ? (( (($order'opType == 10)) ? (true) : (($order'opType == 12)) )) : (false) )) {
        throw_unless(39703, (($order'blockTime + $self'orderLockTime) <= now()));
    }
    slice $executionFeeReceiver = (null?($msg'executionFeeReceiver) ? $ctx'sender : __tact_not_null($msg'executionFeeReceiver));
    int $executionFee = 0;
    if (( (($order'opType == 10)) ? (true) : (($order'opType == 11)) )) {
        tuple $orderExOpt = $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $msg'orderId));
        if ((~ null?($orderExOpt))) {
            var ($orderEx'tpSize, $orderEx'tpPrice, $orderEx'slSize, $orderEx'slPrice, $orderEx'executionFee) = $PerpOrderEx$_not_null($orderExOpt);
            int $tpSlExecutionFee = 0;
            if (( (($orderEx'tpSize > 0)) ? (($orderEx'tpPrice > 0)) : (false) )) {
                $tpSlExecutionFee = $tpSlExecutionFee + $orderEx'executionFee;
            }
            if (( (($orderEx'slSize > 0)) ? (($orderEx'slPrice > 0)) : (false) )) {
                $tpSlExecutionFee = $tpSlExecutionFee + $orderEx'executionFee;
            }
            if (($tpSlExecutionFee > 0)) {
                $global_send($SendParameters$_constructor_to_value_mode($order'account, $tpSlExecutionFee, 2));
                $executionFee = $executionFee + $tpSlExecutionFee;
            }
            $self'perpOrderExs~__tact_dict_delete_uint(64, $msg'orderId);
        }
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $msg'trxId, $order'marginDelta, $order'account, $ctx'sender);
    }
    $self'perpOrders~__tact_dict_delete_uint(64, $msg'orderId);
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $executionFee = $executionFee + $order'executionFee;
    }
    $self'totalExecutionFee = $self'totalExecutionFee - $executionFee;
    $global_emit($PerpOrderCancelledEvent$_store_cell($PerpOrderCancelledEvent$_constructor_opType_orderId_trxId($order'opType, $msg'orderId, $msg'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, $ctx'sender, (- $executionFee), 1, ( (($order'opType == 10)) ? (true) : (($order'opType == 11)) ));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_ExecutePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (slice, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'executionFeeReceiver, $msg'orderId, $msg'trxId, $msg'tokenId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $PerpOrder$_not_null($orderOpt);
    if (( (($order'opType == 10)) ? (true) : (($order'opType == 11)) )) {
        throw_unless(19305, ($ctx'value >= ((($self'perpGasConsumption * 2) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))) + ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_getPoolGas(2))));
    } else {
        throw_unless(19305, ($ctx'value >= (((($self'perpGasConsumption * 2) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))) + ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_getPoolGas(2)) + $self'gasTransferJetton)));
    }
    throw_unless(24173, (~ $order'isPending));
    throw_unless(51911, ($msg'tokenId == $order'tokenId));
    throw_unless(41207, (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1))));
    $order'executionFeeReceiver = (null?($msg'executionFeeReceiver) ? $ctx'sender : __tact_not_null($msg'executionFeeReceiver));
    $order'lastOperator = $ctx'sender;
    $order'isPending = true;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $msg'orderId, $PerpOrder$_store_cell(($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'pool, 0, 64, true, $UpdatePerpPosition$_store_cell($UpdatePerpPosition$_constructor_orderId_opType_trxId_account_tokenId_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_price_premiumRate_fundingFeeGrowth_rolloverFeeGrowth($msg'orderId, $order'opType, $msg'trxId, $order'account, $order'tokenId, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth))));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_PerpPositionUpdated((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'orderId, $msg'payout, $msg'trxId) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(41207, ( __tact_slice_eq_bits($self'pool, __tact_context_get_sender()) ));
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $msg'orderId));
    if (null?($orderOpt)) {
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $PerpOrder$_not_null($orderOpt);
    int $executionFee = 0;
    int $executionFeeMultiple = 1;
    if (( (($order'opType == 10)) ? (true) : (($order'opType == 11)) )) {
        throw_unless(19305, ($ctx'value >= $self'perpGasConsumption));
        tuple $orderExOpt = $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $msg'orderId));
        if ((~ null?($orderExOpt))) {
            var ($orderEx'tpSize, $orderEx'tpPrice, $orderEx'slSize, $orderEx'slPrice, $orderEx'executionFee) = $PerpOrderEx$_not_null($orderExOpt);
            if (( (($orderEx'tpSize > 0)) ? (($orderEx'tpPrice > 0)) : (false) )) {
                $executionFeeMultiple = $executionFeeMultiple + 1;
                ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($msg'trxId, 13, __tact_context_get_sender(), $order'tokenId, $order'isLong, 0, $orderEx'tpSize, $orderEx'tpPrice, 0, 0, 0, 0, $orderEx'executionFee, now());
            }
            if (( (($orderEx'slSize > 0)) ? (($orderEx'slPrice > 0)) : (false) )) {
                $executionFeeMultiple = $executionFeeMultiple + 1;
                ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_createPerpOrder($msg'trxId, 14, __tact_context_get_sender(), $order'tokenId, $order'isLong, 0, $orderEx'slSize, $orderEx'slPrice, 0, 0, 0, 0, $orderEx'executionFee, now());
            }
            $self'perpOrderExs~__tact_dict_set_uint_cell(64, $msg'orderId, $PerpOrderEx$_store_opt(null()));
        }
    } else {
        throw_unless(19305, ($ctx'value >= ($self'perpGasConsumption + $self'gasTransferJetton)));
    }
    $self'perpOrders~__tact_dict_set_uint_cell(64, $msg'orderId, $PerpOrder$_store_opt(null()));
    if (($msg'payout > 0)) {
        if (($order'opType == 3)) {
            ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $msg'trxId, $msg'payout, $order'executionFeeReceiver, $order'lastOperator);
        } else {
            ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $msg'trxId, $msg'payout, $order'account, $order'lastOperator);
        }
    }
    $global_emit($PerpOrderExecutedEvent$_store_cell($PerpOrderExecutedEvent$_constructor_opType_orderId_trxId($order'opType, $msg'orderId, $msg'trxId)));
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($order'executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, __tact_not_null($order'lastOperator), (- $order'executionFee), $executionFeeMultiple, ($msg'payout > 0));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_receive_binary_bounce_UpdatePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int) $src) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($src'orderId, $src'opType, $src'tokenId) = $src;
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $src'orderId));
    if (null?($orderOpt)) {
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator) = $PerpOrder$_not_null($orderOpt);
    if (($order'opType == 3)) {
        $self'perpOrders~__tact_dict_set_uint_cell(64, $src'orderId, $PerpOrder$_store_opt(null()));
    } else {
        $order'isPending = false;
        $self'perpOrders~__tact_dict_set_uint_cell(64, $src'orderId, $PerpOrder$_store_cell(($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending, $order'executionFeeReceiver, $order'lastOperator)));
    }
    if ((~ null?($order'lastOperator))) {
        $global_send($SendParameters$_constructor_to_value_mode(__tact_not_null($order'lastOperator), 0, 66));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_LiquidatePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (slice, int, slice, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'liquidationFeeReceiver, $msg'tokenId, $msg'account, $msg'isLong, $msg'trxId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= (((($self'perpGasConsumption * 2) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))) + ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_getPoolGas(2)) + $self'gasTransferJetton)));
    throw_unless(41207, (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1))));
    slice $liquidationFeeReceiver = ((~ null?($msg'liquidationFeeReceiver)) ? __tact_not_null($msg'liquidationFeeReceiver) : $ctx'sender);
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(3, $msg'tokenId, $msg'account, $msg'isLong, 0, 0, 0, false, 0, now(), true, $liquidationFeeReceiver, $ctx'sender)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'pool, 0, 64, true, $UpdatePerpPosition$_store_cell($UpdatePerpPosition$_constructor_opType_orderId_trxId_account_tokenId_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_price_premiumRate_fundingFeeGrowth_rolloverFeeGrowth(3, $orderId, $msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, 0, 0, 0, false, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth))));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_ADLPerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, slice, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'trxId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= (((($self'perpGasConsumption * 2) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))) + ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_getPoolGas(2)) + $self'gasTransferJetton)));
    throw_unless(41207, (~ null?(__tact_dict_get_slice_int($self'executors, 267, $ctx'sender, 1))));
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending_executionFeeReceiver_lastOperator(4, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, 0, false, 0, now(), true, $ctx'sender, $ctx'sender)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'pool, 0, 64, true, $UpdatePerpPosition$_store_cell($UpdatePerpPosition$_constructor_opType_orderId_trxId_account_tokenId_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_price_premiumRate_fundingFeeGrowth_rolloverFeeGrowth(4, $orderId, $msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, 0, $msg'sizeDelta, 0, false, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth))));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_SendProtocolFee((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, slice, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'trxId, $msg'feeReceiver, $msg'amount) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'pool, __tact_context_get_sender()) ));
    if (($msg'amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'jettonWallet, $self'gasTransferJetton, 66, false, $JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'trxId, $msg'amount, $msg'feeReceiver, $msg'feeReceiver, null(), 0, $Cell$_fun_asSlice(end_cell(store_uint(begin_cell(), 0, 1)))))));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_CreateCompensate((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int, slice, int, slice, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits(__tact_context_get_sender(), $self'compensator) ));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= $self'perpGasConsumption));
    int $compensateId = $self'compensateIndexNext;
    $self'compensateIndexNext = $self'compensateIndexNext + 1;
    $self'compensates~__tact_dict_set_uint_cell(64, $compensateId, $Compensate$_store_cell($Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime($msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee, (now() + 259200))));
    $global_emit($CompensateCreatedEvent$_store_cell($CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime($compensateId, $msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee, (now() + 259200))));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, __tact_context_get_sender(), 0, 1, false);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_ExecuteOrCancelCompensate((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($msg'isCancel, $msg'compensateId, $msg'trxId) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits(__tact_context_get_sender(), $self'compensator) ));
    throw_unless(19305, ($Context$_get_value(__tact_context_get()) >= ($self'perpGasConsumption + $self'gasTransferJetton)));
    tuple $compensateOpt = $Compensate$_load_opt(__tact_dict_get_uint_cell($self'compensates, 64, $msg'compensateId));
    throw_unless(11120, (~ null?($compensateOpt)));
    var ($compensate'orderType, $compensate'orderId, $compensate'trxId, $compensate'refundReceiver, $compensate'refundAmount, $compensate'executionFeeReceiver, $compensate'executionFee, $compensate'unlockTime) = $Compensate$_not_null($compensateOpt);
    if ($msg'isCancel) {
        $self'compensates~__tact_dict_set_uint_cell(64, $msg'compensateId, $Compensate$_store_opt(null()));
        $global_emit($CompensateCancelledEvent$_store_cell($CompensateCancelledEvent$_constructor_compensateId_trxId($msg'compensateId, $msg'trxId)));
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, __tact_context_get_sender(), 0, 1, false);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
    }
    throw_unless(31425, (now() >= $compensate'unlockTime));
    if ((~ null?($compensate'orderType))) {
        if (__tact_int_eq_nullable_one($compensate'orderType, 1)) {
            $self'liquidityOrders~__tact_dict_set_uint_cell(64, $compensate'orderId, $LiquidityOrder$_store_opt(null()));
        } else {
            $self'perpOrders~__tact_dict_set_uint_cell(64, $compensate'orderId, $PerpOrder$_store_opt(null()));
            $self'perpOrderExs~__tact_dict_set_uint_cell(64, $compensate'orderId, $PerpOrderEx$_store_opt(null()));
        }
    }
    if (( ((~ null?($compensate'refundReceiver))) ? (($compensate'refundAmount > 0)) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundJetton($self'jettonWallet, $compensate'trxId, $compensate'refundAmount, __tact_not_null($compensate'refundReceiver), __tact_context_get_sender());
    }
    if (( ((~ null?($compensate'executionFeeReceiver))) ? (($compensate'executionFee > 0)) : (false) )) {
        $global_send($SendParameters$_constructor_to_value_mode(__tact_not_null($compensate'executionFeeReceiver), $compensate'executionFee, 2));
    }
    $self'compensates~__tact_dict_set_uint_cell(64, $msg'compensateId, $Compensate$_store_opt(null()));
    $global_emit($CompensateExecutedEvent$_store_cell($CompensateExecutedEvent$_constructor_compensateId_trxId($msg'compensateId, $compensate'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_refundExceedTon(2, __tact_context_get_sender(), 0, 1, ( ((~ null?($compensate'refundReceiver))) ? (($compensate'refundAmount > 0)) : (false) ));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int)), ()) $OrderBook$_internal_binary_Deploy((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireOwner();
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireStopped();
    $self'stopped = false;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_reply(__gen_cell_comment_514f593ead485926515219a03034c6b162f1c29390f83f2f1bd70b8b77731ec3());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), ()) $OrderBook$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee) = $self;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireOwner();
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_requireNotStopped();
    $self'stopped = true;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee)~$OrderBook$_fun_reply(__gen_cell_comment_8f4b6a166554b4f282855d0333c627d5b58d281ea4ba11e4def91a1053193b2d());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'lpGasConsumption, $self'perpGasConsumption, $self'poolLpGasConsumption, $self'poolPerpGasConsumption, $self'minTonsForStorage, $self'gasTransferJetton, $self'gasForBurnTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'tlpWallet, $self'jettonWallet, $self'pool, $self'executors, $self'lpExecutors, $self'compensator, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'totalExecutionFee), ());
}

;;
;; Get methods of a Contract OrderBook
;;

_ %configData(slice $$account) method_id(82657) {
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_configData($account);
    return $ConfigData$_to_external(res);
}

_ %liquidityOrder(int $$orderId) method_id(101616) {
    int $orderId = $$orderId;
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_liquidityOrder($orderId);
    return $LiquidityOrderData$_to_external(res);
}

_ %perpOrder(int $$orderId) method_id(129518) {
    int $orderId = $$orderId;
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_perpOrder($orderId);
    return $PerpOrderData$_to_external(res);
}

_ %compensate(int $$compensateId) method_id(98837) {
    int $compensateId = $$compensateId;
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_compensate($compensateId);
    return $CompensateData$_to_external(res);
}

_ %stopped() method_id(74107) {
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_stopped();
    return res;
}

_ %owner() method_id(83229) {
    var self = $OrderBook$_contract_load();
    var res = self~$OrderBook$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.resumable"H >> 128,
        "org.ton.stoppable"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmfAvhkmr6WdVFoEJfFR1D3pCMwN7qtbEDFK53vuUY7jAp";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract OrderBook
;;

((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int), int) $OrderBook$_contract_router_internal((slice, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, cell, cell, slice, cell, int, cell, cell, int, cell, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for UpdateLiquidityPool message
        if (op == 1428410654) {
            var msg = in_msg~$UpdateLiquidityPool$_load_bounced();
            self~$OrderBook$_receive_binary_bounce_UpdateLiquidityPool(msg);
            return (self, true);
        }
        
        ;; Bounced handler for UpdatePerpPosition message
        if (op == 4283950423) {
            var msg = in_msg~$UpdatePerpPosition$_load_bounced();
            self~$OrderBook$_receive_binary_bounce_UpdatePerpPosition(msg);
            return (self, true);
        }
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 2603796489) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$OrderBook$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$OrderBook$_internal_empty();
        return (self, true);
    }
    
    ;; Receive JettonTransferNotification message
    if (op == 1935855772) {
        var msg = in_msg~$JettonTransferNotification$_load();
        self~$OrderBook$_internal_binary_JettonTransferNotification(msg);
        return (self, true);
    }
    
    ;; Receive CancelLiquidityOrder message
    if (op == 1209955681) {
        var msg = in_msg~$CancelLiquidityOrder$_load();
        self~$OrderBook$_internal_binary_CancelLiquidityOrder(msg);
        return (self, true);
    }
    
    ;; Receive ExecuteLiquidityOrder message
    if (op == 2882492539) {
        var msg = in_msg~$ExecuteLiquidityOrder$_load();
        self~$OrderBook$_internal_binary_ExecuteLiquidityOrder(msg);
        return (self, true);
    }
    
    ;; Receive LiquidityPoolUpdated message
    if (op == 3445831356) {
        var msg = in_msg~$LiquidityPoolUpdated$_load();
        self~$OrderBook$_internal_binary_LiquidityPoolUpdated(msg);
        return (self, true);
    }
    
    ;; Receive CreateDecreasePerpOrder message
    if (op == 4009071181) {
        var msg = in_msg~$CreateDecreasePerpOrder$_load();
        self~$OrderBook$_internal_binary_CreateDecreasePerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive CreateTpSlPerpOrder message
    if (op == 4182737083) {
        var msg = in_msg~$CreateTpSlPerpOrder$_load();
        self~$OrderBook$_internal_binary_CreateTpSlPerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive CancelPerpOrder message
    if (op == 161477795) {
        var msg = in_msg~$CancelPerpOrder$_load();
        self~$OrderBook$_internal_binary_CancelPerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive ExecutePerpOrder message
    if (op == 2796351108) {
        var msg = in_msg~$ExecutePerpOrder$_load();
        self~$OrderBook$_internal_binary_ExecutePerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive PerpPositionUpdated message
    if (op == 4009870004) {
        var msg = in_msg~$PerpPositionUpdated$_load();
        self~$OrderBook$_internal_binary_PerpPositionUpdated(msg);
        return (self, true);
    }
    
    ;; Receive LiquidatePerpPosition message
    if (op == 362571149) {
        var msg = in_msg~$LiquidatePerpPosition$_load();
        self~$OrderBook$_internal_binary_LiquidatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive ADLPerpPosition message
    if (op == 3418735969) {
        var msg = in_msg~$ADLPerpPosition$_load();
        self~$OrderBook$_internal_binary_ADLPerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive SendProtocolFee message
    if (op == 1574274145) {
        var msg = in_msg~$SendProtocolFee$_load();
        self~$OrderBook$_internal_binary_SendProtocolFee(msg);
        return (self, true);
    }
    
    ;; Receive CreateCompensate message
    if (op == 4231235453) {
        var msg = in_msg~$CreateCompensate$_load();
        self~$OrderBook$_internal_binary_CreateCompensate(msg);
        return (self, true);
    }
    
    ;; Receive ExecuteOrCancelCompensate message
    if (op == 2296903975) {
        var msg = in_msg~$ExecuteOrCancelCompensate$_load();
        self~$OrderBook$_internal_binary_ExecuteOrCancelCompensate(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$OrderBook$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Resume" message
        if (text_op == 0x6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df) {
            self~$OrderBook$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df();
            return (self, true);
        }
        
        ;; Receive "Stop" message
        if (text_op == 0xbcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501) {
            self~$OrderBook$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $OrderBook$_contract_load();
    
    ;; Handle operation
    int handled = self~$OrderBook$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $OrderBook$_contract_store(self);
}
