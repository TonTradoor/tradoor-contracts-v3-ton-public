;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: UpdateConfig
;; Header: 0x4d35a99c
;; TLB: update_config#4d35a99c gasConsumption:Maybe int257 minTonsForStorage:Maybe int257 rbfLockTime:Maybe int257 bonusFactor:Maybe int257 minLPMargin:Maybe int257 maxLPLeverage:Maybe int257 lpLiquidationFee:Maybe int257 lpMaxRiskRate:Maybe int257 orderBook:Maybe address = UpdateConfig
;;

(slice, ((int, int, int, int, int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1295362460);
    var v'gasConsumption = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'minTonsForStorage = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'rbfLockTime = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'bonusFactor = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'minLPMargin = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'maxLPLeverage = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'lpLiquidationFee = sc_2~load_int(1) ? sc_2~load_int(257) : null();
    var v'lpMaxRiskRate = sc_2~load_int(1) ? sc_2~load_int(257) : null();
    var v'orderBook = sc_2~__tact_load_address_opt();
    return (sc_0, (v'gasConsumption, v'minTonsForStorage, v'rbfLockTime, v'bonusFactor, v'minLPMargin, v'maxLPLeverage, v'lpLiquidationFee, v'lpMaxRiskRate, v'orderBook));
}

;;
;; Type: UpdateTokenConfig
;; Header: 0x8ed4d7aa
;; TLB: update_token_config#8ed4d7aa tokenId:int257 name:Maybe ^string enable:Maybe bool minMarginPerPosition:Maybe int257 maxLeveragePerPosition:Maybe int257 liquidationFeeRatePerPosition:Maybe int257 liquidationExecutionFee:Maybe int257 interestRate:Maybe int257 maxFundingRate:Maybe int257 = UpdateTokenConfig
;;

(slice, ((int, slice, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2396313514);
    var v'tokenId = sc_0~load_int(257);
    var v'name = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    var v'enable = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'minMarginPerPosition = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'maxLeveragePerPosition = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'liquidationFeeRatePerPosition = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'liquidationExecutionFee = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'interestRate = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'maxFundingRate = sc_2~load_int(1) ? sc_2~load_int(257) : null();
    return (sc_0, (v'tokenId, v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate));
}

;;
;; Type: UpdateRBFPosition
;; Header: 0xe89cd45f
;; TLB: update_rbf_position#e89cd45f isIncrease:bool orderId:uint64 account:address liquidityDelta:int257 trxId:uint64 = UpdateRBFPosition
;;

(slice, ((int, int, slice, int, int))) $UpdateRBFPosition$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3902592095);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    var v'account = sc_0~__tact_load_address();
    var v'liquidityDelta = sc_0~load_int(257);
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'isIncrease, v'orderId, v'account, v'liquidityDelta, v'trxId));
}

;;
;; Type: UpdateRBFPositionSuccess
;; Header: 0x1cf0cf81
;; TLB: update_rbf_position_success#1cf0cf81 orderId:int257 receive:int257 trxId:uint64 = UpdateRBFPositionSuccess
;;

builder $UpdateRBFPositionSuccess$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 485543809, 32);
    build_0 = build_0.store_int(v'orderId, 257);
    build_0 = build_0.store_int(v'receive, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $UpdateRBFPositionSuccess$_store_cell((int, int, int) v) inline {
    return $UpdateRBFPositionSuccess$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $UpdateRBFPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline {
    return (orderId, receive, trxId);
}

;;
;; Type: CancelIncreasePerpPositionMarketOrder
;; Header: 0xfc741917
;; TLB: cancel_increase_perp_position_market_order#fc741917 index:int257 trxId:int257 = CancelIncreasePerpPositionMarketOrder
;;

(slice, ((int, int))) $CancelIncreasePerpPositionMarketOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4235467031);
    var v'index = sc_0~load_int(257);
    var v'trxId = sc_0~load_int(257);
    return (sc_0, (v'index, v'trxId));
}

;;
;; Type: ExecuteIncreasePerpPositionMarketOrder
;; Header: 0xbe94fb37
;; TLB: execute_increase_perp_position_market_order#be94fb37 index:int257 trxId:int257 = ExecuteIncreasePerpPositionMarketOrder
;;

(slice, ((int, int))) $ExecuteIncreasePerpPositionMarketOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3197434679);
    var v'index = sc_0~load_int(257);
    var v'trxId = sc_0~load_int(257);
    return (sc_0, (v'index, v'trxId));
}

;;
;; Type: RBFPositionIncreasedEvent
;; Header: 0x8e9fd47d
;; TLB: rbf_position_increased_event#8e9fd47d positionId:int257 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 unlockTimeAfter:int257 = RBFPositionIncreasedEvent
;;

builder $RBFPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'unlockTimeAfter) = v;
    build_0 = store_uint(build_0, 2392839293, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'liquidityAfter, 257);
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'unlockTimeAfter, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $RBFPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int) v) inline {
    return $RBFPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int)) $RBFPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter) inline {
    return (positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, unlockTimeAfter);
}

;;
;; Type: RBFPositionDecreasedEvent
;; Header: 0x61a74737
;; TLB: rbf_position_decreased_event#61a74737 positionId:int257 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 receive:int257 = RBFPositionDecreasedEvent
;;

builder $RBFPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'receive) = v;
    build_0 = store_uint(build_0, 1638352695, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'liquidityAfter, 257);
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'receive, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $RBFPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int) v) inline {
    return $RBFPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int)) $RBFPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_receive(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int receive) inline {
    return (positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, receive);
}

;;
;; Type: ConfigData
;; TLB: _ rbfLockTime:int257 bonusFactor:int257 minLPMargin:int257 maxLPLeverage:int257 lpLiquidationFee:int257 lpMaxRiskRate:int257 orderBook:address = ConfigData
;;

(int, int, int, int, int, int, slice) $ConfigData$_to_external(((int, int, int, int, int, int, slice)) v) inline {
    var (v'rbfLockTime, v'bonusFactor, v'minLPMargin, v'maxLPLeverage, v'lpLiquidationFee, v'lpMaxRiskRate, v'orderBook) = v; 
    return (v'rbfLockTime, v'bonusFactor, v'minLPMargin, v'maxLPLeverage, v'lpLiquidationFee, v'lpMaxRiskRate, v'orderBook);
}

((int, int, int, int, int, int, slice)) $ConfigData$_constructor_rbfLockTime_bonusFactor_minLPMargin_maxLPLeverage_lpLiquidationFee_lpMaxRiskRate_orderBook(int rbfLockTime, int bonusFactor, int minLPMargin, int maxLPLeverage, int lpLiquidationFee, int lpMaxRiskRate, slice orderBook) inline {
    return (rbfLockTime, bonusFactor, minLPMargin, maxLPLeverage, lpLiquidationFee, lpMaxRiskRate, orderBook);
}

;;
;; Type: TokenConfig
;; TLB: _ name:^string enable:bool minMarginPerPosition:int257 maxLeveragePerPosition:int257 liquidationFeeRatePerPosition:int257 liquidationExecutionFee:int257 interestRate:int257 maxFundingRate:int257 = TokenConfig
;;

(slice, ((slice, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref {
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'minMarginPerPosition = sc_0~load_int(257);
    var v'maxLeveragePerPosition = sc_0~load_int(257);
    var v'liquidationFeeRatePerPosition = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'liquidationExecutionFee = sc_1~load_int(257);
    var v'interestRate = sc_1~load_int(257);
    var v'maxFundingRate = sc_1~load_int(257);
    return (sc_0, (v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate));
}

tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_8(v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenConfig$_as_optional(sc~$TokenConfig$_load());
}

_ $TokenConfig$_get_enable((slice, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate) = v;
    return v'enable;
}

((slice, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'enable, int vvv'minMarginPerPosition, int vvv'maxLeveragePerPosition, int vvv'liquidationFeeRatePerPosition, int vvv'liquidationExecutionFee, int vvv'interestRate, int vvv'maxFundingRate) = __tact_tuple_destroy_8(v);
    return (vvv'name, vvv'enable, vvv'minMarginPerPosition, vvv'maxLeveragePerPosition, vvv'liquidationFeeRatePerPosition, vvv'liquidationExecutionFee, vvv'interestRate, vvv'maxFundingRate);
}

tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int)) v) inline {
    var (v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_8(v'name, v'enable, v'minMarginPerPosition, v'maxLeveragePerPosition, v'liquidationFeeRatePerPosition, v'liquidationExecutionFee, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $TokenConfig$_to_tuple($TokenConfig$_not_null(v)); 
}

tuple $TokenConfig$_to_opt_external(tuple v) inline {
    var loaded = $TokenConfig$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMarginPerPosition_maxLeveragePerPosition_liquidationFeeRatePerPosition_liquidationExecutionFee_interestRate_maxFundingRate(slice name, int enable, int minMarginPerPosition, int maxLeveragePerPosition, int liquidationFeeRatePerPosition, int liquidationExecutionFee, int interestRate, int maxFundingRate) inline {
    return (name, enable, minMarginPerPosition, maxLeveragePerPosition, liquidationFeeRatePerPosition, liquidationExecutionFee, interestRate, maxFundingRate);
}

;;
;; Type: RBFPosition
;; TLB: _ positionId:int257 liquidity:int257 bonus:int257 unlockTime:int257 = RBFPosition
;;

builder $RBFPosition$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'unlockTime) = v;
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = build_0.store_int(v'liquidity, 257);
    build_0 = build_0.store_int(v'bonus, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'unlockTime, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $RBFPosition$_store_cell((int, int, int, int) v) inline {
    return $RBFPosition$_store(begin_cell(), v).end_cell();
}

((int, int, int, int)) $RBFPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'positionId, int vvv'liquidity, int vvv'bonus, int vvv'unlockTime) = __tact_tuple_destroy_4(v);
    return (vvv'positionId, vvv'liquidity, vvv'bonus, vvv'unlockTime);
}

cell $RBFPosition$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $RBFPosition$_store_cell($RBFPosition$_not_null(v));
}

(slice, ((int, int, int, int))) $RBFPosition$_load(slice sc_0) inline {
    var v'positionId = sc_0~load_int(257);
    var v'liquidity = sc_0~load_int(257);
    var v'bonus = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'unlockTime = sc_1~load_int(257);
    return (sc_0, (v'positionId, v'liquidity, v'bonus, v'unlockTime));
}

tuple $RBFPosition$_as_optional((int, int, int, int) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'unlockTime) = v;
    return __tact_tuple_create_4(v'positionId, v'liquidity, v'bonus, v'unlockTime);
}

tuple $RBFPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $RBFPosition$_as_optional(sc~$RBFPosition$_load());
}

tuple $RBFPosition$_to_tuple(((int, int, int, int)) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'unlockTime) = v;
    return __tact_tuple_create_4(v'positionId, v'liquidity, v'bonus, v'unlockTime);
}

tuple $RBFPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $RBFPosition$_to_tuple($RBFPosition$_not_null(v)); 
}

tuple $RBFPosition$_to_opt_external(tuple v) inline {
    var loaded = $RBFPosition$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int, int)) $RBFPosition$_constructor_positionId_liquidity_bonus_unlockTime(int positionId, int liquidity, int bonus, int unlockTime) inline {
    return (positionId, liquidity, bonus, unlockTime);
}

;;
;; Type: GlobalRBFPosition
;; TLB: _ riskBufferFund:int257 liquidity:int257 = GlobalRBFPosition
;;

builder $GlobalRBFPosition$_store(builder build_0, (int, int) v) inline {
    var (v'riskBufferFund, v'liquidity) = v;
    build_0 = build_0.store_int(v'riskBufferFund, 257);
    build_0 = build_0.store_int(v'liquidity, 257);
    return build_0;
}

(slice, ((int, int))) $GlobalRBFPosition$_load(slice sc_0) inline {
    var v'riskBufferFund = sc_0~load_int(257);
    var v'liquidity = sc_0~load_int(257);
    return (sc_0, (v'riskBufferFund, v'liquidity));
}

((int, int)) $GlobalRBFPosition$_constructor_riskBufferFund_liquidity(int riskBufferFund, int liquidity) inline {
    return (riskBufferFund, liquidity);
}

;;
;; Type: GlobalLPPosition
;; TLB: _ netSize:int257 isLong:bool entryPrice:int257 = GlobalLPPosition
;;

(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline {
    var v'netSize = sc_0~load_int(257);
    var v'isLong = sc_0~load_int(1);
    var v'entryPrice = sc_0~load_int(257);
    return (sc_0, (v'netSize, v'isLong, v'entryPrice));
}

tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalLPPosition$_as_optional(sc~$GlobalLPPosition$_load());
}

((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'netSize, int vvv'isLong, int vvv'entryPrice) = __tact_tuple_destroy_3(v);
    return (vvv'netSize, vvv'isLong, vvv'entryPrice);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIndexNext, v'rbfLockTime, v'bonusFactor, v'minLPMargin, v'maxLPLeverage, v'lpLiquidationFee, v'lpMaxRiskRate, v'owner, v'orderBook, (v'globalRBFPosition'riskBufferFund, v'globalRBFPosition'liquidity), v'rbfPositions, v'rbfPositionIndexNext, v'globalLiquidity, v'globalLPPositions, v'lpPositions, v'lpPositionIndexNext, v'lpTradingFeeGrowth, v'lpFundingFeeGrowth, v'perpPositions, v'perpPositionIndexNext, v'priceStates, v'globalRiskBufferFunds, v'globalPositions, v'globalFundingRateSamples, v'globalLiquidityPositions, v'previousGlobalFundingRates) = v;
    build_0 = build_0.store_int(v'gasConsumption, 257);
    build_0 = build_0.store_int(v'minTonsForStorage, 257);
    build_0 = build_0.store_dict(v'tokenConfigs);
    build_0 = build_0.store_int(v'tokenIndexNext, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'rbfLockTime, 257);
    build_1 = build_1.store_int(v'bonusFactor, 257);
    build_1 = build_1.store_int(v'minLPMargin, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'maxLPLeverage, 257);
    build_2 = build_2.store_int(v'lpLiquidationFee, 257);
    build_2 = build_2.store_int(v'lpMaxRiskRate, 257);
    var build_3 = begin_cell();
    build_3 = __tact_store_address(build_3, v'owner);
    build_3 = __tact_store_address(build_3, v'orderBook);
    var build_4 = begin_cell();
    build_4 = $GlobalRBFPosition$_store(build_4, (v'globalRBFPosition'riskBufferFund, v'globalRBFPosition'liquidity));
    build_4 = build_4.store_dict(v'rbfPositions);
    build_4 = build_4.store_uint(v'rbfPositionIndexNext, 64);
    build_4 = build_4.store_int(v'globalLiquidity, 257);
    build_4 = build_4.store_dict(v'globalLPPositions);
    build_4 = build_4.store_dict(v'lpPositions);
    build_4 = build_4.store_uint(v'lpPositionIndexNext, 64);
    var build_5 = begin_cell();
    build_5 = build_5.store_int(v'lpTradingFeeGrowth, 257);
    build_5 = build_5.store_int(v'lpFundingFeeGrowth, 257);
    build_5 = build_5.store_dict(v'perpPositions);
    build_5 = build_5.store_uint(v'perpPositionIndexNext, 64);
    build_5 = build_5.store_dict(v'priceStates);
    build_5 = build_5.store_dict(v'globalRiskBufferFunds);
    var build_6 = begin_cell();
    build_6 = build_6.store_dict(v'globalPositions);
    build_6 = build_6.store_dict(v'globalFundingRateSamples);
    build_6 = build_6.store_dict(v'globalLiquidityPositions);
    var build_7 = begin_cell();
    build_7 = build_7.store_dict(v'previousGlobalFundingRates);
    build_6 = store_ref(build_6, build_7.end_cell());
    build_5 = store_ref(build_5, build_6.end_cell());
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell))) $Pool$_load(slice sc_0) inline {
    var v'gasConsumption = sc_0~load_int(257);
    var v'minTonsForStorage = sc_0~load_int(257);
    var v'tokenConfigs = sc_0~load_dict();
    var v'tokenIndexNext = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'rbfLockTime = sc_1~load_int(257);
    var v'bonusFactor = sc_1~load_int(257);
    var v'minLPMargin = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'maxLPLeverage = sc_2~load_int(257);
    var v'lpLiquidationFee = sc_2~load_int(257);
    var v'lpMaxRiskRate = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'owner = sc_3~__tact_load_address();
    var v'orderBook = sc_3~__tact_load_address();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'globalRBFPosition = sc_4~$GlobalRBFPosition$_load();
    var v'rbfPositions = sc_4~load_dict();
    var v'rbfPositionIndexNext = sc_4~load_uint(64);
    var v'globalLiquidity = sc_4~load_int(257);
    var v'globalLPPositions = sc_4~load_dict();
    var v'lpPositions = sc_4~load_dict();
    var v'lpPositionIndexNext = sc_4~load_uint(64);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'lpTradingFeeGrowth = sc_5~load_int(257);
    var v'lpFundingFeeGrowth = sc_5~load_int(257);
    var v'perpPositions = sc_5~load_dict();
    var v'perpPositionIndexNext = sc_5~load_uint(64);
    var v'priceStates = sc_5~load_dict();
    var v'globalRiskBufferFunds = sc_5~load_dict();
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'globalPositions = sc_6~load_dict();
    var v'globalFundingRateSamples = sc_6~load_dict();
    var v'globalLiquidityPositions = sc_6~load_dict();
    slice sc_7 = sc_6~load_ref().begin_parse();
    var v'previousGlobalFundingRates = sc_7~load_dict();
    return (sc_0, (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIndexNext, v'rbfLockTime, v'bonusFactor, v'minLPMargin, v'maxLPLeverage, v'lpLiquidationFee, v'lpMaxRiskRate, v'owner, v'orderBook, v'globalRBFPosition, v'rbfPositions, v'rbfPositionIndexNext, v'globalLiquidity, v'globalLPPositions, v'lpPositions, v'lpPositionIndexNext, v'lpTradingFeeGrowth, v'lpFundingFeeGrowth, v'perpPositions, v'perpPositionIndexNext, v'priceStates, v'globalRiskBufferFunds, v'globalPositions, v'globalFundingRateSamples, v'globalLiquidityPositions, v'previousGlobalFundingRates));
}

(int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Pool$_contract_init();
    }
}

() $Pool$_contract_store((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}