;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: JettonMint
;; Header: 0x89b71d09
;; TLB: jetton_mint#89b71d09 origin:address receiver:address amount:int257 custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonMint
;;

builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref {
    var (v'origin, v'receiver, v'amount, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 2310479113, 32);
    build_0 = __tact_store_address(build_0, v'origin);
    build_0 = __tact_store_address(build_0, v'receiver);
    build_0 = build_0.store_int(v'amount, 257);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline {
    return $JettonMint$_store(begin_cell(), v).end_cell();
}

((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice origin, slice receiver, int amount, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (origin, receiver, amount, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: UpdateConfig
;; Header: 0x3a5a5395
;; TLB: update_config#3a5a5395 tlpJetton:address orderBook:address claimExecutor:address lpGasConsumption:coins perpGasConsumption:coins minTonsForStorage:coins gasForMintTlp:coins maxLpNetCap:coins lpRolloverFeeRate:uint32 = UpdateConfig
;;

(slice, ((slice, slice, slice, int, int, int, int, int, int))) $UpdateConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 978998165);
    var v'tlpJetton = sc_0~__tact_load_address();
    var v'orderBook = sc_0~__tact_load_address();
    var v'claimExecutor = sc_0~__tact_load_address();
    var v'lpGasConsumption = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'perpGasConsumption = sc_1~load_coins();
    var v'minTonsForStorage = sc_1~load_coins();
    var v'gasForMintTlp = sc_1~load_coins();
    var v'maxLpNetCap = sc_1~load_coins();
    var v'lpRolloverFeeRate = sc_1~load_uint(32);
    return (sc_0, (v'tlpJetton, v'orderBook, v'claimExecutor, v'lpGasConsumption, v'perpGasConsumption, v'minTonsForStorage, v'gasForMintTlp, v'maxLpNetCap, v'lpRolloverFeeRate));
}

;;
;; Type: TokenConfig
;; TLB: _ name:^string enable:bool minValue:coins maxValue:coins maxLeverage:uint16 liquidationFee:coins maintenanceRate:uint32 tradingFeeRate:uint32 lpTradingFeeRate:uint32 = TokenConfig
;;

builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_int(v'enable, 1);
    build_0 = build_0.store_coins(v'minValue);
    build_0 = build_0.store_coins(v'maxValue);
    build_0 = build_0.store_uint(v'maxLeverage, 16);
    build_0 = build_0.store_coins(v'liquidationFee);
    build_0 = build_0.store_uint(v'maintenanceRate, 32);
    build_0 = build_0.store_uint(v'tradingFeeRate, 32);
    build_0 = build_0.store_uint(v'lpTradingFeeRate, 32);
    return build_0;
}

cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int, int, int) v) inline {
    return $TokenConfig$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref {
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'minValue = sc_0~load_coins();
    var v'maxValue = sc_0~load_coins();
    var v'maxLeverage = sc_0~load_uint(16);
    var v'liquidationFee = sc_0~load_coins();
    var v'maintenanceRate = sc_0~load_uint(32);
    var v'tradingFeeRate = sc_0~load_uint(32);
    var v'lpTradingFeeRate = sc_0~load_uint(32);
    return (sc_0, (v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate));
}

tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    return __tact_tuple_create_9(v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate);
}

tuple $TokenConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenConfig$_as_optional(sc~$TokenConfig$_load());
}

((slice, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'enable, int vvv'minValue, int vvv'maxValue, int vvv'maxLeverage, int vvv'liquidationFee, int vvv'maintenanceRate, int vvv'tradingFeeRate, int vvv'lpTradingFeeRate) = __tact_tuple_destroy_9(v);
    return (vvv'name, vvv'enable, vvv'minValue, vvv'maxValue, vvv'maxLeverage, vvv'liquidationFee, vvv'maintenanceRate, vvv'tradingFeeRate, vvv'lpTradingFeeRate);
}

tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int)) v) inline {
    var (v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    return __tact_tuple_create_9(v'name, v'enable, v'minValue, v'maxValue, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate);
}

tuple $TokenConfig$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $TokenConfig$_to_tuple($TokenConfig$_not_null(v)); 
}

tuple $TokenConfig$_to_opt_external(tuple v) inline {
    var loaded = $TokenConfig$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: UpdateTokenConfig
;; Header: 0xe6424c82
;; TLB: update_token_config#e6424c82 tokenId:uint16 config:TokenConfig{name:^string,enable:bool,minValue:coins,maxValue:coins,maxLeverage:uint16,liquidationFee:coins,maintenanceRate:uint32,tradingFeeRate:uint32,lpTradingFeeRate:uint32} = UpdateTokenConfig
;;

(slice, ((int, (slice, int, int, int, int, int, int, int, int)))) $UpdateTokenConfig$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3863104642);
    var v'tokenId = sc_0~load_uint(16);
    var v'config = sc_0~$TokenConfig$_load();
    return (sc_0, (v'tokenId, v'config));
}

;;
;; Type: DelistToken
;; Header: 0x9b42e4ef
;; TLB: delist_token#9b42e4ef tokenId:uint16 = DelistToken
;;

(slice, ((int))) $DelistToken$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2604852463);
    var v'tokenId = sc_0~load_uint(16);
    return (sc_0, (v'tokenId));
}

;;
;; Type: ClaimProtocolFee
;; Header: 0xfeb2a766
;; TLB: claim_protocol_fee#feb2a766 trxId:uint64 feeReceiver:address = ClaimProtocolFee
;;

(slice, ((int, slice))) $ClaimProtocolFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4273121126);
    var v'trxId = sc_0~load_uint(64);
    var v'feeReceiver = sc_0~__tact_load_address();
    return (sc_0, (v'trxId, v'feeReceiver));
}

;;
;; Type: SendProtocolFee
;; Header: 0x5dd58461
;; TLB: send_protocol_fee#5dd58461 trxId:uint64 feeReceiver:address amount:coins = SendProtocolFee
;;

builder $SendProtocolFee$_store(builder build_0, (int, slice, int) v) inline {
    var (v'trxId, v'feeReceiver, v'amount) = v;
    build_0 = store_uint(build_0, 1574274145, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = __tact_store_address(build_0, v'feeReceiver);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $SendProtocolFee$_store_cell((int, slice, int) v) inline {
    return $SendProtocolFee$_store(begin_cell(), v).end_cell();
}

((int, slice, int)) $SendProtocolFee$_constructor_trxId_feeReceiver_amount(int trxId, slice feeReceiver, int amount) inline {
    return (trxId, feeReceiver, amount);
}

;;
;; Type: UpdateLiquidityPool
;; Header: 0x5523d11e
;; TLB: update_liquidity_pool#5523d11e isIncrease:bool orderId:uint64 account:address jettonDelta:coins trxId:uint64 prices:dict<uint16, uint128> lpFundingFeeGrowth:coins rolloverFeeGrowth:coins = UpdateLiquidityPool
;;

(slice, ((int, int, slice, int, int, cell, int, int))) $UpdateLiquidityPool$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1428410654);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    var v'account = sc_0~__tact_load_address();
    var v'jettonDelta = sc_0~load_coins();
    var v'trxId = sc_0~load_uint(64);
    var v'prices = sc_0~load_dict();
    var v'lpFundingFeeGrowth = sc_0~load_coins();
    var v'rolloverFeeGrowth = sc_0~load_coins();
    return (sc_0, (v'isIncrease, v'orderId, v'account, v'jettonDelta, v'trxId, v'prices, v'lpFundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: LiquidityPoolUpdated
;; Header: 0xcd6336bc
;; TLB: liquidity_pool_updated#cd6336bc isIncrease:bool orderId:uint64 tlpPrice:uint128 tlpDelta:coins jettonDelta:coins trxId:uint64 = LiquidityPoolUpdated
;;

builder $LiquidityPoolUpdated$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'isIncrease, v'orderId, v'tlpPrice, v'tlpDelta, v'jettonDelta, v'trxId) = v;
    build_0 = store_uint(build_0, 3445831356, 32);
    build_0 = build_0.store_int(v'isIncrease, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'tlpPrice, 128);
    build_0 = build_0.store_coins(v'tlpDelta);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityPoolUpdated$_store_cell((int, int, int, int, int, int) v) inline {
    return $LiquidityPoolUpdated$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int, int)) $LiquidityPoolUpdated$_constructor_isIncrease_orderId_tlpPrice_tlpDelta_jettonDelta_trxId(int isIncrease, int orderId, int tlpPrice, int tlpDelta, int jettonDelta, int trxId) inline {
    return (isIncrease, orderId, tlpPrice, tlpDelta, jettonDelta, trxId);
}

;;
;; Type: UpdatePerpPosition
;; Header: 0xff57e557
;; TLB: update_perp_position#ff57e557 orderId:uint64 opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool trxId:uint64 price:uint128 premiumRate:uint32 fundingFeeGrowth:int128 rolloverFeeGrowth:int128 = UpdatePerpPosition
;;

(slice, ((int, int, int, slice, int, int, int, int, int, int, int, int, int, int))) $UpdatePerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4283950423);
    var v'orderId = sc_0~load_uint(64);
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'triggerPrice = sc_0~load_uint(128);
    var v'triggerAbove = sc_0~load_int(1);
    var v'trxId = sc_0~load_uint(64);
    var v'price = sc_0~load_uint(128);
    var v'premiumRate = sc_0~load_uint(32);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'fundingFeeGrowth = sc_1~load_int(128);
    var v'rolloverFeeGrowth = sc_1~load_int(128);
    return (sc_0, (v'orderId, v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'trxId, v'price, v'premiumRate, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: PerpPositionUpdated
;; Header: 0xef01c2b4
;; TLB: perp_position_updated#ef01c2b4 orderId:uint64 payout:coins trxId:uint64 = PerpPositionUpdated
;;

builder $PerpPositionUpdated$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'payout, v'trxId) = v;
    build_0 = store_uint(build_0, 4009870004, 32);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_coins(v'payout);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $PerpPositionUpdated$_store_cell((int, int, int) v) inline {
    return $PerpPositionUpdated$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $PerpPositionUpdated$_constructor_orderId_payout_trxId(int orderId, int payout, int trxId) inline {
    return (orderId, payout, trxId);
}

;;
;; Type: LiquidityIncreasedEvent
;; Header: 0xb9b08d0d
;; TLB: liquidity_increased_event#b9b08d0d trxId:uint64 opType:uint8 account:address jettonDelta:coins tlpDelta:coins tlpPrice:uint128 tlpSupply:coins lpFundAfter:int128 entryLpFundingFeeGrowth:coins entryRolloverFeeGrowth:coins = LiquidityIncreasedEvent
;;

builder $LiquidityIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'opType, v'account, v'jettonDelta, v'tlpDelta, v'tlpPrice, v'tlpSupply, v'lpFundAfter, v'entryLpFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    build_0 = store_uint(build_0, 3115355405, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'tlpDelta);
    build_0 = build_0.store_uint(v'tlpPrice, 128);
    build_0 = build_0.store_coins(v'tlpSupply);
    build_0 = build_0.store_int(v'lpFundAfter, 128);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'entryLpFundingFeeGrowth);
    build_1 = build_1.store_coins(v'entryRolloverFeeGrowth);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LiquidityIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int) v) inline {
    return $LiquidityIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int)) $LiquidityIncreasedEvent$_constructor_trxId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int trxId, int opType, slice account, int jettonDelta, int tlpPrice, int tlpDelta, int tlpSupply, int lpFundAfter, int entryLpFundingFeeGrowth, int entryRolloverFeeGrowth) inline {
    return (trxId, opType, account, jettonDelta, tlpDelta, tlpPrice, tlpSupply, lpFundAfter, entryLpFundingFeeGrowth, entryRolloverFeeGrowth);
}

;;
;; Type: LiquidityDecreasedEvent
;; Header: 0xa15613d6
;; TLB: liquidity_decreased_event#a15613d6 trxId:uint64 opType:uint8 account:address jettonDelta:coins tlpDelta:coins tlpPrice:uint128 tlpSupply:coins lpFundAfter:int128 entryLpFundingFeeGrowth:coins entryRolloverFeeGrowth:coins = LiquidityDecreasedEvent
;;

builder $LiquidityDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'opType, v'account, v'jettonDelta, v'tlpDelta, v'tlpPrice, v'tlpSupply, v'lpFundAfter, v'entryLpFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    build_0 = store_uint(build_0, 2706772950, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'tlpDelta);
    build_0 = build_0.store_uint(v'tlpPrice, 128);
    build_0 = build_0.store_coins(v'tlpSupply);
    build_0 = build_0.store_int(v'lpFundAfter, 128);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'entryLpFundingFeeGrowth);
    build_1 = build_1.store_coins(v'entryRolloverFeeGrowth);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LiquidityDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int) v) inline {
    return $LiquidityDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int)) $LiquidityDecreasedEvent$_constructor_trxId_opType_account_tlpDelta_jettonDelta_tlpPrice_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int trxId, int opType, slice account, int tlpDelta, int jettonDelta, int tlpPrice, int tlpSupply, int lpFundAfter, int entryLpFundingFeeGrowth, int entryRolloverFeeGrowth) inline {
    return (trxId, opType, account, jettonDelta, tlpDelta, tlpPrice, tlpSupply, lpFundAfter, entryLpFundingFeeGrowth, entryRolloverFeeGrowth);
}

;;
;; Type: PerpPositionIncreasedEvent
;; Header: 0x2f2c10e5
;; TLB: perp_position_increased_event#2f2c10e5 trxId:uint64 orderId:uint64 opType:uint8 positionId:uint64 account:address tokenId:uint16 isLong:bool marginDelta:int128 marginAfter:coins sizeDelta:int128 sizeAfter:coins tradePrice:uint128 entryPrice:uint128 fundingFee:int128 rolloverFee:coins tradingFee:coins entryFundingFeeGrowthAfter:int128 entryRolloverFeeGrowthAfter:int128 globalLongMarginAfter:coins globalShortMarginAfter:coins globalLongSizeAfter:coins globalShortSizeAfter:coins lpNetSizeAfter:coins lpIsLong:bool lpEntryPriceAfter:uint128 lpFundAfter:int128 lpTradingFee:coins lpRealizedPnl:int128 = PerpPositionIncreasedEvent
;;

builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'orderId, v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'fundingFee, v'rolloverFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'entryRolloverFeeGrowthAfter, v'globalLongMarginAfter, v'globalShortMarginAfter, v'globalLongSizeAfter, v'globalShortSizeAfter, v'lpNetSizeAfter, v'lpIsLong, v'lpEntryPriceAfter, v'lpFundAfter, v'lpTradingFee, v'lpRealizedPnl) = v;
    build_0 = store_uint(build_0, 791417061, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 128);
    build_0 = build_0.store_coins(v'marginAfter);
    build_0 = build_0.store_int(v'sizeDelta, 128);
    build_0 = build_0.store_coins(v'sizeAfter);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'tradePrice, 128);
    build_1 = build_1.store_uint(v'entryPrice, 128);
    build_1 = build_1.store_int(v'fundingFee, 128);
    build_1 = build_1.store_coins(v'rolloverFee);
    build_1 = build_1.store_coins(v'tradingFee);
    build_1 = build_1.store_int(v'entryFundingFeeGrowthAfter, 128);
    build_1 = build_1.store_int(v'entryRolloverFeeGrowthAfter, 128);
    build_1 = build_1.store_coins(v'globalLongMarginAfter);
    var build_2 = begin_cell();
    build_2 = build_2.store_coins(v'globalShortMarginAfter);
    build_2 = build_2.store_coins(v'globalLongSizeAfter);
    build_2 = build_2.store_coins(v'globalShortSizeAfter);
    build_2 = build_2.store_coins(v'lpNetSizeAfter);
    build_2 = build_2.store_int(v'lpIsLong, 1);
    build_2 = build_2.store_uint(v'lpEntryPriceAfter, 128);
    build_2 = build_2.store_int(v'lpFundAfter, 128);
    build_2 = build_2.store_coins(v'lpTradingFee);
    build_2 = build_2.store_int(v'lpRealizedPnl, 128);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionIncreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int trxId, int orderId, int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int rolloverFee, int entryFundingFeeGrowthAfter, int entryRolloverFeeGrowthAfter, int globalLongMarginAfter, int globalShortMarginAfter, int globalLongSizeAfter, int globalShortSizeAfter, int lpNetSizeAfter, int lpIsLong, int lpEntryPriceAfter, int lpFundAfter, int lpTradingFee, int lpRealizedPnl) inline {
    return (trxId, orderId, opType, positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, entryPrice, fundingFee, rolloverFee, tradingFee, entryFundingFeeGrowthAfter, entryRolloverFeeGrowthAfter, globalLongMarginAfter, globalShortMarginAfter, globalLongSizeAfter, globalShortSizeAfter, lpNetSizeAfter, lpIsLong, lpEntryPriceAfter, lpFundAfter, lpTradingFee, lpRealizedPnl);
}

;;
;; Type: PerpPositionDecreasedEvent
;; Header: 0xfd8c49cb
;; TLB: perp_position_decreased_event#fd8c49cb trxId:uint64 orderId:uint64 opType:uint8 positionId:uint64 account:address tokenId:uint16 isLong:bool marginDelta:int128 marginAfter:coins sizeDelta:int128 sizeAfter:coins tradePrice:uint128 entryPrice:uint128 realizedPnLDelta:int128 fundingFee:int128 rolloverFee:coins tradingFee:coins entryFundingFeeGrowthAfter:int128 entryRolloverFeeGrowthAfter:int128 payout:coins globalLongMarginAfter:coins globalShortMarginAfter:coins globalLongSizeAfter:coins globalShortSizeAfter:coins lpNetSizeAfter:coins lpIsLong:bool lpEntryPriceAfter:uint128 lpFundAfter:int128 lpTradingFee:coins lpRealizedPnl:int128 = PerpPositionDecreasedEvent
;;

builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'orderId, v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'realizedPnLDelta, v'fundingFee, v'rolloverFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'entryRolloverFeeGrowthAfter, v'payout, v'globalLongMarginAfter, v'globalShortMarginAfter, v'globalLongSizeAfter, v'globalShortSizeAfter, v'lpNetSizeAfter, v'lpIsLong, v'lpEntryPriceAfter, v'lpFundAfter, v'lpTradingFee, v'lpRealizedPnl) = v;
    build_0 = store_uint(build_0, 4253829579, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 128);
    build_0 = build_0.store_coins(v'marginAfter);
    build_0 = build_0.store_int(v'sizeDelta, 128);
    build_0 = build_0.store_coins(v'sizeAfter);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'tradePrice, 128);
    build_1 = build_1.store_uint(v'entryPrice, 128);
    build_1 = build_1.store_int(v'realizedPnLDelta, 128);
    build_1 = build_1.store_int(v'fundingFee, 128);
    build_1 = build_1.store_coins(v'rolloverFee);
    build_1 = build_1.store_coins(v'tradingFee);
    build_1 = build_1.store_int(v'entryFundingFeeGrowthAfter, 128);
    build_1 = build_1.store_int(v'entryRolloverFeeGrowthAfter, 128);
    var build_2 = begin_cell();
    build_2 = build_2.store_coins(v'payout);
    build_2 = build_2.store_coins(v'globalLongMarginAfter);
    build_2 = build_2.store_coins(v'globalShortMarginAfter);
    build_2 = build_2.store_coins(v'globalLongSizeAfter);
    build_2 = build_2.store_coins(v'globalShortSizeAfter);
    build_2 = build_2.store_coins(v'lpNetSizeAfter);
    build_2 = build_2.store_int(v'lpIsLong, 1);
    build_2 = build_2.store_uint(v'lpEntryPriceAfter, 128);
    build_2 = build_2.store_int(v'lpFundAfter, 128);
    var build_3 = begin_cell();
    build_3 = build_3.store_coins(v'lpTradingFee);
    build_3 = build_3.store_int(v'lpRealizedPnl, 128);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionDecreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int trxId, int orderId, int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int realizedPnLDelta, int tradingFee, int fundingFee, int rolloverFee, int payout, int entryFundingFeeGrowthAfter, int entryRolloverFeeGrowthAfter, int globalLongMarginAfter, int globalShortMarginAfter, int globalLongSizeAfter, int globalShortSizeAfter, int lpNetSizeAfter, int lpIsLong, int lpEntryPriceAfter, int lpFundAfter, int lpTradingFee, int lpRealizedPnl) inline {
    return (trxId, orderId, opType, positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, entryPrice, realizedPnLDelta, fundingFee, rolloverFee, tradingFee, entryFundingFeeGrowthAfter, entryRolloverFeeGrowthAfter, payout, globalLongMarginAfter, globalShortMarginAfter, globalLongSizeAfter, globalShortSizeAfter, lpNetSizeAfter, lpIsLong, lpEntryPriceAfter, lpFundAfter, lpTradingFee, lpRealizedPnl);
}

;;
;; Type: ConfigData
;; TLB: _ lpGasConsumption:coins perpGasConsumption:coins minTonsForStorage:coins gasForMintTlp:coins maxLpNetCap:coins tlpJetton:address orderBook:address claimExecutor:address = ConfigData
;;

(int, int, int, int, int, slice, slice, slice) $ConfigData$_to_external(((int, int, int, int, int, slice, slice, slice)) v) inline {
    var (v'lpGasConsumption, v'perpGasConsumption, v'minTonsForStorage, v'gasForMintTlp, v'maxLpNetCap, v'tlpJetton, v'orderBook, v'claimExecutor) = v; 
    return (v'lpGasConsumption, v'perpGasConsumption, v'minTonsForStorage, v'gasForMintTlp, v'maxLpNetCap, v'tlpJetton, v'orderBook, v'claimExecutor);
}

((int, int, int, int, int, slice, slice, slice)) $ConfigData$_constructor_lpGasConsumption_perpGasConsumption_minTonsForStorage_gasForMintTlp_maxLpNetCap_tlpJetton_orderBook_claimExecutor(int lpGasConsumption, int perpGasConsumption, int minTonsForStorage, int gasForMintTlp, int maxLpNetCap, slice tlpJetton, slice orderBook, slice claimExecutor) inline {
    return (lpGasConsumption, perpGasConsumption, minTonsForStorage, gasForMintTlp, maxLpNetCap, tlpJetton, orderBook, claimExecutor);
}

;;
;; Type: GlobalPoolData
;; TLB: _ tlpSupply:coins protocolTradingFee:coins globalLPFund:int128 globalLPUnrealizedPnl:int128 globalLpFundingFeeGrowth:coins globalRolloverFeeGrowth:coins globalPerpNetValue:coins globalPerpSingleValue:coins = GlobalPoolData
;;

(int, int, int, int, int, int, int, int) $GlobalPoolData$_to_external(((int, int, int, int, int, int, int, int)) v) inline {
    var (v'tlpSupply, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'globalPerpNetValue, v'globalPerpSingleValue) = v; 
    return (v'tlpSupply, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'globalPerpNetValue, v'globalPerpSingleValue);
}

((int, int, int, int, int, int, int, int)) $GlobalPoolData$_constructor_tlpSupply_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth_globalPerpNetValue_globalPerpSingleValue(int tlpSupply, int protocolTradingFee, int globalLPFund, int globalLPUnrealizedPnl, int globalLpFundingFeeGrowth, int globalRolloverFeeGrowth, int globalPerpNetValue, int globalPerpSingleValue) inline {
    return (tlpSupply, protocolTradingFee, globalLPFund, globalLPUnrealizedPnl, globalLpFundingFeeGrowth, globalRolloverFeeGrowth, globalPerpNetValue, globalPerpSingleValue);
}

;;
;; Type: AccountPerpPosition
;; TLB: _ positions:dict<address, ^DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128},shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128}}> = AccountPerpPosition
;;

builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline {
    var (v'positions) = v;
    build_0 = build_0.store_dict(v'positions);
    return build_0;
}

cell $AccountPerpPosition$_store_cell((cell) v) inline {
    return $AccountPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline {
    var v'positions = sc_0~load_dict();
    return (sc_0, (v'positions));
}

tuple $AccountPerpPosition$_as_optional((cell) v) inline {
    var (v'positions) = v;
    return __tact_tuple_create_1(v'positions);
}

tuple $AccountPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $AccountPerpPosition$_as_optional(sc~$AccountPerpPosition$_load());
}

_ $AccountPerpPosition$_get_positions((cell) v) inline {
    var (v'positions) = v;
    return v'positions;
}

((cell)) $AccountPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'positions) = __tact_tuple_destroy_1(v);
    return (vvv'positions);
}

((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline {
    return (positions);
}

;;
;; Type: PerpPosition
;; TLB: _ positionId:uint64 margin:coins size:coins entryPrice:uint128 entryFundingFeeGrowth:int128 entryRolloverFeeGrowth:int128 = PerpPosition
;;

builder $PerpPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = build_0.store_coins(v'margin);
    build_0 = build_0.store_coins(v'size);
    build_0 = build_0.store_uint(v'entryPrice, 128);
    build_0 = build_0.store_int(v'entryFundingFeeGrowth, 128);
    build_0 = build_0.store_int(v'entryRolloverFeeGrowth, 128);
    return build_0;
}

(slice, ((int, int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline_ref {
    var v'positionId = sc_0~load_uint(64);
    var v'margin = sc_0~load_coins();
    var v'size = sc_0~load_coins();
    var v'entryPrice = sc_0~load_uint(128);
    var v'entryFundingFeeGrowth = sc_0~load_int(128);
    var v'entryRolloverFeeGrowth = sc_0~load_int(128);
    return (sc_0, (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth));
}

tuple $PerpPosition$_to_tuple(((int, int, int, int, int, int)) v) inline {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    return __tact_tuple_create_6(v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth);
}

((int, int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth, int entryRolloverFeeGrowth) inline {
    return (positionId, margin, size, entryPrice, entryFundingFeeGrowth, entryRolloverFeeGrowth);
}

;;
;; Type: DirectionPerpPosition
;; TLB: _ longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128} shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128} = DirectionPerpPosition
;;

builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth)) = v;
    build_0 = $PerpPosition$_store(build_0, (v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth));
    var build_1 = begin_cell();
    build_1 = $PerpPosition$_store(build_1, (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    return $DirectionPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, (((int, int, int, int, int, int), (int, int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline {
    var v'longPosition = sc_0~$PerpPosition$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shortPosition = sc_1~$PerpPosition$_load();
    return (sc_0, (v'longPosition, v'shortPosition));
}

tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth)) = v;
    return __tact_tuple_create_12(v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth, v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth);
}

tuple $DirectionPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $DirectionPerpPosition$_as_optional(sc~$DirectionPerpPosition$_load());
}

(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longPosition'positionId, int vvv'longPosition'margin, int vvv'longPosition'size, int vvv'longPosition'entryPrice, int vvv'longPosition'entryFundingFeeGrowth, int vvv'longPosition'entryRolloverFeeGrowth, int vvv'shortPosition'positionId, int vvv'shortPosition'margin, int vvv'shortPosition'size, int vvv'shortPosition'entryPrice, int vvv'shortPosition'entryFundingFeeGrowth, int vvv'shortPosition'entryRolloverFeeGrowth) = __tact_tuple_destroy_12(v);
    return ((vvv'longPosition'positionId, vvv'longPosition'margin, vvv'longPosition'size, vvv'longPosition'entryPrice, vvv'longPosition'entryFundingFeeGrowth, vvv'longPosition'entryRolloverFeeGrowth), (vvv'shortPosition'positionId, vvv'shortPosition'margin, vvv'shortPosition'size, vvv'shortPosition'entryPrice, vvv'shortPosition'entryFundingFeeGrowth, vvv'shortPosition'entryRolloverFeeGrowth));
}

tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int, int), (int, int, int, int, int, int))) v) inline {
    var (v'longPosition, v'shortPosition) = v;
    return __tact_tuple_create_2($PerpPosition$_to_tuple(v'longPosition), $PerpPosition$_to_tuple(v'shortPosition));
}

tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $DirectionPerpPosition$_to_tuple($DirectionPerpPosition$_not_null(v)); 
}

(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int, int) longPosition, (int, int, int, int, int, int) shortPosition) inline {
    return (longPosition, shortPosition);
}

;;
;; Type: GlobalLPPosition
;; TLB: _ netSize:coins isLong:bool entryPrice:uint128 = GlobalLPPosition
;;

builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    build_0 = build_0.store_coins(v'netSize);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_uint(v'entryPrice, 128);
    return build_0;
}

cell $GlobalLPPosition$_store_cell((int, int, int) v) inline {
    return $GlobalLPPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline {
    var v'netSize = sc_0~load_coins();
    var v'isLong = sc_0~load_int(1);
    var v'entryPrice = sc_0~load_uint(128);
    return (sc_0, (v'netSize, v'isLong, v'entryPrice));
}

tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalLPPosition$_as_optional(sc~$GlobalLPPosition$_load());
}

((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'netSize, int vvv'isLong, int vvv'entryPrice) = __tact_tuple_destroy_3(v);
    return (vvv'netSize, vvv'isLong, vvv'entryPrice);
}

tuple $GlobalLPPosition$_to_tuple(((int, int, int)) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalLPPosition$_to_tuple($GlobalLPPosition$_not_null(v)); 
}

((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int netSize, int isLong, int entryPrice) inline {
    return (netSize, isLong, entryPrice);
}

;;
;; Type: GlobalPosition
;; TLB: _ longMargin:coins shortMargin:coins longSize:coins shortSize:coins longValue:coins shortValue:coins = GlobalPosition
;;

builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    build_0 = build_0.store_coins(v'longMargin);
    build_0 = build_0.store_coins(v'shortMargin);
    build_0 = build_0.store_coins(v'longSize);
    build_0 = build_0.store_coins(v'shortSize);
    build_0 = build_0.store_coins(v'longValue);
    build_0 = build_0.store_coins(v'shortValue);
    return build_0;
}

cell $GlobalPosition$_store_cell((int, int, int, int, int, int) v) inline {
    return $GlobalPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref {
    var v'longMargin = sc_0~load_coins();
    var v'shortMargin = sc_0~load_coins();
    var v'longSize = sc_0~load_coins();
    var v'shortSize = sc_0~load_coins();
    var v'longValue = sc_0~load_coins();
    var v'shortValue = sc_0~load_coins();
    return (sc_0, (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue));
}

tuple $GlobalPosition$_as_optional((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return __tact_tuple_create_6(v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue);
}

tuple $GlobalPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalPosition$_as_optional(sc~$GlobalPosition$_load());
}

tuple $GlobalPosition$_to_tuple(((int, int, int, int, int, int)) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return __tact_tuple_create_6(v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue);
}

((int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longMargin, int vvv'shortMargin, int vvv'longSize, int vvv'shortSize, int vvv'longValue, int vvv'shortValue) = __tact_tuple_destroy_6(v);
    return (vvv'longMargin, vvv'shortMargin, vvv'longSize, vvv'shortSize, vvv'longValue, vvv'shortValue);
}

tuple $GlobalPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalPosition$_to_tuple($GlobalPosition$_not_null(v)); 
}

_ $GlobalPosition$_get_longSize((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return v'longSize;
}

_ $GlobalPosition$_get_shortSize((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return v'shortSize;
}

((int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(int longMargin, int shortMargin, int longSize, int shortSize, int longValue, int shortValue) inline {
    return (longMargin, shortMargin, longSize, shortSize, longValue, shortValue);
}

;;
;; Type: PerpPositionData
;; TLB: _ globalPerpNetValue:coins globalPerpSingleValue:coins perpPosition:Maybe DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128},shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128}} globalLPPosition:Maybe GlobalLPPosition{netSize:coins,isLong:bool,entryPrice:uint128} globalPosition:Maybe GlobalPosition{longMargin:coins,shortMargin:coins,longSize:coins,shortSize:coins,longValue:coins,shortValue:coins} = PerpPositionData
;;

(int, int, tuple, tuple, tuple) $PerpPositionData$_to_external(((int, int, tuple, tuple, tuple)) v) inline {
    var (v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPosition, v'globalLPPosition, v'globalPosition) = v; 
    return (v'globalPerpNetValue, v'globalPerpSingleValue, $DirectionPerpPosition$_to_opt_tuple(v'perpPosition), $GlobalLPPosition$_to_opt_tuple(v'globalLPPosition), $GlobalPosition$_to_opt_tuple(v'globalPosition));
}

((int, int, tuple, tuple, tuple)) $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition(int globalPerpNetValue, int globalPerpSingleValue, tuple perpPosition, tuple globalLPPosition, tuple globalPosition) inline {
    return (globalPerpNetValue, globalPerpSingleValue, perpPosition, globalLPPosition, globalPosition);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) v) inline {
    var (v'owner, v'orderBook, v'claimExecutor, v'lpGasConsumption, v'perpGasConsumption, v'minTonsForStorage, v'gasForMintTlp, v'maxLpNetCap, v'lpRolloverFeeRate, v'tokenConfigs, v'tlpJetton, v'tlpSupply, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPositionIndexNext, v'perpPositions, v'globalLPPositions, v'globalPositions, v'prices) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'orderBook);
    build_0 = __tact_store_address(build_0, v'claimExecutor);
    build_0 = build_0.store_coins(v'lpGasConsumption);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'perpGasConsumption);
    build_1 = build_1.store_coins(v'minTonsForStorage);
    build_1 = build_1.store_coins(v'gasForMintTlp);
    build_1 = build_1.store_coins(v'maxLpNetCap);
    build_1 = build_1.store_uint(v'lpRolloverFeeRate, 32);
    build_1 = build_1.store_dict(v'tokenConfigs);
    build_1 = __tact_store_address(build_1, v'tlpJetton);
    build_1 = build_1.store_coins(v'tlpSupply);
    var build_2 = begin_cell();
    build_2 = build_2.store_coins(v'protocolTradingFee);
    build_2 = build_2.store_int(v'globalLPFund, 128);
    build_2 = build_2.store_int(v'globalLPUnrealizedPnl, 128);
    build_2 = build_2.store_coins(v'globalLpFundingFeeGrowth);
    build_2 = build_2.store_coins(v'globalRolloverFeeGrowth);
    build_2 = build_2.store_coins(v'globalPerpNetValue);
    build_2 = build_2.store_coins(v'globalPerpSingleValue);
    build_2 = build_2.store_uint(v'perpPositionIndexNext, 64);
    build_2 = build_2.store_dict(v'perpPositions);
    build_2 = build_2.store_dict(v'globalLPPositions);
    build_2 = build_2.store_dict(v'globalPositions);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'prices);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell))) $Pool$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'orderBook = sc_0~__tact_load_address();
    var v'claimExecutor = sc_0~__tact_load_address();
    var v'lpGasConsumption = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'perpGasConsumption = sc_1~load_coins();
    var v'minTonsForStorage = sc_1~load_coins();
    var v'gasForMintTlp = sc_1~load_coins();
    var v'maxLpNetCap = sc_1~load_coins();
    var v'lpRolloverFeeRate = sc_1~load_uint(32);
    var v'tokenConfigs = sc_1~load_dict();
    var v'tlpJetton = sc_1~__tact_load_address();
    var v'tlpSupply = sc_1~load_coins();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'protocolTradingFee = sc_2~load_coins();
    var v'globalLPFund = sc_2~load_int(128);
    var v'globalLPUnrealizedPnl = sc_2~load_int(128);
    var v'globalLpFundingFeeGrowth = sc_2~load_coins();
    var v'globalRolloverFeeGrowth = sc_2~load_coins();
    var v'globalPerpNetValue = sc_2~load_coins();
    var v'globalPerpSingleValue = sc_2~load_coins();
    var v'perpPositionIndexNext = sc_2~load_uint(64);
    var v'perpPositions = sc_2~load_dict();
    var v'globalLPPositions = sc_2~load_dict();
    var v'globalPositions = sc_2~load_dict();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'prices = sc_3~load_dict();
    return (sc_0, (v'owner, v'orderBook, v'claimExecutor, v'lpGasConsumption, v'perpGasConsumption, v'minTonsForStorage, v'gasForMintTlp, v'maxLpNetCap, v'lpRolloverFeeRate, v'tokenConfigs, v'tlpJetton, v'tlpSupply, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPositionIndexNext, v'perpPositions, v'globalLPPositions, v'globalPositions, v'prices));
}

(slice, ((int))) $Pool$init$_load(slice sc_0) inline {
    var v'deployId = sc_0~load_int(257);
    return (sc_0, (v'deployId));
}

(slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int deployId) = $sc~$Pool$init$_load();
        $sc.end_parse();
        return $Pool$_contract_init(deployId);
    }
}

() $Pool$_contract_store((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}