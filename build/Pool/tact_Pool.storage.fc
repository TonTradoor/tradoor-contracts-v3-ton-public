;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: UpdateConfig
;; Header: 0x91a2e10a
;; TLB: update_config#91a2e10a gasConsumption:int257 minTonsForStorage:int257 lpLockTime:int257 bonusFactor:int257 orderBook:address = UpdateConfig
;;

(slice, ((int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2443370762);
    var v'gasConsumption = sc_0~load_int(257);
    var v'minTonsForStorage = sc_0~load_int(257);
    var v'lpLockTime = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'bonusFactor = sc_1~load_int(257);
    var v'orderBook = sc_1~__tact_load_address();
    return (sc_0, (v'gasConsumption, v'minTonsForStorage, v'lpLockTime, v'bonusFactor, v'orderBook));
}

;;
;; Type: UpdateTokenConfig
;; Header: 0x92eaeafd
;; TLB: update_token_config#92eaeafd tokenId:int257 name:^string enable:bool minMargin:int257 maxLeverage:int257 liquidationFee:int257 tradingFeeRate:int257 lpTradingFeeRate:int257 interestRate:int257 maxFundingRate:int257 = UpdateTokenConfig
;;

(slice, ((int, slice, int, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2464869117);
    var v'tokenId = sc_0~load_int(257);
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'minMargin = sc_0~load_int(257);
    var v'maxLeverage = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'liquidationFee = sc_1~load_int(257);
    var v'tradingFeeRate = sc_1~load_int(257);
    var v'lpTradingFeeRate = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'interestRate = sc_2~load_int(257);
    var v'maxFundingRate = sc_2~load_int(257);
    return (sc_0, (v'tokenId, v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate));
}

;;
;; Type: UpdateLPPosition
;; Header: 0xe89cd45f
;; TLB: update_lp_position#e89cd45f isIncrease:bool orderId:uint64 account:address liquidityDelta:int257 trxId:uint64 pricesLength:int257 prices:dict<int, ^UpdatePrice{tokenId:int257,price:int257}> = UpdateLPPosition
;;

(slice, ((int, int, slice, int, int, int, cell))) $UpdateLPPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3902592095);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    var v'account = sc_0~__tact_load_address();
    var v'liquidityDelta = sc_0~load_int(257);
    var v'trxId = sc_0~load_uint(64);
    var v'pricesLength = sc_0~load_int(257);
    var v'prices = sc_0~load_dict();
    return (sc_0, (v'isIncrease, v'orderId, v'account, v'liquidityDelta, v'trxId, v'pricesLength, v'prices));
}

;;
;; Type: UpdateLPPositionSuccess
;; Header: 0x1cf0cf81
;; TLB: update_lp_position_success#1cf0cf81 orderId:int257 receive:int257 trxId:uint64 = UpdateLPPositionSuccess
;;

builder $UpdateLPPositionSuccess$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 485543809, 32);
    build_0 = build_0.store_int(v'orderId, 257);
    build_0 = build_0.store_int(v'receive, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $UpdateLPPositionSuccess$_store_cell((int, int, int) v) inline {
    return $UpdateLPPositionSuccess$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline {
    return (orderId, receive, trxId);
}

;;
;; Type: UpdatePerpPosition
;; Header: 0xff57e557
;; TLB: update_perp_position#ff57e557 orderId:uint64 opType:uint8 tokenId:int257 account:address isLong:bool marginDelta:int257 sizeDelta:int257 triggerPrice:int257 triggerAbove:bool trxId:uint64 pricesLength:int257 prices:dict<int, ^UpdatePrice{tokenId:int257,price:int257}> = UpdatePerpPosition
;;

(slice, ((int, int, int, slice, int, int, int, int, int, int, int, cell))) $UpdatePerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4283950423);
    var v'orderId = sc_0~load_uint(64);
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_int(257);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'sizeDelta = sc_1~load_int(257);
    var v'triggerPrice = sc_1~load_int(257);
    var v'triggerAbove = sc_1~load_int(1);
    var v'trxId = sc_1~load_uint(64);
    var v'pricesLength = sc_1~load_int(257);
    var v'prices = sc_1~load_dict();
    return (sc_0, (v'orderId, v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'trxId, v'pricesLength, v'prices));
}

;;
;; Type: UpdatePerpPositionSuccess
;; Header: 0xef01c2b4
;; TLB: update_perp_position_success#ef01c2b4 orderId:int257 receive:int257 trxId:uint64 = UpdatePerpPositionSuccess
;;

builder $UpdatePerpPositionSuccess$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 4009870004, 32);
    build_0 = build_0.store_int(v'orderId, 257);
    build_0 = build_0.store_int(v'receive, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $UpdatePerpPositionSuccess$_store_cell((int, int, int) v) inline {
    return $UpdatePerpPositionSuccess$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline {
    return (orderId, receive, trxId);
}

;;
;; Type: LPPositionIncreasedEvent
;; Header: 0xd07dde06
;; TLB: lp_position_increased_event#d07dde06 positionId:int257 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 unlockTimeAfter:int257 realizedFundingFee:int257 realizedFundingFeeAfter:int257 trxId:int257 = LPPositionIncreasedEvent
;;

builder $LPPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'unlockTimeAfter, v'realizedFundingFee, v'realizedFundingFeeAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 3497909766, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'liquidityAfter, 257);
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'unlockTimeAfter, 257);
    build_2 = build_2.store_int(v'realizedFundingFee, 257);
    build_2 = build_2.store_int(v'realizedFundingFeeAfter, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'trxId, 257);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int) v) inline {
    return $LPPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int, int, int, int)) $LPPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFee_realizedFundingFeeAfter_trxId(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter, int realizedFundingFee, int realizedFundingFeeAfter, int trxId) inline {
    return (positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, unlockTimeAfter, realizedFundingFee, realizedFundingFeeAfter, trxId);
}

;;
;; Type: LPPositionDecreasedEvent
;; Header: 0xd2393e17
;; TLB: lp_position_decreased_event#d2393e17 positionId:int257 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 fundingFeeDelta:int257 receive:int257 trxId:int257 = LPPositionDecreasedEvent
;;

builder $LPPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'fundingFeeDelta, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 3526966807, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'liquidityAfter, 257);
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'fundingFeeDelta, 257);
    build_2 = build_2.store_int(v'receive, 257);
    build_2 = build_2.store_int(v'trxId, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int) v) inline {
    return $LPPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int, int, int)) $LPPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_receive_trxId(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int fundingFeeDelta, int receive, int trxId) inline {
    return (positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, fundingFeeDelta, receive, trxId);
}

;;
;; Type: GlobalLPChangedEvent
;; Header: 0x3f230825
;; TLB: global_lp_changed_event#3f230825 lpFundAfter:int257 liquidityAfter:int257 tradingFee:int257 fundingFee:int257 trxId:int257 = GlobalLPChangedEvent
;;

builder $GlobalLPChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'lpFundAfter, v'liquidityAfter, v'tradingFee, v'fundingFee, v'trxId) = v;
    build_0 = store_uint(build_0, 1059260453, 32);
    build_0 = build_0.store_int(v'lpFundAfter, 257);
    build_0 = build_0.store_int(v'liquidityAfter, 257);
    build_0 = build_0.store_int(v'tradingFee, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'fundingFee, 257);
    build_1 = build_1.store_int(v'trxId, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $GlobalLPChangedEvent$_store_cell((int, int, int, int, int) v) inline {
    return $GlobalLPChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int)) $GlobalLPChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_trxId(int lpFundAfter, int liquidityAfter, int tradingFee, int fundingFee, int trxId) inline {
    return (lpFundAfter, liquidityAfter, tradingFee, fundingFee, trxId);
}

;;
;; Type: GlobalLPPositionChangedEvent
;; Header: 0x7eb7fb96
;; TLB: global_lp_position_changed_event#7eb7fb96 tokenId:int257 netSizeAfter:int257 isLong:bool entryPriceAfter:int257 trxId:int257 = GlobalLPPositionChangedEvent
;;

builder $GlobalLPPositionChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'tokenId, v'netSizeAfter, v'isLong, v'entryPriceAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 2125986710, 32);
    build_0 = build_0.store_int(v'tokenId, 257);
    build_0 = build_0.store_int(v'netSizeAfter, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'entryPriceAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'trxId, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $GlobalLPPositionChangedEvent$_store_cell((int, int, int, int, int) v) inline {
    return $GlobalLPPositionChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int)) $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId(int tokenId, int netSizeAfter, int isLong, int entryPriceAfter, int trxId) inline {
    return (tokenId, netSizeAfter, isLong, entryPriceAfter, trxId);
}

;;
;; Type: PerpPositionIncreasedEvent
;; Header: 0x07903041
;; TLB: perp_position_increased_event#07903041 positionId:int257 account:address tokenId:int257 isLong:bool marginDelta:int257 marginAfter:int257 sizeDelta:int257 sizeAfter:int257 tradePrice:int257 entryPrice:int257 fundingFee:int257 tradingFee:int257 trxId:int257 = PerpPositionIncreasedEvent
;;

builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'fundingFee, v'tradingFee, v'trxId) = v;
    build_0 = store_uint(build_0, 126890049, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'tokenId, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'marginDelta, 257);
    build_1 = build_1.store_int(v'marginAfter, 257);
    build_1 = build_1.store_int(v'sizeDelta, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'sizeAfter, 257);
    build_2 = build_2.store_int(v'tradePrice, 257);
    build_2 = build_2.store_int(v'entryPrice, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'fundingFee, 257);
    build_3 = build_3.store_int(v'tradingFee, 257);
    build_3 = build_3.store_int(v'trxId, 257);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int trxId) inline {
    return (positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, entryPrice, fundingFee, tradingFee, trxId);
}

;;
;; Type: PerpPositionDecreasedEvent
;; Header: 0x2c4f1505
;; TLB: perp_position_decreased_event#2c4f1505 positionId:int257 account:address tokenId:int257 isLong:bool marginDelta:int257 marginAfter:int257 sizeDelta:int257 sizeAfter:int257 tradePrice:int257 realizedPnLDelta:int257 fundingFee:int257 tradingFee:int257 receive:int257 trxId:int257 = PerpPositionDecreasedEvent
;;

builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'realizedPnLDelta, v'fundingFee, v'tradingFee, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 743380229, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'tokenId, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'marginDelta, 257);
    build_1 = build_1.store_int(v'marginAfter, 257);
    build_1 = build_1.store_int(v'sizeDelta, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'sizeAfter, 257);
    build_2 = build_2.store_int(v'tradePrice, 257);
    build_2 = build_2.store_int(v'realizedPnLDelta, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'fundingFee, 257);
    build_3 = build_3.store_int(v'tradingFee, 257);
    build_3 = build_3.store_int(v'receive, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'trxId, 257);
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_receive_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int realizedPnLDelta, int tradingFee, int fundingFee, int receive, int trxId) inline {
    return (positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, realizedPnLDelta, fundingFee, tradingFee, receive, trxId);
}

;;
;; Type: PerpPositionLiquidatedEvent
;; Header: 0xe4d104b0
;; TLB: perp_position_liquidated_event#e4d104b0 positionId:int257 account:address tokenId:int257 isLong:bool marginDelta:int257 sizeDelta:int257 liquidatePrice:int257 fundingFee:int257 tradingFee:int257 liquidationFee:int257 trxId:int257 = PerpPositionLiquidatedEvent
;;

builder $PerpPositionLiquidatedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'sizeDelta, v'liquidatePrice, v'fundingFee, v'tradingFee, v'liquidationFee, v'trxId) = v;
    build_0 = store_uint(build_0, 3838903472, 32);
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'tokenId, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'marginDelta, 257);
    build_1 = build_1.store_int(v'sizeDelta, 257);
    build_1 = build_1.store_int(v'liquidatePrice, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'fundingFee, 257);
    build_2 = build_2.store_int(v'tradingFee, 257);
    build_2 = build_2.store_int(v'liquidationFee, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'trxId, 257);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionLiquidatedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionLiquidatedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int, int, int, int, int, int)) $PerpPositionLiquidatedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_sizeDelta_liquidatePrice_tradingFee_fundingFee_liquidationFee_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int sizeDelta, int liquidatePrice, int tradingFee, int fundingFee, int liquidationFee, int trxId) inline {
    return (positionId, account, tokenId, isLong, marginDelta, sizeDelta, liquidatePrice, fundingFee, tradingFee, liquidationFee, trxId);
}

;;
;; Type: UpdatePriceEvent
;; Header: 0x6793c3e9
;; TLB: update_price_event#6793c3e9 pricesLength:int257 prices:dict<int, ^UpdatePrice{tokenId:int257,price:int257}> = UpdatePriceEvent
;;

builder $UpdatePriceEvent$_store(builder build_0, (int, cell) v) inline {
    var (v'pricesLength, v'prices) = v;
    build_0 = store_uint(build_0, 1737737193, 32);
    build_0 = build_0.store_int(v'pricesLength, 257);
    build_0 = build_0.store_dict(v'prices);
    return build_0;
}

cell $UpdatePriceEvent$_store_cell((int, cell) v) inline {
    return $UpdatePriceEvent$_store(begin_cell(), v).end_cell();
}

((int, cell)) $UpdatePriceEvent$_constructor_pricesLength_prices(int pricesLength, cell prices) inline {
    return (pricesLength, prices);
}

;;
;; Type: ConfigData
;; TLB: _ lpLockTime:int257 bonusFactor:int257 orderBook:address = ConfigData
;;

(int, int, slice) $ConfigData$_to_external(((int, int, slice)) v) inline {
    var (v'lpLockTime, v'bonusFactor, v'orderBook) = v; 
    return (v'lpLockTime, v'bonusFactor, v'orderBook);
}

((int, int, slice)) $ConfigData$_constructor_lpLockTime_bonusFactor_orderBook(int lpLockTime, int bonusFactor, slice orderBook) inline {
    return (lpLockTime, bonusFactor, orderBook);
}

;;
;; Type: TokenConfig
;; TLB: _ name:^string enable:bool minMargin:int257 maxLeverage:int257 liquidationFee:int257 tradingFeeRate:int257 lpTradingFeeRate:int257 interestRate:int257 maxFundingRate:int257 = TokenConfig
;;

builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_int(v'enable, 1);
    build_0 = build_0.store_int(v'minMargin, 257);
    build_0 = build_0.store_int(v'maxLeverage, 257);
    build_0 = build_0.store_int(v'liquidationFee, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'tradingFeeRate, 257);
    build_1 = build_1.store_int(v'lpTradingFeeRate, 257);
    build_1 = build_1.store_int(v'interestRate, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'maxFundingRate, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int, int, int) v) inline {
    return $TokenConfig$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref {
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'minMargin = sc_0~load_int(257);
    var v'maxLeverage = sc_0~load_int(257);
    var v'liquidationFee = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'tradingFeeRate = sc_1~load_int(257);
    var v'lpTradingFeeRate = sc_1~load_int(257);
    var v'interestRate = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'maxFundingRate = sc_2~load_int(257);
    return (sc_0, (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate));
}

tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_9(v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenConfig$_as_optional(sc~$TokenConfig$_load());
}

_ $TokenConfig$_get_enable((slice, int, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    return v'enable;
}

((slice, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'enable, int vvv'minMargin, int vvv'maxLeverage, int vvv'liquidationFee, int vvv'tradingFeeRate, int vvv'lpTradingFeeRate, int vvv'interestRate, int vvv'maxFundingRate) = __tact_tuple_destroy_9(v);
    return (vvv'name, vvv'enable, vvv'minMargin, vvv'maxLeverage, vvv'liquidationFee, vvv'tradingFeeRate, vvv'lpTradingFeeRate, vvv'interestRate, vvv'maxFundingRate);
}

tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int)) v) inline {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_9(v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $TokenConfig$_to_tuple($TokenConfig$_not_null(v)); 
}

((slice, int, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_interestRate_maxFundingRate(slice name, int enable, int minMargin, int maxLeverage, int liquidationFee, int tradingFeeRate, int lpTradingFeeRate, int interestRate, int maxFundingRate) inline {
    return (name, enable, minMargin, maxLeverage, liquidationFee, tradingFeeRate, lpTradingFeeRate, interestRate, maxFundingRate);
}

;;
;; Type: TokenConfigData
;; TLB: _ tokenIdNext:int257 tokenConfig:Maybe TokenConfig{name:^string,enable:bool,minMargin:int257,maxLeverage:int257,liquidationFee:int257,tradingFeeRate:int257,lpTradingFeeRate:int257,interestRate:int257,maxFundingRate:int257} = TokenConfigData
;;

(int, tuple) $TokenConfigData$_to_external(((int, tuple)) v) inline {
    var (v'tokenIdNext, v'tokenConfig) = v; 
    return (v'tokenIdNext, $TokenConfig$_to_opt_tuple(v'tokenConfig));
}

((int, tuple)) $TokenConfigData$_constructor_tokenIdNext_tokenConfig(int tokenIdNext, tuple tokenConfig) inline {
    return (tokenIdNext, tokenConfig);
}

;;
;; Type: LPPosition
;; TLB: _ positionId:int257 liquidity:int257 bonus:int257 realizedFundingFee:int257 entryFundingFeeGrowth:int257 unlockTime:int257 = LPPosition
;;

builder $LPPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = build_0.store_int(v'liquidity, 257);
    build_0 = build_0.store_int(v'bonus, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'realizedFundingFee, 257);
    build_1 = build_1.store_int(v'entryFundingFeeGrowth, 257);
    build_1 = build_1.store_int(v'unlockTime, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPosition$_store_cell((int, int, int, int, int, int) v) inline {
    return $LPPosition$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int, int)) $LPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'positionId, int vvv'liquidity, int vvv'bonus, int vvv'realizedFundingFee, int vvv'entryFundingFeeGrowth, int vvv'unlockTime) = __tact_tuple_destroy_6(v);
    return (vvv'positionId, vvv'liquidity, vvv'bonus, vvv'realizedFundingFee, vvv'entryFundingFeeGrowth, vvv'unlockTime);
}

cell $LPPosition$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $LPPosition$_store_cell($LPPosition$_not_null(v));
}

(slice, ((int, int, int, int, int, int))) $LPPosition$_load(slice sc_0) inline_ref {
    var v'positionId = sc_0~load_int(257);
    var v'liquidity = sc_0~load_int(257);
    var v'bonus = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'realizedFundingFee = sc_1~load_int(257);
    var v'entryFundingFeeGrowth = sc_1~load_int(257);
    var v'unlockTime = sc_1~load_int(257);
    return (sc_0, (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime));
}

tuple $LPPosition$_as_optional((int, int, int, int, int, int) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    return __tact_tuple_create_6(v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime);
}

tuple $LPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LPPosition$_as_optional(sc~$LPPosition$_load());
}

tuple $LPPosition$_to_tuple(((int, int, int, int, int, int)) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    return __tact_tuple_create_6(v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime);
}

tuple $LPPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LPPosition$_to_tuple($LPPosition$_not_null(v)); 
}

((int, int, int, int, int, int)) $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(int positionId, int liquidity, int bonus, int realizedFundingFee, int entryFundingFeeGrowth, int unlockTime) inline {
    return (positionId, liquidity, bonus, realizedFundingFee, entryFundingFeeGrowth, unlockTime);
}

;;
;; Type: GlobalLPLiquidity
;; TLB: _ lpFund:int257 liquidity:int257 fundingFeeGrowth:int257 = GlobalLPLiquidity
;;

builder $GlobalLPLiquidity$_store(builder build_0, (int, int, int) v) inline {
    var (v'lpFund, v'liquidity, v'fundingFeeGrowth) = v;
    build_0 = build_0.store_int(v'lpFund, 257);
    build_0 = build_0.store_int(v'liquidity, 257);
    build_0 = build_0.store_int(v'fundingFeeGrowth, 257);
    return build_0;
}

(slice, ((int, int, int))) $GlobalLPLiquidity$_load(slice sc_0) inline {
    var v'lpFund = sc_0~load_int(257);
    var v'liquidity = sc_0~load_int(257);
    var v'fundingFeeGrowth = sc_0~load_int(257);
    return (sc_0, (v'lpFund, v'liquidity, v'fundingFeeGrowth));
}

tuple $GlobalLPLiquidity$_to_tuple(((int, int, int)) v) inline {
    var (v'lpFund, v'liquidity, v'fundingFeeGrowth) = v;
    return __tact_tuple_create_3(v'lpFund, v'liquidity, v'fundingFeeGrowth);
}

((int, int, int)) $GlobalLPLiquidity$_constructor_lpFund_liquidity_fundingFeeGrowth(int lpFund, int liquidity, int fundingFeeGrowth) inline {
    return (lpFund, liquidity, fundingFeeGrowth);
}

;;
;; Type: LPPositionData
;; TLB: _ lpPosition:Maybe LPPosition{positionId:int257,liquidity:int257,bonus:int257,realizedFundingFee:int257,entryFundingFeeGrowth:int257,unlockTime:int257} globalLPLiquidity:GlobalLPLiquidity{lpFund:int257,liquidity:int257,fundingFeeGrowth:int257} = LPPositionData
;;

((tuple, (int, int, int))) $LPPositionData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (tuple vvv'lpPosition, int vvv'globalLPLiquidity'lpFund, int vvv'globalLPLiquidity'liquidity, int vvv'globalLPLiquidity'fundingFeeGrowth) = __tact_tuple_destroy_4(v);
    return (vvv'lpPosition, (vvv'globalLPLiquidity'lpFund, vvv'globalLPLiquidity'liquidity, vvv'globalLPLiquidity'fundingFeeGrowth));
}

tuple $LPPositionData$_as_optional((tuple, (int, int, int)) v) inline {
    var (v'lpPosition, (v'globalLPLiquidity'lpFund, v'globalLPLiquidity'liquidity, v'globalLPLiquidity'fundingFeeGrowth)) = v;
    return __tact_tuple_create_4(v'lpPosition, v'globalLPLiquidity'lpFund, v'globalLPLiquidity'liquidity, v'globalLPLiquidity'fundingFeeGrowth);
}

tuple $LPPositionData$_to_tuple(((tuple, (int, int, int))) v) inline {
    var (v'lpPosition, v'globalLPLiquidity) = v;
    return __tact_tuple_create_2($LPPosition$_to_opt_tuple(v'lpPosition), $GlobalLPLiquidity$_to_tuple(v'globalLPLiquidity));
}

tuple $LPPositionData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LPPositionData$_to_tuple($LPPositionData$_not_null(v)); 
}

tuple $LPPositionData$_to_opt_external(tuple v) inline {
    var loaded = $LPPositionData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((tuple, (int, int, int))) $LPPositionData$_constructor_lpPosition_globalLPLiquidity(tuple lpPosition, (int, int, int) globalLPLiquidity) inline {
    return (lpPosition, globalLPLiquidity);
}

;;
;; Type: AccountPerpPosition
;; TLB: _ positions:dict<address, ^DirectionPerpPosition{longPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257},shortPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257}}> = AccountPerpPosition
;;

builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline {
    var (v'positions) = v;
    build_0 = build_0.store_dict(v'positions);
    return build_0;
}

cell $AccountPerpPosition$_store_cell((cell) v) inline {
    return $AccountPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline {
    var v'positions = sc_0~load_dict();
    return (sc_0, (v'positions));
}

tuple $AccountPerpPosition$_as_optional((cell) v) inline {
    var (v'positions) = v;
    return __tact_tuple_create_1(v'positions);
}

tuple $AccountPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $AccountPerpPosition$_as_optional(sc~$AccountPerpPosition$_load());
}

_ $AccountPerpPosition$_get_positions((cell) v) inline {
    var (v'positions) = v;
    return v'positions;
}

((cell)) $AccountPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'positions) = __tact_tuple_destroy_1(v);
    return (vvv'positions);
}

((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline {
    return (positions);
}

;;
;; Type: PerpPosition
;; TLB: _ positionId:int257 margin:int257 size:int257 entryPrice:int257 entryFundingFeeGrowth:int257 = PerpPosition
;;

builder $PerpPosition$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth) = v;
    build_0 = build_0.store_int(v'positionId, 257);
    build_0 = build_0.store_int(v'margin, 257);
    build_0 = build_0.store_int(v'size, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'entryPrice, 257);
    build_1 = build_1.store_int(v'entryFundingFeeGrowth, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline {
    var v'positionId = sc_0~load_int(257);
    var v'margin = sc_0~load_int(257);
    var v'size = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'entryPrice = sc_1~load_int(257);
    var v'entryFundingFeeGrowth = sc_1~load_int(257);
    return (sc_0, (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth));
}

tuple $PerpPosition$_to_tuple(((int, int, int, int, int)) v) inline {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth) = v;
    return __tact_tuple_create_5(v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth);
}

((int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth) inline {
    return (positionId, margin, size, entryPrice, entryFundingFeeGrowth);
}

;;
;; Type: DirectionPerpPosition
;; TLB: _ longPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257} shortPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257} = DirectionPerpPosition
;;

builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth)) = v;
    build_0 = $PerpPosition$_store(build_0, (v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth));
    var build_1 = begin_cell();
    build_1 = $PerpPosition$_store(build_1, (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    return $DirectionPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline {
    var v'longPosition = sc_0~$PerpPosition$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shortPosition = sc_1~$PerpPosition$_load();
    return (sc_0, (v'longPosition, v'shortPosition));
}

tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth)) = v;
    return __tact_tuple_create_10(v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth);
}

tuple $DirectionPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $DirectionPerpPosition$_as_optional(sc~$DirectionPerpPosition$_load());
}

(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longPosition'positionId, int vvv'longPosition'margin, int vvv'longPosition'size, int vvv'longPosition'entryPrice, int vvv'longPosition'entryFundingFeeGrowth, int vvv'shortPosition'positionId, int vvv'shortPosition'margin, int vvv'shortPosition'size, int vvv'shortPosition'entryPrice, int vvv'shortPosition'entryFundingFeeGrowth) = __tact_tuple_destroy_10(v);
    return ((vvv'longPosition'positionId, vvv'longPosition'margin, vvv'longPosition'size, vvv'longPosition'entryPrice, vvv'longPosition'entryFundingFeeGrowth), (vvv'shortPosition'positionId, vvv'shortPosition'margin, vvv'shortPosition'size, vvv'shortPosition'entryPrice, vvv'shortPosition'entryFundingFeeGrowth));
}

tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int), (int, int, int, int, int))) v) inline {
    var (v'longPosition, v'shortPosition) = v;
    return __tact_tuple_create_2($PerpPosition$_to_tuple(v'longPosition), $PerpPosition$_to_tuple(v'shortPosition));
}

tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $DirectionPerpPosition$_to_tuple($DirectionPerpPosition$_not_null(v)); 
}

(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int) longPosition, (int, int, int, int, int) shortPosition) inline {
    return (longPosition, shortPosition);
}

;;
;; Type: GlobalLPPosition
;; TLB: _ netSize:int257 isLong:bool entryPrice:int257 = GlobalLPPosition
;;

builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    build_0 = build_0.store_int(v'netSize, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'entryPrice, 257);
    return build_0;
}

cell $GlobalLPPosition$_store_cell((int, int, int) v) inline {
    return $GlobalLPPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline {
    var v'netSize = sc_0~load_int(257);
    var v'isLong = sc_0~load_int(1);
    var v'entryPrice = sc_0~load_int(257);
    return (sc_0, (v'netSize, v'isLong, v'entryPrice));
}

tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalLPPosition$_as_optional(sc~$GlobalLPPosition$_load());
}

((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'netSize, int vvv'isLong, int vvv'entryPrice) = __tact_tuple_destroy_3(v);
    return (vvv'netSize, vvv'isLong, vvv'entryPrice);
}

tuple $GlobalLPPosition$_to_tuple(((int, int, int)) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalLPPosition$_to_tuple($GlobalLPPosition$_not_null(v)); 
}

((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int netSize, int isLong, int entryPrice) inline {
    return (netSize, isLong, entryPrice);
}

;;
;; Type: PerpPositionData
;; TLB: _ perpPosition:Maybe DirectionPerpPosition{longPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257},shortPosition:PerpPosition{positionId:int257,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257}} globalLPPosition:Maybe GlobalLPPosition{netSize:int257,isLong:bool,entryPrice:int257} = PerpPositionData
;;

((tuple, tuple)) $PerpPositionData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (tuple vvv'perpPosition, tuple vvv'globalLPPosition) = __tact_tuple_destroy_2(v);
    return (vvv'perpPosition, vvv'globalLPPosition);
}

tuple $PerpPositionData$_as_optional((tuple, tuple) v) inline {
    var (v'perpPosition, v'globalLPPosition) = v;
    return __tact_tuple_create_2(v'perpPosition, v'globalLPPosition);
}

tuple $PerpPositionData$_to_tuple(((tuple, tuple)) v) inline {
    var (v'perpPosition, v'globalLPPosition) = v;
    return __tact_tuple_create_2($DirectionPerpPosition$_to_opt_tuple(v'perpPosition), $GlobalLPPosition$_to_opt_tuple(v'globalLPPosition));
}

tuple $PerpPositionData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $PerpPositionData$_to_tuple($PerpPositionData$_not_null(v)); 
}

tuple $PerpPositionData$_to_opt_external(tuple v) inline {
    var loaded = $PerpPositionData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((tuple, tuple)) $PerpPositionData$_constructor_perpPosition_globalLPPosition(tuple perpPosition, tuple globalLPPosition) inline {
    return (perpPosition, globalLPPosition);
}

;;
;; Type: PriceData
;; TLB: _ price:int257 = PriceData
;;

builder $PriceData$_store(builder build_0, (int) v) inline {
    var (v'price) = v;
    build_0 = build_0.store_int(v'price, 257);
    return build_0;
}

cell $PriceData$_store_cell((int) v) inline {
    return $PriceData$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $PriceData$_load(slice sc_0) inline {
    var v'price = sc_0~load_int(257);
    return (sc_0, (v'price));
}

tuple $PriceData$_as_optional((int) v) inline {
    var (v'price) = v;
    return __tact_tuple_create_1(v'price);
}

tuple $PriceData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PriceData$_as_optional(sc~$PriceData$_load());
}

_ $PriceData$_get_price((int) v) inline {
    var (v'price) = v;
    return v'price;
}

((int)) $PriceData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'price) = __tact_tuple_destroy_1(v);
    return (vvv'price);
}

tuple $PriceData$_to_tuple(((int)) v) inline {
    var (v'price) = v;
    return __tact_tuple_create_1(v'price);
}

tuple $PriceData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $PriceData$_to_tuple($PriceData$_not_null(v)); 
}

tuple $PriceData$_to_opt_external(tuple v) inline {
    var loaded = $PriceData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int)) $PriceData$_constructor_price(int price) inline {
    return (price);
}

;;
;; Type: UpdatePrice
;; TLB: _ tokenId:int257 price:int257 = UpdatePrice
;;

(slice, ((int, int))) $UpdatePrice$_load(slice sc_0) inline {
    var v'tokenId = sc_0~load_int(257);
    var v'price = sc_0~load_int(257);
    return (sc_0, (v'tokenId, v'price));
}

tuple $UpdatePrice$_as_optional((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return __tact_tuple_create_2(v'tokenId, v'price);
}

tuple $UpdatePrice$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $UpdatePrice$_as_optional(sc~$UpdatePrice$_load());
}

_ $UpdatePrice$_get_tokenId((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return v'tokenId;
}

_ $UpdatePrice$_get_price((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return v'price;
}

((int, int)) $UpdatePrice$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'tokenId, int vvv'price) = __tact_tuple_destroy_2(v);
    return (vvv'tokenId, vvv'price);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) v) inline {
    var (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIdNext, v'lpLockTime, v'bonusFactor, v'owner, v'orderBook, v'lpPositions, v'lpPositionIndexNext, (v'globalLPLiquidity'lpFund, v'globalLPLiquidity'liquidity, v'globalLPLiquidity'fundingFeeGrowth), v'perpPositions, v'perpPositionIndexNext, v'globalLPPositions, v'prices, v'protocalTradingFee) = v;
    build_0 = build_0.store_int(v'gasConsumption, 257);
    build_0 = build_0.store_int(v'minTonsForStorage, 257);
    build_0 = build_0.store_dict(v'tokenConfigs);
    build_0 = build_0.store_int(v'tokenIdNext, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'lpLockTime, 257);
    build_1 = build_1.store_int(v'bonusFactor, 257);
    build_1 = __tact_store_address(build_1, v'owner);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'orderBook);
    build_2 = build_2.store_dict(v'lpPositions);
    build_2 = build_2.store_uint(v'lpPositionIndexNext, 64);
    var build_3 = begin_cell();
    build_3 = $GlobalLPLiquidity$_store(build_3, (v'globalLPLiquidity'lpFund, v'globalLPLiquidity'liquidity, v'globalLPLiquidity'fundingFeeGrowth));
    build_3 = build_3.store_dict(v'perpPositions);
    build_3 = build_3.store_uint(v'perpPositionIndexNext, 64);
    build_3 = build_3.store_dict(v'globalLPPositions);
    build_3 = build_3.store_dict(v'prices);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'protocalTradingFee, 257);
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int))) $Pool$_load(slice sc_0) inline {
    var v'gasConsumption = sc_0~load_int(257);
    var v'minTonsForStorage = sc_0~load_int(257);
    var v'tokenConfigs = sc_0~load_dict();
    var v'tokenIdNext = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'lpLockTime = sc_1~load_int(257);
    var v'bonusFactor = sc_1~load_int(257);
    var v'owner = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'orderBook = sc_2~__tact_load_address();
    var v'lpPositions = sc_2~load_dict();
    var v'lpPositionIndexNext = sc_2~load_uint(64);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'globalLPLiquidity = sc_3~$GlobalLPLiquidity$_load();
    var v'perpPositions = sc_3~load_dict();
    var v'perpPositionIndexNext = sc_3~load_uint(64);
    var v'globalLPPositions = sc_3~load_dict();
    var v'prices = sc_3~load_dict();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'protocalTradingFee = sc_4~load_int(257);
    return (sc_0, (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIdNext, v'lpLockTime, v'bonusFactor, v'owner, v'orderBook, v'lpPositions, v'lpPositionIndexNext, v'globalLPLiquidity, v'perpPositions, v'perpPositionIndexNext, v'globalLPPositions, v'prices, v'protocalTradingFee));
}

(slice, ((int))) $Pool$init$_load(slice sc_0) inline {
    var v'deployId = sc_0~load_int(257);
    return (sc_0, (v'deployId));
}

(int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int deployId) = $sc~$Pool$init$_load();
        $sc.end_parse();
        return $Pool$_contract_init(deployId);
    }
}

() $Pool$_contract_store((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}