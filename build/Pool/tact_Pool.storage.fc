;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: UpdateConfig
;; Header: 0x0bd30ead
;; TLB: update_config#0bd30ead executor:Maybe address enableExecutor:Maybe bool gasConsumption:Maybe coins minTonsForStorage:Maybe coins lpLockTime:Maybe int257 lpBonusFactor:Maybe int257 lpLiquidityFactor:Maybe int257 orderBook:Maybe address = UpdateConfig
;;

(slice, ((slice, int, int, int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 198381229);
    var v'executor = sc_0~__tact_load_address_opt();
    var v'enableExecutor = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'gasConsumption = sc_0~load_int(1) ? sc_0~load_coins() : null();
    var v'minTonsForStorage = sc_0~load_int(1) ? sc_0~load_coins() : null();
    var v'lpLockTime = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'lpBonusFactor = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'lpLiquidityFactor = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'orderBook = sc_1~__tact_load_address_opt();
    return (sc_0, (v'executor, v'enableExecutor, v'gasConsumption, v'minTonsForStorage, v'lpLockTime, v'lpBonusFactor, v'lpLiquidityFactor, v'orderBook));
}

;;
;; Type: UpdateTokenConfig
;; Header: 0x69d44870
;; TLB: update_token_config#69d44870 tokenId:uint64 name:Maybe ^string enable:Maybe bool minMargin:Maybe int257 maxLeverage:Maybe int257 liquidationFee:Maybe int257 tradingFeeRate:Maybe int257 lpTradingFeeRate:Maybe int257 interestRate:Maybe int257 maxFundingRate:Maybe int257 = UpdateTokenConfig
;;

(slice, ((int, slice, int, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1775519856);
    var v'tokenId = sc_0~load_uint(64);
    var v'name = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    var v'enable = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'minMargin = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'maxLeverage = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    var v'liquidationFee = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'tradingFeeRate = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'lpTradingFeeRate = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    var v'interestRate = sc_1~load_int(1) ? sc_1~load_int(257) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'maxFundingRate = sc_2~load_int(1) ? sc_2~load_int(257) : null();
    return (sc_0, (v'tokenId, v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate));
}

;;
;; Type: UpdateLPPosition
;; Header: 0xe89cd45f
;; TLB: update_lp_position#e89cd45f isIncrease:bool orderId:uint64 account:address liquidityDelta:int257 trxId:uint64 pricesLength:uint64 prices:dict<int, ^UpdatePriceParam{tokenId:uint64,price:int257}> = UpdateLPPosition
;;

(slice, ((int, int, slice, int, int, int, cell))) $UpdateLPPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3902592095);
    var v'isIncrease = sc_0~load_int(1);
    var v'orderId = sc_0~load_uint(64);
    var v'account = sc_0~__tact_load_address();
    var v'liquidityDelta = sc_0~load_int(257);
    var v'trxId = sc_0~load_uint(64);
    var v'pricesLength = sc_0~load_uint(64);
    var v'prices = sc_0~load_dict();
    return (sc_0, (v'isIncrease, v'orderId, v'account, v'liquidityDelta, v'trxId, v'pricesLength, v'prices));
}

;;
;; Type: UpdateLPPositionSuccess
;; Header: 0x1cf0cf81
;; TLB: update_lp_position_success#1cf0cf81 orderId:uint64 receive:int257 trxId:uint64 = UpdateLPPositionSuccess
;;

builder $UpdateLPPositionSuccess$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 485543809, 32);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_int(v'receive, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $UpdateLPPositionSuccess$_store_cell((int, int, int) v) inline {
    return $UpdateLPPositionSuccess$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline {
    return (orderId, receive, trxId);
}

;;
;; Type: UpdatePerpPosition
;; Header: 0xff57e557
;; TLB: update_perp_position#ff57e557 orderId:uint64 opType:uint8 tokenId:uint64 account:address isLong:bool marginDelta:int257 sizeDelta:int257 triggerPrice:int257 triggerAbove:bool trxId:uint64 pricesLength:uint64 prices:dict<int, ^UpdatePriceParam{tokenId:uint64,price:int257}> = UpdatePerpPosition
;;

(slice, ((int, int, int, slice, int, int, int, int, int, int, int, cell))) $UpdatePerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4283950423);
    var v'orderId = sc_0~load_uint(64);
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_uint(64);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_int(257);
    var v'sizeDelta = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'triggerPrice = sc_1~load_int(257);
    var v'triggerAbove = sc_1~load_int(1);
    var v'trxId = sc_1~load_uint(64);
    var v'pricesLength = sc_1~load_uint(64);
    var v'prices = sc_1~load_dict();
    return (sc_0, (v'orderId, v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'trxId, v'pricesLength, v'prices));
}

;;
;; Type: UpdatePerpPositionSuccess
;; Header: 0xef01c2b4
;; TLB: update_perp_position_success#ef01c2b4 orderId:uint64 receive:int257 trxId:uint64 = UpdatePerpPositionSuccess
;;

builder $UpdatePerpPositionSuccess$_store(builder build_0, (int, int, int) v) inline {
    var (v'orderId, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 4009870004, 32);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_int(v'receive, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $UpdatePerpPositionSuccess$_store_cell((int, int, int) v) inline {
    return $UpdatePerpPositionSuccess$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline {
    return (orderId, receive, trxId);
}

;;
;; Type: UpdatePrice
;; Header: 0x1dc8958c
;; TLB: update_price#1dc8958c trxId:uint64 pricesLength:uint64 prices:dict<int, ^UpdatePriceParam{tokenId:uint64,price:int257}> = UpdatePrice
;;

(slice, ((int, int, cell))) $UpdatePrice$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 499684748);
    var v'trxId = sc_0~load_uint(64);
    var v'pricesLength = sc_0~load_uint(64);
    var v'prices = sc_0~load_dict();
    return (sc_0, (v'trxId, v'pricesLength, v'prices));
}

;;
;; Type: SetPremiumRateSampleRange
;; Header: 0x0176e0c9
;; TLB: set_premium_rate_sample_range#0176e0c9 sampleRangeLength:uint64 sampleRanges:dict<int, ^PremiumRateSampleRangeParam{sampleId:uint64,sampleLength:uint64,samples:dict<int, ^PremiumRateSample{deviationRate:int257,premiumRate:int257}>}> = SetPremiumRateSampleRange
;;

(slice, ((int, cell))) $SetPremiumRateSampleRange$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 24568009);
    var v'sampleRangeLength = sc_0~load_uint(64);
    var v'sampleRanges = sc_0~load_dict();
    return (sc_0, (v'sampleRangeLength, v'sampleRanges));
}

;;
;; Type: LPPositionIncreasedEvent
;; Header: 0x1f8596cf
;; TLB: lp_position_increased_event#1f8596cf opType:uint8 positionId:uint64 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 unlockTimeAfter:int257 realizedFundingFeeDelta:int257 realizedFundingFeeAfter:int257 entryFundingFeeGrowthAfter:int257 trxId:uint64 = LPPositionIncreasedEvent
;;

builder $LPPositionIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'unlockTimeAfter, v'realizedFundingFeeDelta, v'realizedFundingFeeAfter, v'entryFundingFeeGrowthAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 528848591, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    build_0 = build_0.store_int(v'liquidityAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    build_1 = build_1.store_int(v'unlockTimeAfter, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'realizedFundingFeeDelta, 257);
    build_2 = build_2.store_int(v'realizedFundingFeeAfter, 257);
    build_2 = build_2.store_int(v'entryFundingFeeGrowthAfter, 257);
    build_2 = build_2.store_uint(v'trxId, 64);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPositionIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $LPPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, int)) $LPPositionIncreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFeeDelta_realizedFundingFeeAfter_entryFundingFeeGrowthAfter_trxId(int opType, int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter, int realizedFundingFeeDelta, int realizedFundingFeeAfter, int entryFundingFeeGrowthAfter, int trxId) inline {
    return (opType, positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, unlockTimeAfter, realizedFundingFeeDelta, realizedFundingFeeAfter, entryFundingFeeGrowthAfter, trxId);
}

;;
;; Type: LPPositionDecreasedEvent
;; Header: 0x054bc1b9
;; TLB: lp_position_decreased_event#054bc1b9 opType:uint8 positionId:uint64 account:address liquidityDelta:int257 liquidityAfter:int257 bonusDelta:int257 bonusAfter:int257 fundingFeeDelta:int257 entryFundingFeeGrowthAfter:int257 receive:int257 trxId:uint64 = LPPositionDecreasedEvent
;;

builder $LPPositionDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'positionId, v'account, v'liquidityDelta, v'liquidityAfter, v'bonusDelta, v'bonusAfter, v'fundingFeeDelta, v'entryFundingFeeGrowthAfter, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 88850873, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'liquidityDelta, 257);
    build_0 = build_0.store_int(v'liquidityAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'bonusDelta, 257);
    build_1 = build_1.store_int(v'bonusAfter, 257);
    build_1 = build_1.store_int(v'fundingFeeDelta, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'entryFundingFeeGrowthAfter, 257);
    build_2 = build_2.store_int(v'receive, 257);
    build_2 = build_2.store_uint(v'trxId, 64);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPositionDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int) v) inline {
    return $LPPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int)) $LPPositionDecreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_entryFundingFeeGrowthAfter_receive_trxId(int opType, int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int fundingFeeDelta, int entryFundingFeeGrowthAfter, int receive, int trxId) inline {
    return (opType, positionId, account, liquidityDelta, liquidityAfter, bonusDelta, bonusAfter, fundingFeeDelta, entryFundingFeeGrowthAfter, receive, trxId);
}

;;
;; Type: GlobalLPLiquidityChangedEvent
;; Header: 0x0b12c192
;; TLB: global_lp_liquidity_changed_event#0b12c192 lpFundAfter:int257 liquidityAfter:int257 tradingFee:int257 fundingFee:int257 realizedPnl:int257 trxId:uint64 = GlobalLPLiquidityChangedEvent
;;

builder $GlobalLPLiquidityChangedEvent$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'lpFundAfter, v'liquidityAfter, v'tradingFee, v'fundingFee, v'realizedPnl, v'trxId) = v;
    build_0 = store_uint(build_0, 185778578, 32);
    build_0 = build_0.store_int(v'lpFundAfter, 257);
    build_0 = build_0.store_int(v'liquidityAfter, 257);
    build_0 = build_0.store_int(v'tradingFee, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'fundingFee, 257);
    build_1 = build_1.store_int(v'realizedPnl, 257);
    build_1 = build_1.store_uint(v'trxId, 64);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $GlobalLPLiquidityChangedEvent$_store_cell((int, int, int, int, int, int) v) inline {
    return $GlobalLPLiquidityChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int, int)) $GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_realizedPnl_trxId(int lpFundAfter, int liquidityAfter, int tradingFee, int fundingFee, int realizedPnl, int trxId) inline {
    return (lpFundAfter, liquidityAfter, tradingFee, fundingFee, realizedPnl, trxId);
}

;;
;; Type: GlobalLPPositionChangedEvent
;; Header: 0xf65a7093
;; TLB: global_lp_position_changed_event#f65a7093 tokenId:uint64 netSizeAfter:int257 isLong:bool entryPriceAfter:int257 trxId:uint64 = GlobalLPPositionChangedEvent
;;

builder $GlobalLPPositionChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'tokenId, v'netSizeAfter, v'isLong, v'entryPriceAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 4133122195, 32);
    build_0 = build_0.store_uint(v'tokenId, 64);
    build_0 = build_0.store_int(v'netSizeAfter, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'entryPriceAfter, 257);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $GlobalLPPositionChangedEvent$_store_cell((int, int, int, int, int) v) inline {
    return $GlobalLPPositionChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int)) $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId(int tokenId, int netSizeAfter, int isLong, int entryPriceAfter, int trxId) inline {
    return (tokenId, netSizeAfter, isLong, entryPriceAfter, trxId);
}

;;
;; Type: PerpPositionIncreasedEvent
;; Header: 0x00e5476e
;; TLB: perp_position_increased_event#00e5476e opType:uint8 positionId:uint64 account:address tokenId:uint64 isLong:bool marginDelta:int257 marginAfter:int257 sizeDelta:int257 sizeAfter:int257 tradePrice:int257 entryPrice:int257 fundingFee:int257 tradingFee:int257 entryFundingFeeGrowthAfter:int257 trxId:uint64 = PerpPositionIncreasedEvent
;;

builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'fundingFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 15026030, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 64);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 257);
    build_0 = build_0.store_int(v'marginAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'sizeDelta, 257);
    build_1 = build_1.store_int(v'sizeAfter, 257);
    build_1 = build_1.store_int(v'tradePrice, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'entryPrice, 257);
    build_2 = build_2.store_int(v'fundingFee, 257);
    build_2 = build_2.store_int(v'tradingFee, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'entryFundingFeeGrowthAfter, 257);
    build_3 = build_3.store_uint(v'trxId, 64);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_entryFundingFeeGrowthAfter_trxId(int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int entryFundingFeeGrowthAfter, int trxId) inline {
    return (opType, positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, entryPrice, fundingFee, tradingFee, entryFundingFeeGrowthAfter, trxId);
}

;;
;; Type: PerpPositionDecreasedEvent
;; Header: 0x9dfdb1a9
;; TLB: perp_position_decreased_event#9dfdb1a9 opType:uint8 positionId:uint64 account:address tokenId:uint64 isLong:bool marginDelta:int257 marginAfter:int257 sizeDelta:int257 sizeAfter:int257 tradePrice:int257 realizedPnLDelta:int257 fundingFee:int257 tradingFee:int257 entryFundingFeeGrowthAfter:int257 receive:int257 trxId:uint64 = PerpPositionDecreasedEvent
;;

builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'realizedPnLDelta, v'fundingFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'receive, v'trxId) = v;
    build_0 = store_uint(build_0, 2650649001, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 64);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 257);
    build_0 = build_0.store_int(v'marginAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'sizeDelta, 257);
    build_1 = build_1.store_int(v'sizeAfter, 257);
    build_1 = build_1.store_int(v'tradePrice, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'realizedPnLDelta, 257);
    build_2 = build_2.store_int(v'fundingFee, 257);
    build_2 = build_2.store_int(v'tradingFee, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'entryFundingFeeGrowthAfter, 257);
    build_3 = build_3.store_int(v'receive, 257);
    build_3 = build_3.store_uint(v'trxId, 64);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_trxId(int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int realizedPnLDelta, int tradingFee, int fundingFee, int entryFundingFeeGrowthAfter, int receive, int trxId) inline {
    return (opType, positionId, account, tokenId, isLong, marginDelta, marginAfter, sizeDelta, sizeAfter, tradePrice, realizedPnLDelta, fundingFee, tradingFee, entryFundingFeeGrowthAfter, receive, trxId);
}

;;
;; Type: GlobalPositionChangedEvent
;; Header: 0x82e5206c
;; TLB: global_position_changed_event#82e5206c tokenId:uint64 longMarginAfter:int257 shortMarginAfter:int257 longSizeAfter:int257 shortSizeAfter:int257 longFundingFeeGrowthAfter:int257 shortFundingFeeGrowthAfter:int257 trxId:uint64 = GlobalPositionChangedEvent
;;

builder $GlobalPositionChangedEvent$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'tokenId, v'longMarginAfter, v'shortMarginAfter, v'longSizeAfter, v'shortSizeAfter, v'longFundingFeeGrowthAfter, v'shortFundingFeeGrowthAfter, v'trxId) = v;
    build_0 = store_uint(build_0, 2196054124, 32);
    build_0 = build_0.store_uint(v'tokenId, 64);
    build_0 = build_0.store_int(v'longMarginAfter, 257);
    build_0 = build_0.store_int(v'shortMarginAfter, 257);
    build_0 = build_0.store_int(v'longSizeAfter, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'shortSizeAfter, 257);
    build_1 = build_1.store_int(v'longFundingFeeGrowthAfter, 257);
    build_1 = build_1.store_int(v'shortFundingFeeGrowthAfter, 257);
    build_1 = build_1.store_uint(v'trxId, 64);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $GlobalPositionChangedEvent$_store_cell((int, int, int, int, int, int, int, int) v) inline {
    return $GlobalPositionChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int, int, int, int)) $GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId(int tokenId, int longMarginAfter, int shortMarginAfter, int longSizeAfter, int shortSizeAfter, int longFundingFeeGrowthAfter, int shortFundingFeeGrowthAfter, int trxId) inline {
    return (tokenId, longMarginAfter, shortMarginAfter, longSizeAfter, shortSizeAfter, longFundingFeeGrowthAfter, shortFundingFeeGrowthAfter, trxId);
}

;;
;; Type: UpdatePriceEvent
;; Header: 0x60589463
;; TLB: update_price_event#60589463 pricesLength:uint64 prices:dict<int, ^UpdatePriceParam{tokenId:uint64,price:int257}> = UpdatePriceEvent
;;

builder $UpdatePriceEvent$_store(builder build_0, (int, cell) v) inline {
    var (v'pricesLength, v'prices) = v;
    build_0 = store_uint(build_0, 1616417891, 32);
    build_0 = build_0.store_uint(v'pricesLength, 64);
    build_0 = build_0.store_dict(v'prices);
    return build_0;
}

cell $UpdatePriceEvent$_store_cell((int, cell) v) inline {
    return $UpdatePriceEvent$_store(begin_cell(), v).end_cell();
}

((int, cell)) $UpdatePriceEvent$_constructor_pricesLength_prices(int pricesLength, cell prices) inline {
    return (pricesLength, prices);
}

;;
;; Type: ConfigData
;; TLB: _ isExecutor:Maybe bool gasConsumption:coins minTonsForStorage:coins lpLockTime:int257 lpBonusFactor:int257 lpLiquidityFactor:int257 orderBook:address = ConfigData
;;

(int, int, int, int, int, int, slice) $ConfigData$_to_external(((int, int, int, int, int, int, slice)) v) inline {
    var (v'isExecutor, v'gasConsumption, v'minTonsForStorage, v'lpLockTime, v'lpBonusFactor, v'lpLiquidityFactor, v'orderBook) = v; 
    return (v'isExecutor, v'gasConsumption, v'minTonsForStorage, v'lpLockTime, v'lpBonusFactor, v'lpLiquidityFactor, v'orderBook);
}

((int, int, int, int, int, int, slice)) $ConfigData$_constructor_isExecutor_gasConsumption_minTonsForStorage_lpLockTime_lpBonusFactor_lpLiquidityFactor_orderBook(int isExecutor, int gasConsumption, int minTonsForStorage, int lpLockTime, int lpBonusFactor, int lpLiquidityFactor, slice orderBook) inline {
    return (isExecutor, gasConsumption, minTonsForStorage, lpLockTime, lpBonusFactor, lpLiquidityFactor, orderBook);
}

;;
;; Type: TokenConfig
;; TLB: _ name:^string enable:bool minMargin:int257 maxLeverage:int257 liquidationFee:int257 liquidityProportion:int257 tradingFeeRate:int257 lpTradingFeeRate:int257 interestRate:int257 maxFundingRate:int257 = TokenConfig
;;

builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_int(v'enable, 1);
    build_0 = build_0.store_int(v'minMargin, 257);
    build_0 = build_0.store_int(v'maxLeverage, 257);
    build_0 = build_0.store_int(v'liquidationFee, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'liquidityProportion, 257);
    build_1 = build_1.store_int(v'tradingFeeRate, 257);
    build_1 = build_1.store_int(v'lpTradingFeeRate, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'interestRate, 257);
    build_2 = build_2.store_int(v'maxFundingRate, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $TokenConfig$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref {
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'minMargin = sc_0~load_int(257);
    var v'maxLeverage = sc_0~load_int(257);
    var v'liquidationFee = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'liquidityProportion = sc_1~load_int(257);
    var v'tradingFeeRate = sc_1~load_int(257);
    var v'lpTradingFeeRate = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'interestRate = sc_2~load_int(257);
    var v'maxFundingRate = sc_2~load_int(257);
    return (sc_0, (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate));
}

tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_10(v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenConfig$_as_optional(sc~$TokenConfig$_load());
}

((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'enable, int vvv'minMargin, int vvv'maxLeverage, int vvv'liquidationFee, int vvv'liquidityProportion, int vvv'tradingFeeRate, int vvv'lpTradingFeeRate, int vvv'interestRate, int vvv'maxFundingRate) = __tact_tuple_destroy_10(v);
    return (vvv'name, vvv'enable, vvv'minMargin, vvv'maxLeverage, vvv'liquidationFee, vvv'liquidityProportion, vvv'tradingFeeRate, vvv'lpTradingFeeRate, vvv'interestRate, vvv'maxFundingRate);
}

tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int, int)) v) inline {
    var (v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate) = v;
    return __tact_tuple_create_10(v'name, v'enable, v'minMargin, v'maxLeverage, v'liquidationFee, v'liquidityProportion, v'tradingFeeRate, v'lpTradingFeeRate, v'interestRate, v'maxFundingRate);
}

tuple $TokenConfig$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $TokenConfig$_to_tuple($TokenConfig$_not_null(v)); 
}

((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_liquidityProportion_interestRate_maxFundingRate(slice name, int enable, int minMargin, int maxLeverage, int liquidationFee, int tradingFeeRate, int lpTradingFeeRate, int liquidityProportion, int interestRate, int maxFundingRate) inline {
    return (name, enable, minMargin, maxLeverage, liquidationFee, liquidityProportion, tradingFeeRate, lpTradingFeeRate, interestRate, maxFundingRate);
}

;;
;; Type: TokenConfigData
;; TLB: _ tokenIdNext:uint64 tokenConfig:Maybe TokenConfig{name:^string,enable:bool,minMargin:int257,maxLeverage:int257,liquidationFee:int257,liquidityProportion:int257,tradingFeeRate:int257,lpTradingFeeRate:int257,interestRate:int257,maxFundingRate:int257} = TokenConfigData
;;

(int, tuple) $TokenConfigData$_to_external(((int, tuple)) v) inline {
    var (v'tokenIdNext, v'tokenConfig) = v; 
    return (v'tokenIdNext, $TokenConfig$_to_opt_tuple(v'tokenConfig));
}

((int, tuple)) $TokenConfigData$_constructor_tokenIdNext_tokenConfig(int tokenIdNext, tuple tokenConfig) inline {
    return (tokenIdNext, tokenConfig);
}

;;
;; Type: LPPosition
;; TLB: _ positionId:uint64 liquidity:int257 bonus:int257 realizedFundingFee:int257 entryFundingFeeGrowth:int257 unlockTime:int257 = LPPosition
;;

builder $LPPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = build_0.store_int(v'liquidity, 257);
    build_0 = build_0.store_int(v'bonus, 257);
    build_0 = build_0.store_int(v'realizedFundingFee, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'entryFundingFeeGrowth, 257);
    build_1 = build_1.store_int(v'unlockTime, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LPPosition$_store_cell((int, int, int, int, int, int) v) inline {
    return $LPPosition$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int, int)) $LPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'positionId, int vvv'liquidity, int vvv'bonus, int vvv'realizedFundingFee, int vvv'entryFundingFeeGrowth, int vvv'unlockTime) = __tact_tuple_destroy_6(v);
    return (vvv'positionId, vvv'liquidity, vvv'bonus, vvv'realizedFundingFee, vvv'entryFundingFeeGrowth, vvv'unlockTime);
}

cell $LPPosition$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $LPPosition$_store_cell($LPPosition$_not_null(v));
}

(slice, ((int, int, int, int, int, int))) $LPPosition$_load(slice sc_0) inline_ref {
    var v'positionId = sc_0~load_uint(64);
    var v'liquidity = sc_0~load_int(257);
    var v'bonus = sc_0~load_int(257);
    var v'realizedFundingFee = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'entryFundingFeeGrowth = sc_1~load_int(257);
    var v'unlockTime = sc_1~load_int(257);
    return (sc_0, (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime));
}

tuple $LPPosition$_as_optional((int, int, int, int, int, int) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    return __tact_tuple_create_6(v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime);
}

tuple $LPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LPPosition$_as_optional(sc~$LPPosition$_load());
}

tuple $LPPosition$_to_tuple(((int, int, int, int, int, int)) v) inline {
    var (v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime) = v;
    return __tact_tuple_create_6(v'positionId, v'liquidity, v'bonus, v'realizedFundingFee, v'entryFundingFeeGrowth, v'unlockTime);
}

tuple $LPPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LPPosition$_to_tuple($LPPosition$_not_null(v)); 
}

((int, int, int, int, int, int)) $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(int positionId, int liquidity, int bonus, int realizedFundingFee, int entryFundingFeeGrowth, int unlockTime) inline {
    return (positionId, liquidity, bonus, realizedFundingFee, entryFundingFeeGrowth, unlockTime);
}

;;
;; Type: LPPositionData
;; TLB: _ lpPosition:Maybe LPPosition{positionId:uint64,liquidity:int257,bonus:int257,realizedFundingFee:int257,entryFundingFeeGrowth:int257,unlockTime:int257} globalLPFund:int257 globalLPLiquidity:int257 globalLPFundingFeeGrowth:int257 globalLPUnrealizedPnl:int257 = LPPositionData
;;

((tuple, int, int, int, int)) $LPPositionData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (tuple vvv'lpPosition, int vvv'globalLPFund, int vvv'globalLPLiquidity, int vvv'globalLPFundingFeeGrowth, int vvv'globalLPUnrealizedPnl) = __tact_tuple_destroy_5(v);
    return (vvv'lpPosition, vvv'globalLPFund, vvv'globalLPLiquidity, vvv'globalLPFundingFeeGrowth, vvv'globalLPUnrealizedPnl);
}

tuple $LPPositionData$_as_optional((tuple, int, int, int, int) v) inline {
    var (v'lpPosition, v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl) = v;
    return __tact_tuple_create_5(v'lpPosition, v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl);
}

tuple $LPPositionData$_to_tuple(((tuple, int, int, int, int)) v) inline {
    var (v'lpPosition, v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl) = v;
    return __tact_tuple_create_5($LPPosition$_to_opt_tuple(v'lpPosition), v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl);
}

tuple $LPPositionData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LPPositionData$_to_tuple($LPPositionData$_not_null(v)); 
}

tuple $LPPositionData$_to_opt_external(tuple v) inline {
    var loaded = $LPPositionData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((tuple, int, int, int, int)) $LPPositionData$_constructor_lpPosition_globalLPFund_globalLPLiquidity_globalLPFundingFeeGrowth_globalLPUnrealizedPnl(tuple lpPosition, int globalLPFund, int globalLPLiquidity, int globalLPFundingFeeGrowth, int globalLPUnrealizedPnl) inline {
    return (lpPosition, globalLPFund, globalLPLiquidity, globalLPFundingFeeGrowth, globalLPUnrealizedPnl);
}

;;
;; Type: AccountPerpPosition
;; TLB: _ positions:dict<address, ^DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257},shortPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257}}> = AccountPerpPosition
;;

builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline {
    var (v'positions) = v;
    build_0 = build_0.store_dict(v'positions);
    return build_0;
}

cell $AccountPerpPosition$_store_cell((cell) v) inline {
    return $AccountPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline {
    var v'positions = sc_0~load_dict();
    return (sc_0, (v'positions));
}

tuple $AccountPerpPosition$_as_optional((cell) v) inline {
    var (v'positions) = v;
    return __tact_tuple_create_1(v'positions);
}

tuple $AccountPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $AccountPerpPosition$_as_optional(sc~$AccountPerpPosition$_load());
}

_ $AccountPerpPosition$_get_positions((cell) v) inline {
    var (v'positions) = v;
    return v'positions;
}

((cell)) $AccountPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'positions) = __tact_tuple_destroy_1(v);
    return (vvv'positions);
}

((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline {
    return (positions);
}

;;
;; Type: PerpPosition
;; TLB: _ positionId:uint64 margin:int257 size:int257 entryPrice:int257 entryFundingFeeGrowth:int257 = PerpPosition
;;

builder $PerpPosition$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth) = v;
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = build_0.store_int(v'margin, 257);
    build_0 = build_0.store_int(v'size, 257);
    build_0 = build_0.store_int(v'entryPrice, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'entryFundingFeeGrowth, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline {
    var v'positionId = sc_0~load_uint(64);
    var v'margin = sc_0~load_int(257);
    var v'size = sc_0~load_int(257);
    var v'entryPrice = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'entryFundingFeeGrowth = sc_1~load_int(257);
    return (sc_0, (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth));
}

tuple $PerpPosition$_to_tuple(((int, int, int, int, int)) v) inline {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth) = v;
    return __tact_tuple_create_5(v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth);
}

((int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth) inline {
    return (positionId, margin, size, entryPrice, entryFundingFeeGrowth);
}

;;
;; Type: DirectionPerpPosition
;; TLB: _ longPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257} shortPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257} = DirectionPerpPosition
;;

builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth)) = v;
    build_0 = $PerpPosition$_store(build_0, (v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth));
    var build_1 = begin_cell();
    build_1 = $PerpPosition$_store(build_1, (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    return $DirectionPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline {
    var v'longPosition = sc_0~$PerpPosition$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shortPosition = sc_1~$PerpPosition$_load();
    return (sc_0, (v'longPosition, v'shortPosition));
}

tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth)) = v;
    return __tact_tuple_create_10(v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth);
}

tuple $DirectionPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $DirectionPerpPosition$_as_optional(sc~$DirectionPerpPosition$_load());
}

(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longPosition'positionId, int vvv'longPosition'margin, int vvv'longPosition'size, int vvv'longPosition'entryPrice, int vvv'longPosition'entryFundingFeeGrowth, int vvv'shortPosition'positionId, int vvv'shortPosition'margin, int vvv'shortPosition'size, int vvv'shortPosition'entryPrice, int vvv'shortPosition'entryFundingFeeGrowth) = __tact_tuple_destroy_10(v);
    return ((vvv'longPosition'positionId, vvv'longPosition'margin, vvv'longPosition'size, vvv'longPosition'entryPrice, vvv'longPosition'entryFundingFeeGrowth), (vvv'shortPosition'positionId, vvv'shortPosition'margin, vvv'shortPosition'size, vvv'shortPosition'entryPrice, vvv'shortPosition'entryFundingFeeGrowth));
}

tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int), (int, int, int, int, int))) v) inline {
    var (v'longPosition, v'shortPosition) = v;
    return __tact_tuple_create_2($PerpPosition$_to_tuple(v'longPosition), $PerpPosition$_to_tuple(v'shortPosition));
}

tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $DirectionPerpPosition$_to_tuple($DirectionPerpPosition$_not_null(v)); 
}

(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int) longPosition, (int, int, int, int, int) shortPosition) inline {
    return (longPosition, shortPosition);
}

;;
;; Type: GlobalLPPosition
;; TLB: _ netSize:int257 isLong:bool entryPrice:int257 unrealizedPnl:int257 = GlobalLPPosition
;;

builder $GlobalLPPosition$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl) = v;
    build_0 = build_0.store_int(v'netSize, 257);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'entryPrice, 257);
    build_0 = build_0.store_int(v'unrealizedPnl, 257);
    return build_0;
}

cell $GlobalLPPosition$_store_cell((int, int, int, int) v) inline {
    return $GlobalLPPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline {
    var v'netSize = sc_0~load_int(257);
    var v'isLong = sc_0~load_int(1);
    var v'entryPrice = sc_0~load_int(257);
    var v'unrealizedPnl = sc_0~load_int(257);
    return (sc_0, (v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl));
}

tuple $GlobalLPPosition$_as_optional((int, int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl) = v;
    return __tact_tuple_create_4(v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl);
}

tuple $GlobalLPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalLPPosition$_as_optional(sc~$GlobalLPPosition$_load());
}

((int, int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'netSize, int vvv'isLong, int vvv'entryPrice, int vvv'unrealizedPnl) = __tact_tuple_destroy_4(v);
    return (vvv'netSize, vvv'isLong, vvv'entryPrice, vvv'unrealizedPnl);
}

tuple $GlobalLPPosition$_to_tuple(((int, int, int, int)) v) inline {
    var (v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl) = v;
    return __tact_tuple_create_4(v'netSize, v'isLong, v'entryPrice, v'unrealizedPnl);
}

tuple $GlobalLPPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalLPPosition$_to_tuple($GlobalLPPosition$_not_null(v)); 
}

((int, int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(int netSize, int isLong, int entryPrice, int unrealizedPnl) inline {
    return (netSize, isLong, entryPrice, unrealizedPnl);
}

;;
;; Type: GlobalPosition
;; TLB: _ longMargin:int257 shortMargin:int257 longSize:int257 shortSize:int257 longFundingFeeGrowth:int257 shortFundingFeeGrowth:int257 longValue:int257 shortValue:int257 = GlobalPosition
;;

builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue) = v;
    build_0 = build_0.store_int(v'longMargin, 257);
    build_0 = build_0.store_int(v'shortMargin, 257);
    build_0 = build_0.store_int(v'longSize, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'shortSize, 257);
    build_1 = build_1.store_int(v'longFundingFeeGrowth, 257);
    build_1 = build_1.store_int(v'shortFundingFeeGrowth, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'longValue, 257);
    build_2 = build_2.store_int(v'shortValue, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $GlobalPosition$_store_cell((int, int, int, int, int, int, int, int) v) inline {
    return $GlobalPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref {
    var v'longMargin = sc_0~load_int(257);
    var v'shortMargin = sc_0~load_int(257);
    var v'longSize = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shortSize = sc_1~load_int(257);
    var v'longFundingFeeGrowth = sc_1~load_int(257);
    var v'shortFundingFeeGrowth = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'longValue = sc_2~load_int(257);
    var v'shortValue = sc_2~load_int(257);
    return (sc_0, (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue));
}

tuple $GlobalPosition$_as_optional((int, int, int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue) = v;
    return __tact_tuple_create_8(v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue);
}

tuple $GlobalPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalPosition$_as_optional(sc~$GlobalPosition$_load());
}

tuple $GlobalPosition$_to_tuple(((int, int, int, int, int, int, int, int)) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue) = v;
    return __tact_tuple_create_8(v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longFundingFeeGrowth, v'shortFundingFeeGrowth, v'longValue, v'shortValue);
}

((int, int, int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longMargin, int vvv'shortMargin, int vvv'longSize, int vvv'shortSize, int vvv'longFundingFeeGrowth, int vvv'shortFundingFeeGrowth, int vvv'longValue, int vvv'shortValue) = __tact_tuple_destroy_8(v);
    return (vvv'longMargin, vvv'shortMargin, vvv'longSize, vvv'shortSize, vvv'longFundingFeeGrowth, vvv'shortFundingFeeGrowth, vvv'longValue, vvv'shortValue);
}

tuple $GlobalPosition$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalPosition$_to_tuple($GlobalPosition$_not_null(v)); 
}

((int, int, int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(int longMargin, int shortMargin, int longSize, int shortSize, int longFundingFeeGrowth, int shortFundingFeeGrowth, int longValue, int shortValue) inline {
    return (longMargin, shortMargin, longSize, shortSize, longFundingFeeGrowth, shortFundingFeeGrowth, longValue, shortValue);
}

;;
;; Type: GlobalFundingRateSample
;; TLB: _ lastAdjustFundingRateTime:int257 sampleCount:int257 cumulativePremiumRate:int257 = GlobalFundingRateSample
;;

builder $GlobalFundingRateSample$_store(builder build_0, (int, int, int) v) inline {
    var (v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate) = v;
    build_0 = build_0.store_int(v'lastAdjustFundingRateTime, 257);
    build_0 = build_0.store_int(v'sampleCount, 257);
    build_0 = build_0.store_int(v'cumulativePremiumRate, 257);
    return build_0;
}

cell $GlobalFundingRateSample$_store_cell((int, int, int) v) inline {
    return $GlobalFundingRateSample$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $GlobalFundingRateSample$_load(slice sc_0) inline {
    var v'lastAdjustFundingRateTime = sc_0~load_int(257);
    var v'sampleCount = sc_0~load_int(257);
    var v'cumulativePremiumRate = sc_0~load_int(257);
    return (sc_0, (v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate));
}

tuple $GlobalFundingRateSample$_as_optional((int, int, int) v) inline {
    var (v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate) = v;
    return __tact_tuple_create_3(v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate);
}

tuple $GlobalFundingRateSample$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalFundingRateSample$_as_optional(sc~$GlobalFundingRateSample$_load());
}

tuple $GlobalFundingRateSample$_to_tuple(((int, int, int)) v) inline {
    var (v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate) = v;
    return __tact_tuple_create_3(v'lastAdjustFundingRateTime, v'sampleCount, v'cumulativePremiumRate);
}

((int, int, int)) $GlobalFundingRateSample$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'lastAdjustFundingRateTime, int vvv'sampleCount, int vvv'cumulativePremiumRate) = __tact_tuple_destroy_3(v);
    return (vvv'lastAdjustFundingRateTime, vvv'sampleCount, vvv'cumulativePremiumRate);
}

tuple $GlobalFundingRateSample$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $GlobalFundingRateSample$_to_tuple($GlobalFundingRateSample$_not_null(v)); 
}

((int, int, int)) $GlobalFundingRateSample$_constructor_lastAdjustFundingRateTime_sampleCount_cumulativePremiumRate(int lastAdjustFundingRateTime, int sampleCount, int cumulativePremiumRate) inline {
    return (lastAdjustFundingRateTime, sampleCount, cumulativePremiumRate);
}

;;
;; Type: PerpPositionData
;; TLB: _ globalPerpNetValue:int257 globalPerpSingleValue:int257 perpPosition:Maybe DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257},shortPosition:PerpPosition{positionId:uint64,margin:int257,size:int257,entryPrice:int257,entryFundingFeeGrowth:int257}} globalLPPosition:Maybe GlobalLPPosition{netSize:int257,isLong:bool,entryPrice:int257,unrealizedPnl:int257} globalPosition:Maybe GlobalPosition{longMargin:int257,shortMargin:int257,longSize:int257,shortSize:int257,longFundingFeeGrowth:int257,shortFundingFeeGrowth:int257,longValue:int257,shortValue:int257} globalFundingRateSample:Maybe GlobalFundingRateSample{lastAdjustFundingRateTime:int257,sampleCount:int257,cumulativePremiumRate:int257} = PerpPositionData
;;

((int, int, tuple, tuple, tuple, tuple)) $PerpPositionData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'globalPerpNetValue, int vvv'globalPerpSingleValue, tuple vvv'perpPosition, tuple vvv'globalLPPosition, tuple vvv'globalPosition, tuple vvv'globalFundingRateSample) = __tact_tuple_destroy_6(v);
    return (vvv'globalPerpNetValue, vvv'globalPerpSingleValue, vvv'perpPosition, vvv'globalLPPosition, vvv'globalPosition, vvv'globalFundingRateSample);
}

tuple $PerpPositionData$_as_optional((int, int, tuple, tuple, tuple, tuple) v) inline {
    var (v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPosition, v'globalLPPosition, v'globalPosition, v'globalFundingRateSample) = v;
    return __tact_tuple_create_6(v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPosition, v'globalLPPosition, v'globalPosition, v'globalFundingRateSample);
}

tuple $PerpPositionData$_to_tuple(((int, int, tuple, tuple, tuple, tuple)) v) inline {
    var (v'globalPerpNetValue, v'globalPerpSingleValue, v'perpPosition, v'globalLPPosition, v'globalPosition, v'globalFundingRateSample) = v;
    return __tact_tuple_create_6(v'globalPerpNetValue, v'globalPerpSingleValue, $DirectionPerpPosition$_to_opt_tuple(v'perpPosition), $GlobalLPPosition$_to_opt_tuple(v'globalLPPosition), $GlobalPosition$_to_opt_tuple(v'globalPosition), $GlobalFundingRateSample$_to_opt_tuple(v'globalFundingRateSample));
}

tuple $PerpPositionData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $PerpPositionData$_to_tuple($PerpPositionData$_not_null(v)); 
}

tuple $PerpPositionData$_to_opt_external(tuple v) inline {
    var loaded = $PerpPositionData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, tuple, tuple, tuple, tuple)) $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition_globalFundingRateSample(int globalPerpNetValue, int globalPerpSingleValue, tuple perpPosition, tuple globalLPPosition, tuple globalPosition, tuple globalFundingRateSample) inline {
    return (globalPerpNetValue, globalPerpSingleValue, perpPosition, globalLPPosition, globalPosition, globalFundingRateSample);
}

;;
;; Type: UpdatePriceParam
;; TLB: _ tokenId:uint64 price:int257 = UpdatePriceParam
;;

(slice, ((int, int))) $UpdatePriceParam$_load(slice sc_0) inline {
    var v'tokenId = sc_0~load_uint(64);
    var v'price = sc_0~load_int(257);
    return (sc_0, (v'tokenId, v'price));
}

tuple $UpdatePriceParam$_as_optional((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return __tact_tuple_create_2(v'tokenId, v'price);
}

tuple $UpdatePriceParam$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $UpdatePriceParam$_as_optional(sc~$UpdatePriceParam$_load());
}

_ $UpdatePriceParam$_get_tokenId((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return v'tokenId;
}

_ $UpdatePriceParam$_get_price((int, int) v) inline {
    var (v'tokenId, v'price) = v;
    return v'price;
}

((int, int)) $UpdatePriceParam$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'tokenId, int vvv'price) = __tact_tuple_destroy_2(v);
    return (vvv'tokenId, vvv'price);
}

;;
;; Type: PremiumRateSampleRange
;; TLB: _ sampleLength:uint64 samples:dict<int, ^PremiumRateSample{deviationRate:int257,premiumRate:int257}> = PremiumRateSampleRange
;;

builder $PremiumRateSampleRange$_store(builder build_0, (int, cell) v) inline {
    var (v'sampleLength, v'samples) = v;
    build_0 = build_0.store_uint(v'sampleLength, 64);
    build_0 = build_0.store_dict(v'samples);
    return build_0;
}

cell $PremiumRateSampleRange$_store_cell((int, cell) v) inline {
    return $PremiumRateSampleRange$_store(begin_cell(), v).end_cell();
}

(slice, ((int, cell))) $PremiumRateSampleRange$_load(slice sc_0) inline {
    var v'sampleLength = sc_0~load_uint(64);
    var v'samples = sc_0~load_dict();
    return (sc_0, (v'sampleLength, v'samples));
}

tuple $PremiumRateSampleRange$_as_optional((int, cell) v) inline {
    var (v'sampleLength, v'samples) = v;
    return __tact_tuple_create_2(v'sampleLength, v'samples);
}

tuple $PremiumRateSampleRange$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PremiumRateSampleRange$_as_optional(sc~$PremiumRateSampleRange$_load());
}

((int, cell)) $PremiumRateSampleRange$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'sampleLength, cell vvv'samples) = __tact_tuple_destroy_2(v);
    return (vvv'sampleLength, vvv'samples);
}

((int, cell)) $PremiumRateSampleRange$_constructor_sampleLength_samples(int sampleLength, cell samples) inline {
    return (sampleLength, samples);
}

;;
;; Type: PremiumRateSampleRangeParam
;; TLB: _ sampleId:uint64 sampleLength:uint64 samples:dict<int, ^PremiumRateSample{deviationRate:int257,premiumRate:int257}> = PremiumRateSampleRangeParam
;;

(slice, ((int, int, cell))) $PremiumRateSampleRangeParam$_load(slice sc_0) inline {
    var v'sampleId = sc_0~load_uint(64);
    var v'sampleLength = sc_0~load_uint(64);
    var v'samples = sc_0~load_dict();
    return (sc_0, (v'sampleId, v'sampleLength, v'samples));
}

tuple $PremiumRateSampleRangeParam$_as_optional((int, int, cell) v) inline {
    var (v'sampleId, v'sampleLength, v'samples) = v;
    return __tact_tuple_create_3(v'sampleId, v'sampleLength, v'samples);
}

tuple $PremiumRateSampleRangeParam$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PremiumRateSampleRangeParam$_as_optional(sc~$PremiumRateSampleRangeParam$_load());
}

((int, int, cell)) $PremiumRateSampleRangeParam$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'sampleId, int vvv'sampleLength, cell vvv'samples) = __tact_tuple_destroy_3(v);
    return (vvv'sampleId, vvv'sampleLength, vvv'samples);
}

;;
;; Type: PremiumRateSample
;; TLB: _ deviationRate:int257 premiumRate:int257 = PremiumRateSample
;;

(slice, ((int, int))) $PremiumRateSample$_load(slice sc_0) inline {
    var v'deviationRate = sc_0~load_int(257);
    var v'premiumRate = sc_0~load_int(257);
    return (sc_0, (v'deviationRate, v'premiumRate));
}

tuple $PremiumRateSample$_as_optional((int, int) v) inline {
    var (v'deviationRate, v'premiumRate) = v;
    return __tact_tuple_create_2(v'deviationRate, v'premiumRate);
}

tuple $PremiumRateSample$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PremiumRateSample$_as_optional(sc~$PremiumRateSample$_load());
}

_ $PremiumRateSample$_get_deviationRate((int, int) v) inline {
    var (v'deviationRate, v'premiumRate) = v;
    return v'deviationRate;
}

_ $PremiumRateSample$_get_premiumRate((int, int) v) inline {
    var (v'deviationRate, v'premiumRate) = v;
    return v'premiumRate;
}

((int, int)) $PremiumRateSample$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'deviationRate, int vvv'premiumRate) = __tact_tuple_destroy_2(v);
    return (vvv'deviationRate, vvv'premiumRate);
}

((int, int)) $PremiumRateSample$_constructor_deviationRate_premiumRate(int deviationRate, int premiumRate) inline {
    return (deviationRate, premiumRate);
}

;;
;; Type: PremiumRateSampleData
;; TLB: _ rangeId:uint64 sampleId:uint64 deviationRate:int257 premiumRate:int257 = PremiumRateSampleData
;;

builder $PremiumRateSampleData$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'rangeId, v'sampleId, v'deviationRate, v'premiumRate) = v;
    build_0 = build_0.store_uint(v'rangeId, 64);
    build_0 = build_0.store_uint(v'sampleId, 64);
    build_0 = build_0.store_int(v'deviationRate, 257);
    build_0 = build_0.store_int(v'premiumRate, 257);
    return build_0;
}

(slice, ((int, int, int, int))) $PremiumRateSampleData$_load(slice sc_0) inline {
    var v'rangeId = sc_0~load_uint(64);
    var v'sampleId = sc_0~load_uint(64);
    var v'deviationRate = sc_0~load_int(257);
    var v'premiumRate = sc_0~load_int(257);
    return (sc_0, (v'rangeId, v'sampleId, v'deviationRate, v'premiumRate));
}

((int, int, int, int)) $PremiumRateSampleData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'rangeId, int vvv'sampleId, int vvv'deviationRate, int vvv'premiumRate) = __tact_tuple_destroy_4(v);
    return (vvv'rangeId, vvv'sampleId, vvv'deviationRate, vvv'premiumRate);
}

tuple $PremiumRateSampleData$_as_optional((int, int, int, int) v) inline {
    var (v'rangeId, v'sampleId, v'deviationRate, v'premiumRate) = v;
    return __tact_tuple_create_4(v'rangeId, v'sampleId, v'deviationRate, v'premiumRate);
}

((int, int, int, int)) $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate(int rangeId, int sampleId, int deviationRate, int premiumRate) inline {
    return (rangeId, sampleId, deviationRate, premiumRate);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, (int, int, int, int)) v) inline {
    var (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIdNext, v'lpLockTime, v'lpBonusFactor, v'lpLiquidityFactor, v'owner, v'orderBook, v'protocolTradingFee, v'executors, v'lpPositions, v'lpPositionIndexNext, v'globalLPPositions, v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl, v'perpPositions, v'perpPositionIndexNext, v'globalPositions, v'globalPerpNetValue, v'globalPerpSingleValue, v'globalFundingRateSamples, v'prices, v'premiumRateSampleRanges, v'premiumRateSampleRangeLength, (v'prevPremiumRateSample'rangeId, v'prevPremiumRateSample'sampleId, v'prevPremiumRateSample'deviationRate, v'prevPremiumRateSample'premiumRate)) = v;
    build_0 = build_0.store_int(v'gasConsumption, 257);
    build_0 = build_0.store_int(v'minTonsForStorage, 257);
    build_0 = build_0.store_dict(v'tokenConfigs);
    build_0 = build_0.store_uint(v'tokenIdNext, 64);
    build_0 = build_0.store_int(v'lpLockTime, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'lpBonusFactor, 257);
    build_1 = build_1.store_int(v'lpLiquidityFactor, 257);
    build_1 = __tact_store_address(build_1, v'owner);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'orderBook);
    build_2 = build_2.store_int(v'protocolTradingFee, 257);
    build_2 = build_2.store_dict(v'executors);
    build_2 = build_2.store_dict(v'lpPositions);
    build_2 = build_2.store_uint(v'lpPositionIndexNext, 64);
    build_2 = build_2.store_dict(v'globalLPPositions);
    build_2 = build_2.store_int(v'globalLPFund, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'globalLPLiquidity, 257);
    build_3 = build_3.store_int(v'globalLPFundingFeeGrowth, 257);
    build_3 = build_3.store_int(v'globalLPUnrealizedPnl, 257);
    build_3 = build_3.store_dict(v'perpPositions);
    build_3 = build_3.store_uint(v'perpPositionIndexNext, 64);
    build_3 = build_3.store_dict(v'globalPositions);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'globalPerpNetValue, 257);
    build_4 = build_4.store_int(v'globalPerpSingleValue, 257);
    build_4 = build_4.store_dict(v'globalFundingRateSamples);
    build_4 = build_4.store_dict(v'prices);
    build_4 = build_4.store_dict(v'premiumRateSampleRanges);
    build_4 = build_4.store_int(v'premiumRateSampleRangeLength, 257);
    var build_5 = begin_cell();
    build_5 = $PremiumRateSampleData$_store(build_5, (v'prevPremiumRateSample'rangeId, v'prevPremiumRateSample'sampleId, v'prevPremiumRateSample'deviationRate, v'prevPremiumRateSample'premiumRate));
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, (int, int, int, int)))) $Pool$_load(slice sc_0) inline {
    var v'gasConsumption = sc_0~load_int(257);
    var v'minTonsForStorage = sc_0~load_int(257);
    var v'tokenConfigs = sc_0~load_dict();
    var v'tokenIdNext = sc_0~load_uint(64);
    var v'lpLockTime = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'lpBonusFactor = sc_1~load_int(257);
    var v'lpLiquidityFactor = sc_1~load_int(257);
    var v'owner = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'orderBook = sc_2~__tact_load_address();
    var v'protocolTradingFee = sc_2~load_int(257);
    var v'executors = sc_2~load_dict();
    var v'lpPositions = sc_2~load_dict();
    var v'lpPositionIndexNext = sc_2~load_uint(64);
    var v'globalLPPositions = sc_2~load_dict();
    var v'globalLPFund = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'globalLPLiquidity = sc_3~load_int(257);
    var v'globalLPFundingFeeGrowth = sc_3~load_int(257);
    var v'globalLPUnrealizedPnl = sc_3~load_int(257);
    var v'perpPositions = sc_3~load_dict();
    var v'perpPositionIndexNext = sc_3~load_uint(64);
    var v'globalPositions = sc_3~load_dict();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'globalPerpNetValue = sc_4~load_int(257);
    var v'globalPerpSingleValue = sc_4~load_int(257);
    var v'globalFundingRateSamples = sc_4~load_dict();
    var v'prices = sc_4~load_dict();
    var v'premiumRateSampleRanges = sc_4~load_dict();
    var v'premiumRateSampleRangeLength = sc_4~load_int(257);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'prevPremiumRateSample = sc_5~$PremiumRateSampleData$_load();
    return (sc_0, (v'gasConsumption, v'minTonsForStorage, v'tokenConfigs, v'tokenIdNext, v'lpLockTime, v'lpBonusFactor, v'lpLiquidityFactor, v'owner, v'orderBook, v'protocolTradingFee, v'executors, v'lpPositions, v'lpPositionIndexNext, v'globalLPPositions, v'globalLPFund, v'globalLPLiquidity, v'globalLPFundingFeeGrowth, v'globalLPUnrealizedPnl, v'perpPositions, v'perpPositionIndexNext, v'globalPositions, v'globalPerpNetValue, v'globalPerpSingleValue, v'globalFundingRateSamples, v'prices, v'premiumRateSampleRanges, v'premiumRateSampleRangeLength, v'prevPremiumRateSample));
}

(slice, ((int))) $Pool$init$_load(slice sc_0) inline {
    var v'deployId = sc_0~load_int(257);
    return (sc_0, (v'deployId));
}

(int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, (int, int, int, int)) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int deployId) = $sc~$Pool$init$_load();
        $sc.end_parse();
        return $Pool$_contract_init(deployId);
    }
}

() $Pool$_contract_store((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, (int, int, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}