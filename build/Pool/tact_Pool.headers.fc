;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_uint_uint
(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_uint_uint
int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline;

;; __tact_dict_min_uint_uint
(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl) inline;

;; __tact_dict_next_uint_uint
(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_uint_cell
cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $JettonMint$_store
builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref;

;; $JettonMint$_store_cell
cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline;

;; $UpdateConfig$_load
(slice, ((slice, slice, slice, int, int, int, int, int, int))) $UpdateConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_store
builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int, int, int) v) inline_ref;

;; $TokenConfig$_store_cell
cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load
(slice, ((slice, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_as_optional
tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load_opt
tuple $TokenConfig$_load_opt(cell cl) inline;

;; $UpdateTokenConfig$_load
(slice, ((int, (slice, int, int, int, int, int, int, int, int)))) $UpdateTokenConfig$_load(slice sc_0) inline;

;; $ClaimProtocolFee$_load
(slice, ((int, slice))) $ClaimProtocolFee$_load(slice sc_0) inline;

;; $SendProtocolFee$_store
builder $SendProtocolFee$_store(builder build_0, (int, slice, int) v) inline;

;; $SendProtocolFee$_store_cell
cell $SendProtocolFee$_store_cell((int, slice, int) v) inline;

;; $UpdateLiquidityPool$_load
(slice, ((int, int, slice, int, int, cell, int, int))) $UpdateLiquidityPool$_load(slice sc_0) inline_ref;

;; $LiquidityPoolUpdated$_store
builder $LiquidityPoolUpdated$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $LiquidityPoolUpdated$_store_cell
cell $LiquidityPoolUpdated$_store_cell((int, int, int, int, int, int) v) inline;

;; $UpdatePerpPosition$_load
(slice, ((int, int, int, slice, int, int, int, int, int, int, int, int, int, int))) $UpdatePerpPosition$_load(slice sc_0) inline_ref;

;; $PerpPositionUpdated$_store
builder $PerpPositionUpdated$_store(builder build_0, (int, int, int) v) inline;

;; $PerpPositionUpdated$_store_cell
cell $PerpPositionUpdated$_store_cell((int, int, int) v) inline;

;; $LiquidityIncreasedEvent$_store
builder $LiquidityIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int) v) inline_ref;

;; $LiquidityIncreasedEvent$_store_cell
cell $LiquidityIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int) v) inline;

;; $LiquidityDecreasedEvent$_store
builder $LiquidityDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int) v) inline_ref;

;; $LiquidityDecreasedEvent$_store_cell
cell $LiquidityDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionIncreasedEvent$_store
builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionIncreasedEvent$_store_cell
cell $PerpPositionIncreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionDecreasedEvent$_store
builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionDecreasedEvent$_store_cell
cell $PerpPositionDecreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $AccountPerpPosition$_store
builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline;

;; $AccountPerpPosition$_store_cell
cell $AccountPerpPosition$_store_cell((cell) v) inline;

;; $AccountPerpPosition$_load
(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline;

;; $AccountPerpPosition$_as_optional
tuple $AccountPerpPosition$_as_optional((cell) v) inline;

;; $AccountPerpPosition$_load_opt
tuple $AccountPerpPosition$_load_opt(cell cl) inline;

;; $PerpPosition$_store
builder $PerpPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $PerpPosition$_load
(slice, ((int, int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline_ref;

;; $DirectionPerpPosition$_store
builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_store_cell
cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load
(slice, (((int, int, int, int, int, int), (int, int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_as_optional
tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load_opt
tuple $DirectionPerpPosition$_load_opt(cell cl) inline;

;; $GlobalLPPosition$_store
builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline;

;; $GlobalLPPosition$_store_cell
cell $GlobalLPPosition$_store_cell((int, int, int) v) inline;

;; $GlobalLPPosition$_load
(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_as_optional
tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline;

;; $GlobalLPPosition$_load_opt
tuple $GlobalLPPosition$_load_opt(cell cl) inline;

;; $GlobalPosition$_store
builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $GlobalPosition$_store_cell
cell $GlobalPosition$_store_cell((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load
(slice, ((int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref;

;; $GlobalPosition$_as_optional
tuple $GlobalPosition$_as_optional((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load_opt
tuple $GlobalPosition$_load_opt(cell cl) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) v) inline;

;; $Pool$_load
(slice, ((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $ConfigData$_to_external
(int, int, int, int, int, slice, slice, slice) $ConfigData$_to_external(((int, int, int, int, int, slice, slice, slice)) v) inline;

;; $TokenConfig$_not_null
((slice, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline;

;; $TokenConfig$_to_tuple
tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int)) v) inline;

;; $TokenConfig$_to_opt_tuple
tuple $TokenConfig$_to_opt_tuple(tuple v) inline;

;; $TokenConfig$_to_opt_external
tuple $TokenConfig$_to_opt_external(tuple v) inline;

;; $GlobalPoolData$_to_external
(int, int, int, int, int, int, int, int) $GlobalPoolData$_to_external(((int, int, int, int, int, int, int, int)) v) inline;

;; $AccountPerpPosition$_get_positions
_ $AccountPerpPosition$_get_positions((cell) v) inline;

;; $AccountPerpPosition$_not_null
((cell)) $AccountPerpPosition$_not_null(tuple v) inline;

;; $DirectionPerpPosition$_not_null
(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline;

;; $PerpPosition$_to_tuple
tuple $PerpPosition$_to_tuple(((int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_to_tuple
tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int, int), (int, int, int, int, int, int))) v) inline;

;; $DirectionPerpPosition$_to_opt_tuple
tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline;

;; $GlobalLPPosition$_not_null
((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline;

;; $GlobalLPPosition$_to_tuple
tuple $GlobalLPPosition$_to_tuple(((int, int, int)) v) inline;

;; $GlobalLPPosition$_to_opt_tuple
tuple $GlobalLPPosition$_to_opt_tuple(tuple v) inline;

;; $GlobalPosition$_to_tuple
tuple $GlobalPosition$_to_tuple(((int, int, int, int, int, int)) v) inline;

;; $GlobalPosition$_not_null
((int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline;

;; $GlobalPosition$_to_opt_tuple
tuple $GlobalPosition$_to_opt_tuple(tuple v) inline;

;; $PerpPositionData$_to_external
(int, int, tuple, tuple, tuple) $PerpPositionData$_to_external(((int, int, tuple, tuple, tuple)) v) inline;

;; $Pool$init$_load
(slice, ((int))) $Pool$init$_load(slice sc_0) inline;

;; $Pool$_contract_init
(slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $Pool$_contract_init(int $deployId) impure inline_ref;

;; $Pool$_contract_load
(slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $ConfigData$_constructor_lpGasConsumption_perpGasConsumption_minTonsForStorage_gasForMintTlp_maxLpNetCap_tlpJetton_orderBook_claimExecutor
((int, int, int, int, int, slice, slice, slice)) $ConfigData$_constructor_lpGasConsumption_perpGasConsumption_minTonsForStorage_gasForMintTlp_maxLpNetCap_tlpJetton_orderBook_claimExecutor(int lpGasConsumption, int perpGasConsumption, int minTonsForStorage, int gasForMintTlp, int maxLpNetCap, slice tlpJetton, slice orderBook, slice claimExecutor) inline;

;; $Pool$_fun_configData
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, int, int, int, slice, slice, slice)) $Pool$_fun_configData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_tokenConfig
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_tokenConfig((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref;

;; $Pool$_fun_priceData
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), int) $Pool$_fun_priceData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref;

;; $Pool$_fun_exceedGas
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), int) $Pool$_fun_exceedGas((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload
((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice origin, slice receiver, int amount, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $LiquidityPoolUpdated$_constructor_isIncrease_orderId_tlpPrice_tlpDelta_jettonDelta_trxId
((int, int, int, int, int, int)) $LiquidityPoolUpdated$_constructor_isIncrease_orderId_tlpPrice_tlpDelta_jettonDelta_trxId(int isIncrease, int orderId, int tlpPrice, int tlpDelta, int jettonDelta, int trxId) inline;

;; $LiquidityIncreasedEvent$_constructor_trxId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth
((int, int, slice, int, int, int, int, int, int, int)) $LiquidityIncreasedEvent$_constructor_trxId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int trxId, int opType, slice account, int jettonDelta, int tlpPrice, int tlpDelta, int tlpSupply, int lpFundAfter, int entryLpFundingFeeGrowth, int entryRolloverFeeGrowth) inline;

;; $Pool$_fun_increaseLiquidity
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increaseLiquidity((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $jettonDelta, int $lpFundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref;

;; $LiquidityDecreasedEvent$_constructor_trxId_opType_account_tlpDelta_jettonDelta_tlpPrice_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth
((int, int, slice, int, int, int, int, int, int, int)) $LiquidityDecreasedEvent$_constructor_trxId_opType_account_tlpDelta_jettonDelta_tlpPrice_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int trxId, int opType, slice account, int tlpDelta, int jettonDelta, int tlpPrice, int tlpSupply, int lpFundAfter, int entryLpFundingFeeGrowth, int entryRolloverFeeGrowth) inline;

;; $Pool$_fun_decreaseLiquidity
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_decreaseLiquidity((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $tlpDelta, int $lpFundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref;

;; $GlobalPoolData$_constructor_tlpSupply_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth_globalPerpNetValue_globalPerpSingleValue
((int, int, int, int, int, int, int, int)) $GlobalPoolData$_constructor_tlpSupply_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth_globalPerpNetValue_globalPerpSingleValue(int tlpSupply, int protocolTradingFee, int globalLPFund, int globalLPUnrealizedPnl, int globalLpFundingFeeGrowth, int globalRolloverFeeGrowth, int globalPerpNetValue, int globalPerpSingleValue) inline;

;; $Pool$_fun_globalPoolData
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, int, int, int, int, int, int)) $Pool$_fun_globalPoolData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $AccountPerpPosition$_constructor_positions
((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline;

;; $DirectionPerpPosition$_constructor_longPosition_shortPosition
(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int, int) longPosition, (int, int, int, int, int, int) shortPosition) inline;

;; $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth
((int, int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth, int entryRolloverFeeGrowth) inline;

;; $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue
((int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(int longMargin, int shortMargin, int longSize, int shortSize, int longValue, int shortValue) inline;

;; $GlobalLPPosition$_constructor_netSize_isLong_entryPrice
((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int netSize, int isLong, int entryPrice) inline;

;; $PerpPositionUpdated$_constructor_orderId_payout_trxId
((int, int, int)) $PerpPositionUpdated$_constructor_orderId_payout_trxId(int orderId, int payout, int trxId) inline;

;; $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl
((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int trxId, int orderId, int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int rolloverFee, int entryFundingFeeGrowthAfter, int entryRolloverFeeGrowthAfter, int globalLongMarginAfter, int globalShortMarginAfter, int globalLongSizeAfter, int globalShortSizeAfter, int lpNetSizeAfter, int lpIsLong, int lpEntryPriceAfter, int lpFundAfter, int lpTradingFee, int lpRealizedPnl) inline;

;; $Pool$_fun_increasePerpPosition
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increasePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref;

;; $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl
((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int trxId, int orderId, int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int realizedPnLDelta, int tradingFee, int fundingFee, int rolloverFee, int payout, int entryFundingFeeGrowthAfter, int entryRolloverFeeGrowthAfter, int globalLongMarginAfter, int globalShortMarginAfter, int globalLongSizeAfter, int globalShortSizeAfter, int lpNetSizeAfter, int lpIsLong, int lpEntryPriceAfter, int lpFundAfter, int lpTradingFee, int lpRealizedPnl) inline;

;; $Pool$_fun_decreasePerpPosition
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_decreasePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref;

;; $Pool$_fun_liquidatePerpPosition
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_liquidatePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $tokenId, int $isLong, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref;

;; $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition
((int, int, tuple, tuple, tuple)) $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition(int globalPerpNetValue, int globalPerpSingleValue, tuple perpPosition, tuple globalLPPosition, tuple globalPosition) inline;

;; $Pool$_fun_perpPosition
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, tuple, tuple, tuple)) $Pool$_fun_perpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId, slice $account) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Pool$_fun_forward
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_forward((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_reply
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_reply((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $Pool$_fun_notify
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_notify((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $Pool$_fun_requireOwner
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_requireOwner((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_owner
((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), slice) $Pool$_fun_owner((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $SendProtocolFee$_constructor_trxId_feeReceiver_amount
((int, slice, int)) $SendProtocolFee$_constructor_trxId_feeReceiver_amount(int trxId, slice feeReceiver, int amount) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
