;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UpdateConfig$_load
(slice, ((int, int, int, int, int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline_ref;

;; $UpdateTokenConfig$_load
(slice, ((int, slice, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref;

;; $UpdateRBFPosition$_load
(slice, ((int, int, slice, int, int))) $UpdateRBFPosition$_load(slice sc_0) inline;

;; $UpdateRBFPositionSuccess$_store
builder $UpdateRBFPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdateRBFPositionSuccess$_store_cell
cell $UpdateRBFPositionSuccess$_store_cell((int, int, int) v) inline;

;; $CancelIncreasePerpPositionMarketOrder$_load
(slice, ((int, int))) $CancelIncreasePerpPositionMarketOrder$_load(slice sc_0) inline;

;; $ExecuteIncreasePerpPositionMarketOrder$_load
(slice, ((int, int))) $ExecuteIncreasePerpPositionMarketOrder$_load(slice sc_0) inline;

;; $RBFPositionIncreasedEvent$_store
builder $RBFPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int) v) inline_ref;

;; $RBFPositionIncreasedEvent$_store_cell
cell $RBFPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int) v) inline;

;; $RBFPositionDecreasedEvent$_store
builder $RBFPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int) v) inline_ref;

;; $RBFPositionDecreasedEvent$_store_cell
cell $RBFPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int) v) inline;

;; $GlobalRBFChangedEvent$_store
builder $GlobalRBFChangedEvent$_store(builder build_0, (int, int, int, int) v) inline;

;; $GlobalRBFChangedEvent$_store_cell
cell $GlobalRBFChangedEvent$_store_cell((int, int, int, int) v) inline;

;; $TokenConfig$_load
(slice, ((slice, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_as_optional
tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load_opt
tuple $TokenConfig$_load_opt(cell cl) inline;

;; $RBFPosition$_store
builder $RBFPosition$_store(builder build_0, (int, int, int, int) v) inline;

;; $RBFPosition$_store_cell
cell $RBFPosition$_store_cell((int, int, int, int) v) inline;

;; $RBFPosition$_not_null
((int, int, int, int)) $RBFPosition$_not_null(tuple v) inline;

;; $RBFPosition$_store_opt
cell $RBFPosition$_store_opt(tuple v) inline;

;; $RBFPosition$_load
(slice, ((int, int, int, int))) $RBFPosition$_load(slice sc_0) inline;

;; $RBFPosition$_as_optional
tuple $RBFPosition$_as_optional((int, int, int, int) v) inline;

;; $RBFPosition$_load_opt
tuple $RBFPosition$_load_opt(cell cl) inline;

;; $GlobalRBFPosition$_store
builder $GlobalRBFPosition$_store(builder build_0, (int, int) v) inline;

;; $GlobalRBFPosition$_load
(slice, ((int, int))) $GlobalRBFPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_load
(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_as_optional
tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline;

;; $GlobalLPPosition$_load_opt
tuple $GlobalLPPosition$_load_opt(cell cl) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) v) inline;

;; $Pool$_load
(slice, ((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $ConfigData$_to_external
(int, int, int, int, int, int, slice) $ConfigData$_to_external(((int, int, int, int, int, int, slice)) v) inline;

;; $TokenConfig$_get_enable
_ $TokenConfig$_get_enable((slice, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_not_null
((slice, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline;

;; $TokenConfig$_to_tuple
tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int)) v) inline;

;; $TokenConfig$_to_opt_tuple
tuple $TokenConfig$_to_opt_tuple(tuple v) inline;

;; $TokenConfig$_to_opt_external
tuple $TokenConfig$_to_opt_external(tuple v) inline;

;; $RBFPosition$_to_tuple
tuple $RBFPosition$_to_tuple(((int, int, int, int)) v) inline;

;; $RBFPosition$_to_opt_tuple
tuple $RBFPosition$_to_opt_tuple(tuple v) inline;

;; $RBFPosition$_to_opt_external
tuple $RBFPosition$_to_opt_external(tuple v) inline;

;; $GlobalLPPosition$_not_null
((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline;

;; $GlobalRBFPosition$_constructor_riskBufferFund_liquidity
((int, int)) $GlobalRBFPosition$_constructor_riskBufferFund_liquidity(int riskBufferFund, int liquidity) inline;

;; $Pool$_contract_init
(int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $Pool$_contract_init() impure inline_ref;

;; $Pool$_contract_load
(int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $ConfigData$_constructor_rbfLockTime_bonusFactor_minLPMargin_maxLPLeverage_lpLiquidationFee_lpMaxRiskRate_orderBook
((int, int, int, int, int, int, slice)) $ConfigData$_constructor_rbfLockTime_bonusFactor_minLPMargin_maxLPLeverage_lpLiquidationFee_lpMaxRiskRate_orderBook(int rbfLockTime, int bonusFactor, int minLPMargin, int maxLPLeverage, int lpLiquidationFee, int lpMaxRiskRate, slice orderBook) inline;

;; $Pool$_fun_configData
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), (int, int, int, int, int, int, slice)) $Pool$_fun_configData((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_tokenConfig
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), tuple) $Pool$_fun_tokenConfig((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref;

;; $RBFPosition$_constructor_positionId_liquidity_bonus_unlockTime
((int, int, int, int)) $RBFPosition$_constructor_positionId_liquidity_bonus_unlockTime(int positionId, int liquidity, int bonus, int unlockTime) inline;

;; $RBFPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter
((int, slice, int, int, int, int, int)) $RBFPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter) inline;

;; $GlobalRBFChangedEvent$_constructor_riskBufferFundAfter_liquidityAfter_tradingFee_liquidation
((int, int, int, int)) $GlobalRBFChangedEvent$_constructor_riskBufferFundAfter_liquidityAfter_tradingFee_liquidation(int riskBufferFundAfter, int liquidityAfter, int tradingFee, int liquidation) inline;

;; $Pool$_fun_tokenEnabled
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), int) $Pool$_fun_tokenEnabled((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, int $tokenIndex) impure inline_ref;

;; $Pool$_fun_calculateUnrealizedPnL
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), int) $Pool$_fun_calculateUnrealizedPnL((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, int $isLong, int $size, int $entryPrice, int $price) impure inline_ref;

;; $Pool$_fun_calculateTotalGlobalUnrealizedPnl
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), int) $Pool$_fun_calculateTotalGlobalUnrealizedPnl((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_increasePosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), ()) $Pool$_fun_increasePosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, slice $account, int $liquidityDelta) impure inline_ref;

;; $RBFPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_receive
((int, slice, int, int, int, int, int)) $RBFPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_receive(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int receive) inline;

;; $Pool$_fun_decreasePosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), int) $Pool$_fun_decreasePosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, slice $account, int $liquidityDelta) impure inline_ref;

;; $Pool$_fun_rbfPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), tuple) $Pool$_fun_rbfPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, slice $account) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Pool$_fun_forward
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), ()) $Pool$_fun_forward((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_notify
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), ()) $Pool$_fun_notify((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $Pool$_fun_requireOwner
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), ()) $Pool$_fun_requireOwner((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_owner
((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell), slice) $Pool$_fun_owner((int, int, cell, int, int, int, int, int, int, int, slice, slice, (int, int), cell, int, int, cell, cell, int, int, int, cell, int, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $TokenConfig$_constructor_name_enable_minMarginPerPosition_maxLeveragePerPosition_liquidationFeeRatePerPosition_liquidationExecutionFee_interestRate_maxFundingRate
((slice, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMarginPerPosition_maxLeveragePerPosition_liquidationFeeRatePerPosition_liquidationExecutionFee_interestRate_maxFundingRate(slice name, int enable, int minMarginPerPosition, int maxLeveragePerPosition, int liquidationFeeRatePerPosition, int liquidationExecutionFee, int interestRate, int maxFundingRate) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $UpdateRBFPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdateRBFPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
