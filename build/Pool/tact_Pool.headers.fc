;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UpdateConfig$_load
(slice, ((int, int, int, int, int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline_ref;

;; $UpdateTokenConfig$_load
(slice, ((int, slice, int, int, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref;

;; $UpdateRBFPosition$_load
(slice, ((int, int, slice, int, int, int, cell))) $UpdateRBFPosition$_load(slice sc_0) inline_ref;

;; $UpdateRBFPositionSuccess$_store
builder $UpdateRBFPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdateRBFPositionSuccess$_store_cell
cell $UpdateRBFPositionSuccess$_store_cell((int, int, int) v) inline;

;; $UpdateLPPosition$_load
(slice, ((int, int, slice, int, int, int, int, cell))) $UpdateLPPosition$_load(slice sc_0) inline_ref;

;; $UpdateLPPositionSuccess$_store
builder $UpdateLPPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdateLPPositionSuccess$_store_cell
cell $UpdateLPPositionSuccess$_store_cell((int, int, int) v) inline;

;; $UpdatePerpPosition$_load
(slice, ((int, int, int, slice, int, int, int, int, int, int, int, cell))) $UpdatePerpPosition$_load(slice sc_0) inline_ref;

;; $UpdatePerpPositionSuccess$_store
builder $UpdatePerpPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdatePerpPositionSuccess$_store_cell
cell $UpdatePerpPositionSuccess$_store_cell((int, int, int) v) inline;

;; $RBFPositionIncreasedEvent$_store
builder $RBFPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int) v) inline_ref;

;; $RBFPositionIncreasedEvent$_store_cell
cell $RBFPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int, int) v) inline;

;; $RBFPositionDecreasedEvent$_store
builder $RBFPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int) v) inline_ref;

;; $RBFPositionDecreasedEvent$_store_cell
cell $RBFPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int, int) v) inline;

;; $GlobalRBFChangedEvent$_store
builder $GlobalRBFChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $GlobalRBFChangedEvent$_store_cell
cell $GlobalRBFChangedEvent$_store_cell((int, int, int, int, int) v) inline;

;; $LPPositionIncreasedEvent$_store
builder $LPPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int) v) inline_ref;

;; $LPPositionIncreasedEvent$_store_cell
cell $LPPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int) v) inline;

;; $LPPositionDecreasedEvent$_store
builder $LPPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LPPositionDecreasedEvent$_store_cell
cell $LPPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $LPPositionLiquidatedEvent$_store
builder $LPPositionLiquidatedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int) v) inline_ref;

;; $LPPositionLiquidatedEvent$_store_cell
cell $LPPositionLiquidatedEvent$_store_cell((int, slice, int, int, int, int, int, int) v) inline;

;; $GlobalLPLiquidityChangedEvent$_store
builder $GlobalLPLiquidityChangedEvent$_store(builder build_0, (int, int, int) v) inline;

;; $GlobalLPLiquidityChangedEvent$_store_cell
cell $GlobalLPLiquidityChangedEvent$_store_cell((int, int, int) v) inline;

;; $GlobalLPPositionChangedEvent$_store
builder $GlobalLPPositionChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $GlobalLPPositionChangedEvent$_store_cell
cell $GlobalLPPositionChangedEvent$_store_cell((int, int, int, int, int) v) inline;

;; $PerpPositionIncreasedEvent$_store
builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionIncreasedEvent$_store_cell
cell $PerpPositionIncreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionDecreasedEvent$_store
builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionDecreasedEvent$_store_cell
cell $PerpPositionDecreasedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionLiquidatedEvent$_store
builder $PerpPositionLiquidatedEvent$_store(builder build_0, (int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionLiquidatedEvent$_store_cell
cell $PerpPositionLiquidatedEvent$_store_cell((int, slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $UpdatePriceEvent$_store
builder $UpdatePriceEvent$_store(builder build_0, (int, cell) v) inline;

;; $UpdatePriceEvent$_store_cell
cell $UpdatePriceEvent$_store_cell((int, cell) v) inline;

;; $TokenConfig$_load
(slice, ((slice, int, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_as_optional
tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load_opt
tuple $TokenConfig$_load_opt(cell cl) inline;

;; $RBFPosition$_store
builder $RBFPosition$_store(builder build_0, (int, int, int, int) v) inline;

;; $RBFPosition$_store_cell
cell $RBFPosition$_store_cell((int, int, int, int) v) inline;

;; $RBFPosition$_not_null
((int, int, int, int)) $RBFPosition$_not_null(tuple v) inline;

;; $RBFPosition$_store_opt
cell $RBFPosition$_store_opt(tuple v) inline;

;; $RBFPosition$_load
(slice, ((int, int, int, int))) $RBFPosition$_load(slice sc_0) inline;

;; $RBFPosition$_as_optional
tuple $RBFPosition$_as_optional((int, int, int, int) v) inline;

;; $RBFPosition$_load_opt
tuple $RBFPosition$_load_opt(cell cl) inline;

;; $GlobalRBFPosition$_store
builder $GlobalRBFPosition$_store(builder build_0, (int, int) v) inline;

;; $GlobalRBFPosition$_load
(slice, ((int, int))) $GlobalRBFPosition$_load(slice sc_0) inline;

;; $LPPosition$_store
builder $LPPosition$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $LPPosition$_store_cell
cell $LPPosition$_store_cell((int, int, int, int, int) v) inline;

;; $LPPosition$_not_null
((int, int, int, int, int)) $LPPosition$_not_null(tuple v) inline;

;; $LPPosition$_store_opt
cell $LPPosition$_store_opt(tuple v) inline;

;; $LPPosition$_load
(slice, ((int, int, int, int, int))) $LPPosition$_load(slice sc_0) inline;

;; $LPPosition$_as_optional
tuple $LPPosition$_as_optional((int, int, int, int, int) v) inline;

;; $LPPosition$_load_opt
tuple $LPPosition$_load_opt(cell cl) inline;

;; $GlobalLPLiquidity$_store
builder $GlobalLPLiquidity$_store(builder build_0, (int, int, int, int) v) inline;

;; $GlobalLPLiquidity$_load
(slice, ((int, int, int, int))) $GlobalLPLiquidity$_load(slice sc_0) inline;

;; $GlobalLPPosition$_store
builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline;

;; $GlobalLPPosition$_store_cell
cell $GlobalLPPosition$_store_cell((int, int, int) v) inline;

;; $GlobalLPPosition$_load
(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_as_optional
tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline;

;; $GlobalLPPosition$_load_opt
tuple $GlobalLPPosition$_load_opt(cell cl) inline;

;; $AccountPerpPosition$_store
builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline;

;; $AccountPerpPosition$_store_cell
cell $AccountPerpPosition$_store_cell((cell) v) inline;

;; $AccountPerpPosition$_load
(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline;

;; $AccountPerpPosition$_as_optional
tuple $AccountPerpPosition$_as_optional((cell) v) inline;

;; $AccountPerpPosition$_load_opt
tuple $AccountPerpPosition$_load_opt(cell cl) inline;

;; $PerpPosition$_store
builder $PerpPosition$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $PerpPosition$_load
(slice, ((int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_store
builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_store_cell
cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load
(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_as_optional
tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load_opt
tuple $DirectionPerpPosition$_load_opt(cell cl) inline;

;; $PriceData$_store
builder $PriceData$_store(builder build_0, (int) v) inline;

;; $PriceData$_store_cell
cell $PriceData$_store_cell((int) v) inline;

;; $PriceData$_load
(slice, ((int))) $PriceData$_load(slice sc_0) inline;

;; $PriceData$_as_optional
tuple $PriceData$_as_optional((int) v) inline;

;; $PriceData$_load_opt
tuple $PriceData$_load_opt(cell cl) inline;

;; $UpdatePrice$_load
(slice, ((int, int))) $UpdatePrice$_load(slice sc_0) inline;

;; $UpdatePrice$_as_optional
tuple $UpdatePrice$_as_optional((int, int) v) inline;

;; $UpdatePrice$_load_opt
tuple $UpdatePrice$_load_opt(cell cl) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) v) inline;

;; $Pool$_load
(slice, ((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $ConfigData$_to_external
(int, int, int, int, int, int, slice) $ConfigData$_to_external(((int, int, int, int, int, int, slice)) v) inline;

;; $TokenConfig$_get_enable
_ $TokenConfig$_get_enable((slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_not_null
((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline;

;; $TokenConfig$_to_tuple
tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int, int)) v) inline;

;; $TokenConfig$_to_opt_tuple
tuple $TokenConfig$_to_opt_tuple(tuple v) inline;

;; $TokenConfig$_to_opt_external
tuple $TokenConfig$_to_opt_external(tuple v) inline;

;; $RBFPosition$_to_tuple
tuple $RBFPosition$_to_tuple(((int, int, int, int)) v) inline;

;; $RBFPosition$_to_opt_tuple
tuple $RBFPosition$_to_opt_tuple(tuple v) inline;

;; $RBFPosition$_to_opt_external
tuple $RBFPosition$_to_opt_external(tuple v) inline;

;; $LPPosition$_to_tuple
tuple $LPPosition$_to_tuple(((int, int, int, int, int)) v) inline;

;; $LPPosition$_to_opt_tuple
tuple $LPPosition$_to_opt_tuple(tuple v) inline;

;; $LPPosition$_to_opt_external
tuple $LPPosition$_to_opt_external(tuple v) inline;

;; $GlobalLPPosition$_not_null
((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline;

;; $AccountPerpPosition$_not_null
((cell)) $AccountPerpPosition$_not_null(tuple v) inline;

;; $DirectionPerpPosition$_not_null
(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline;

;; $PerpPosition$_to_tuple
tuple $PerpPosition$_to_tuple(((int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_to_tuple
tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int), (int, int, int, int, int))) v) inline;

;; $DirectionPerpPosition$_to_opt_tuple
tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline;

;; $DirectionPerpPosition$_to_opt_external
tuple $DirectionPerpPosition$_to_opt_external(tuple v) inline;

;; $PriceData$_get_price
_ $PriceData$_get_price((int) v) inline;

;; $PriceData$_not_null
((int)) $PriceData$_not_null(tuple v) inline;

;; $PriceData$_to_tuple
tuple $PriceData$_to_tuple(((int)) v) inline;

;; $PriceData$_to_opt_tuple
tuple $PriceData$_to_opt_tuple(tuple v) inline;

;; $PriceData$_to_opt_external
tuple $PriceData$_to_opt_external(tuple v) inline;

;; $UpdatePrice$_get_tokenId
_ $UpdatePrice$_get_tokenId((int, int) v) inline;

;; $UpdatePrice$_get_price
_ $UpdatePrice$_get_price((int, int) v) inline;

;; $UpdatePrice$_not_null
((int, int)) $UpdatePrice$_not_null(tuple v) inline;

;; $Pool$init$_load
(slice, ((int))) $Pool$init$_load(slice sc_0) inline;

;; $GlobalRBFPosition$_constructor_riskBufferFund_liquidity
((int, int)) $GlobalRBFPosition$_constructor_riskBufferFund_liquidity(int riskBufferFund, int liquidity) inline;

;; $GlobalLPLiquidity$_constructor_margin_liquidity_fundingFeeGrowth_tradingFeeGrowth
((int, int, int, int)) $GlobalLPLiquidity$_constructor_margin_liquidity_fundingFeeGrowth_tradingFeeGrowth(int margin, int liquidity, int fundingFeeGrowth, int tradingFeeGrowth) inline;

;; $Pool$_contract_init
(int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $Pool$_contract_init(int $deployId) impure inline_ref;

;; $Pool$_contract_load
(int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $ConfigData$_constructor_rbfLockTime_bonusFactor_minLPMargin_maxLPLeverage_lpLiquidationFee_lpMaxRiskRate_orderBook
((int, int, int, int, int, int, slice)) $ConfigData$_constructor_rbfLockTime_bonusFactor_minLPMargin_maxLPLeverage_lpLiquidationFee_lpMaxRiskRate_orderBook(int rbfLockTime, int bonusFactor, int minLPMargin, int maxLPLeverage, int lpLiquidationFee, int lpMaxRiskRate, slice orderBook) inline;

;; $Pool$_fun_configData
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), (int, int, int, int, int, int, slice)) $Pool$_fun_configData((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self) impure inline_ref;

;; $Pool$_fun_tokenConfig
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), tuple) $Pool$_fun_tokenConfig((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $tokenId) impure inline_ref;

;; $Pool$_fun_priceData
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), tuple) $Pool$_fun_priceData((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $tokenId) impure inline_ref;

;; $RBFPosition$_constructor_positionId_liquidity_bonus_unlockTime
((int, int, int, int)) $RBFPosition$_constructor_positionId_liquidity_bonus_unlockTime(int positionId, int liquidity, int bonus, int unlockTime) inline;

;; $RBFPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_trxId
((int, slice, int, int, int, int, int, int)) $RBFPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_trxId(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter, int trxId) inline;

;; $GlobalRBFChangedEvent$_constructor_riskBufferFundAfter_liquidityAfter_tradingFee_liquidation_trxId
((int, int, int, int, int)) $GlobalRBFChangedEvent$_constructor_riskBufferFundAfter_liquidityAfter_tradingFee_liquidation_trxId(int riskBufferFundAfter, int liquidityAfter, int tradingFee, int liquidation, int trxId) inline;

;; $Pool$_fun_tokenEnabled
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_tokenEnabled((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $tokenIndex) impure inline_ref;

;; $Pool$_fun_getPrice
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_getPrice((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $tokenId) impure inline_ref;

;; $Pool$_fun_calculateUnrealizedPnL
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_calculateUnrealizedPnL((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $isLong, int $size, int $entryPrice, int $price) impure inline_ref;

;; $Pool$_fun_calculateTotalGlobalUnrealizedPnl
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_calculateTotalGlobalUnrealizedPnl((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self) impure inline_ref;

;; $Pool$_fun_increaseRBFPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_increaseRBFPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref;

;; $RBFPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_receive_trxId
((int, slice, int, int, int, int, int, int)) $RBFPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_receive_trxId(int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int receive, int trxId) inline;

;; $Pool$_fun_decreaseRBFPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_decreaseRBFPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref;

;; $Pool$_fun_rbfPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), tuple) $Pool$_fun_rbfPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account) impure inline_ref;

;; $LPPosition$_constructor_positionId_margin_liquidity_entryFundingFeeGrowth_entryTradingFeeGrowth
((int, int, int, int, int)) $LPPosition$_constructor_positionId_margin_liquidity_entryFundingFeeGrowth_entryTradingFeeGrowth(int positionId, int margin, int liquidity, int entryFundingFeeGrowth, int entryTradingFeeGrowth) inline;

;; $LPPositionIncreasedEvent$_constructor_positionId_account_marginDelta_marginAfter_liquidityDelta_liquidityAfter_tradingFee_fundingFee_trxId
((int, slice, int, int, int, int, int, int, int)) $LPPositionIncreasedEvent$_constructor_positionId_account_marginDelta_marginAfter_liquidityDelta_liquidityAfter_tradingFee_fundingFee_trxId(int positionId, slice account, int marginDelta, int marginAfter, int liquidityDelta, int liquidityAfter, int tradingFee, int fundingFee, int trxId) inline;

;; $GlobalLPLiquidityChangedEvent$_constructor_marginAfter_liquidityAfter_trxId
((int, int, int)) $GlobalLPLiquidityChangedEvent$_constructor_marginAfter_liquidityAfter_trxId(int marginAfter, int liquidityAfter, int trxId) inline;

;; $Pool$_fun_increaseLPPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_increaseLPPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account, int $marginDelta, int $liquidityDelta, int $trxId) impure inline_ref;

;; $LPPositionLiquidatedEvent$_constructor_positionId_account_margin_liquidity_tradingFee_fundingFee_liquidationFee_trxId
((int, slice, int, int, int, int, int, int)) $LPPositionLiquidatedEvent$_constructor_positionId_account_margin_liquidity_tradingFee_fundingFee_liquidationFee_trxId(int positionId, slice account, int margin, int liquidity, int tradingFee, int fundingFee, int liquidationFee, int trxId) inline;

;; $LPPositionDecreasedEvent$_constructor_positionId_account_marginDelta_marginAfter_liquidityDelta_liquidityAfter_tradingFee_fundingFee_realizedLoss_receive_trxId
((int, slice, int, int, int, int, int, int, int, int, int)) $LPPositionDecreasedEvent$_constructor_positionId_account_marginDelta_marginAfter_liquidityDelta_liquidityAfter_tradingFee_fundingFee_realizedLoss_receive_trxId(int positionId, slice account, int marginDelta, int marginAfter, int liquidityDelta, int liquidityAfter, int tradingFee, int fundingFee, int realizedLoss, int receive, int trxId) inline;

;; $Pool$_fun_decreaseLPPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_decreaseLPPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account, int $isLiquidate, int $marginDelta, int $liquidityDelta, int $trxId) impure inline_ref;

;; $Pool$_fun_lpPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), tuple) $Pool$_fun_lpPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $account) impure inline_ref;

;; $AccountPerpPosition$_constructor_positions
((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline;

;; $DirectionPerpPosition$_constructor_longPosition_shortPosition
(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int) longPosition, (int, int, int, int, int) shortPosition) inline;

;; $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth
((int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth) inline;

;; $GlobalLPPosition$_constructor_netSize_isLong_entryPrice
((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int netSize, int isLong, int entryPrice) inline;

;; $PerpPositionIncreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_trxId
((int, slice, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int trxId) inline;

;; $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId
((int, int, int, int, int)) $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId(int tokenId, int netSizeAfter, int isLong, int entryPriceAfter, int trxId) inline;

;; $Pool$_fun_calculateEntryPrice
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_calculateEntryPrice((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $sizeBefore, int $entryPrice, int $sizeDelta, int $tradePrice) impure inline_ref;

;; $Pool$_fun_increasePerpPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_increasePerpPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice) impure inline_ref;

;; $PerpPositionLiquidatedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_sizeDelta_liquidatePrice_tradingFee_fundingFee_liquidationFee_trxId
((int, slice, int, int, int, int, int, int, int, int, int)) $PerpPositionLiquidatedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_sizeDelta_liquidatePrice_tradingFee_fundingFee_liquidationFee_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int sizeDelta, int liquidatePrice, int tradingFee, int fundingFee, int liquidationFee, int trxId) inline;

;; $PerpPositionDecreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_receive_trxId
((int, slice, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_receive_trxId(int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int realizedPnLDelta, int tradingFee, int fundingFee, int receive, int trxId) inline;

;; $Pool$_fun_decreasePerpPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), int) $Pool$_fun_decreasePerpPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $trxId, int $isLiquidate, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice) impure inline_ref;

;; $Pool$_fun_perpPosition
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), tuple) $Pool$_fun_perpPosition((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $tokenId, slice $account) impure inline_ref;

;; $PriceData$_constructor_price
((int)) $PriceData$_constructor_price(int price) inline;

;; $UpdatePriceEvent$_constructor_pricesLength_prices
((int, cell)) $UpdatePriceEvent$_constructor_pricesLength_prices(int pricesLength, cell prices) inline;

;; $Pool$_fun_setPrice
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_setPrice((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, int $pricesLength, cell $prices) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Pool$_fun_forward
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_forward((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_notify
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_notify((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self, cell $body) impure inline;

;; $Pool$_fun_requireOwner
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), ()) $Pool$_fun_requireOwner((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self) impure inline_ref;

;; $Pool$_fun_owner
((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int), slice) $Pool$_fun_owner((int, int, cell, int, int, int, int, int, int, int, slice, slice, cell, int, (int, int), cell, int, (int, int, int, int), cell, int, int, cell, int, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_protocalTradingFeeRate_interestRate_maxFundingRate
((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_protocalTradingFeeRate_interestRate_maxFundingRate(slice name, int enable, int minMargin, int maxLeverage, int liquidationFee, int tradingFeeRate, int lpTradingFeeRate, int protocalTradingFeeRate, int interestRate, int maxFundingRate) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $UpdateRBFPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdateRBFPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
