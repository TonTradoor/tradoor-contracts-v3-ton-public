;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UpdateConfig$_load
(slice, ((slice, int, int, int, int, int, slice))) $UpdateConfig$_load(slice sc_0) inline_ref;

;; $UpdateTokenConfig$_load
(slice, ((int, slice, int, int, int, int, int, int, int, int))) $UpdateTokenConfig$_load(slice sc_0) inline_ref;

;; $ClaimProtocolFee$_load
(slice, ((slice))) $ClaimProtocolFee$_load(slice sc_0) inline;

;; $UpdateLPPosition$_load
(slice, ((int, int, slice, int, int, int, cell))) $UpdateLPPosition$_load(slice sc_0) inline_ref;

;; $UpdateLPPositionSuccess$_store
builder $UpdateLPPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdateLPPositionSuccess$_store_cell
cell $UpdateLPPositionSuccess$_store_cell((int, int, int) v) inline;

;; $UpdatePerpPosition$_load
(slice, ((int, int, int, slice, int, int, int, int, int, int, int, cell))) $UpdatePerpPosition$_load(slice sc_0) inline_ref;

;; $UpdatePerpPositionSuccess$_store
builder $UpdatePerpPositionSuccess$_store(builder build_0, (int, int, int) v) inline;

;; $UpdatePerpPositionSuccess$_store_cell
cell $UpdatePerpPositionSuccess$_store_cell((int, int, int) v) inline;

;; $UpdatePrice$_load
(slice, ((int, int, cell))) $UpdatePrice$_load(slice sc_0) inline;

;; $SetPremiumRateSampleRange$_load
(slice, ((int, cell))) $SetPremiumRateSampleRange$_load(slice sc_0) inline;

;; $LPPositionIncreasedEvent$_store
builder $LPPositionIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LPPositionIncreasedEvent$_store_cell
cell $LPPositionIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $LPPositionDecreasedEvent$_store
builder $LPPositionDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LPPositionDecreasedEvent$_store_cell
cell $LPPositionDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int) v) inline;

;; $GlobalLPLiquidityChangedEvent$_store
builder $GlobalLPLiquidityChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $GlobalLPLiquidityChangedEvent$_store_cell
cell $GlobalLPLiquidityChangedEvent$_store_cell((int, int, int, int, int) v) inline;

;; $GlobalLPPositionChangedEvent$_store
builder $GlobalLPPositionChangedEvent$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $GlobalLPPositionChangedEvent$_store_cell
cell $GlobalLPPositionChangedEvent$_store_cell((int, int, int, int, int) v) inline;

;; $PerpPositionIncreasedEvent$_store
builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionIncreasedEvent$_store_cell
cell $PerpPositionIncreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionDecreasedEvent$_store
builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionDecreasedEvent$_store_cell
cell $PerpPositionDecreasedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GlobalPositionChangedEvent$_store
builder $GlobalPositionChangedEvent$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline_ref;

;; $GlobalPositionChangedEvent$_store_cell
cell $GlobalPositionChangedEvent$_store_cell((int, int, int, int, int, int, int, int) v) inline;

;; $UpdatePriceEvent$_store
builder $UpdatePriceEvent$_store(builder build_0, (int, int, int) v) inline;

;; $UpdatePriceEvent$_store_cell
cell $UpdatePriceEvent$_store_cell((int, int, int) v) inline;

;; $PremiumRateChangedEvent$_store
builder $PremiumRateChangedEvent$_store(builder build_0, (int, int, int) v) inline;

;; $PremiumRateChangedEvent$_store_cell
cell $PremiumRateChangedEvent$_store_cell((int, int, int) v) inline;

;; $TokenConfig$_store
builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $TokenConfig$_store_cell
cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load
(slice, ((slice, int, int, int, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_as_optional
tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load_opt
tuple $TokenConfig$_load_opt(cell cl) inline;

;; $LPPosition$_store
builder $LPPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $LPPosition$_store_cell
cell $LPPosition$_store_cell((int, int, int, int, int, int) v) inline;

;; $LPPosition$_not_null
((int, int, int, int, int, int)) $LPPosition$_not_null(tuple v) inline;

;; $LPPosition$_store_opt
cell $LPPosition$_store_opt(tuple v) inline;

;; $LPPosition$_load
(slice, ((int, int, int, int, int, int))) $LPPosition$_load(slice sc_0) inline_ref;

;; $LPPosition$_as_optional
tuple $LPPosition$_as_optional((int, int, int, int, int, int) v) inline;

;; $LPPosition$_load_opt
tuple $LPPosition$_load_opt(cell cl) inline;

;; $AccountPerpPosition$_store
builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline;

;; $AccountPerpPosition$_store_cell
cell $AccountPerpPosition$_store_cell((cell) v) inline;

;; $AccountPerpPosition$_load
(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline;

;; $AccountPerpPosition$_as_optional
tuple $AccountPerpPosition$_as_optional((cell) v) inline;

;; $AccountPerpPosition$_load_opt
tuple $AccountPerpPosition$_load_opt(cell cl) inline;

;; $PerpPosition$_store
builder $PerpPosition$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $PerpPosition$_load
(slice, ((int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_store
builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_store_cell
cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load
(slice, (((int, int, int, int, int), (int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_as_optional
tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int), (int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load_opt
tuple $DirectionPerpPosition$_load_opt(cell cl) inline;

;; $GlobalLPPosition$_store
builder $GlobalLPPosition$_store(builder build_0, (int, int, int, int) v) inline;

;; $GlobalLPPosition$_store_cell
cell $GlobalLPPosition$_store_cell((int, int, int, int) v) inline;

;; $GlobalLPPosition$_load
(slice, ((int, int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_as_optional
tuple $GlobalLPPosition$_as_optional((int, int, int, int) v) inline;

;; $GlobalLPPosition$_load_opt
tuple $GlobalLPPosition$_load_opt(cell cl) inline;

;; $GlobalPosition$_store
builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int, int, int) v) inline_ref;

;; $GlobalPosition$_store_cell
cell $GlobalPosition$_store_cell((int, int, int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load
(slice, ((int, int, int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref;

;; $GlobalPosition$_as_optional
tuple $GlobalPosition$_as_optional((int, int, int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load_opt
tuple $GlobalPosition$_load_opt(cell cl) inline;

;; $GlobalFundingRateSample$_store
builder $GlobalFundingRateSample$_store(builder build_0, (int, int, int) v) inline;

;; $GlobalFundingRateSample$_store_cell
cell $GlobalFundingRateSample$_store_cell((int, int, int) v) inline;

;; $GlobalFundingRateSample$_load
(slice, ((int, int, int))) $GlobalFundingRateSample$_load(slice sc_0) inline;

;; $GlobalFundingRateSample$_as_optional
tuple $GlobalFundingRateSample$_as_optional((int, int, int) v) inline;

;; $GlobalFundingRateSample$_load_opt
tuple $GlobalFundingRateSample$_load_opt(cell cl) inline;

;; $UpdatePriceParam$_load
(slice, ((int, int))) $UpdatePriceParam$_load(slice sc_0) inline;

;; $UpdatePriceParam$_as_optional
tuple $UpdatePriceParam$_as_optional((int, int) v) inline;

;; $UpdatePriceParam$_load_opt
tuple $UpdatePriceParam$_load_opt(cell cl) inline;

;; $PremiumRateSampleRange$_store
builder $PremiumRateSampleRange$_store(builder build_0, (int, cell) v) inline;

;; $PremiumRateSampleRange$_store_cell
cell $PremiumRateSampleRange$_store_cell((int, cell) v) inline;

;; $PremiumRateSampleRange$_load
(slice, ((int, cell))) $PremiumRateSampleRange$_load(slice sc_0) inline;

;; $PremiumRateSampleRange$_as_optional
tuple $PremiumRateSampleRange$_as_optional((int, cell) v) inline;

;; $PremiumRateSampleRange$_load_opt
tuple $PremiumRateSampleRange$_load_opt(cell cl) inline;

;; $PremiumRateSampleRangeParam$_load
(slice, ((int, int, cell))) $PremiumRateSampleRangeParam$_load(slice sc_0) inline;

;; $PremiumRateSampleRangeParam$_as_optional
tuple $PremiumRateSampleRangeParam$_as_optional((int, int, cell) v) inline;

;; $PremiumRateSampleRangeParam$_load_opt
tuple $PremiumRateSampleRangeParam$_load_opt(cell cl) inline;

;; $PremiumRateSample$_load
(slice, ((int, int))) $PremiumRateSample$_load(slice sc_0) inline;

;; $PremiumRateSample$_as_optional
tuple $PremiumRateSample$_as_optional((int, int) v) inline;

;; $PremiumRateSample$_load_opt
tuple $PremiumRateSample$_load_opt(cell cl) inline;

;; $PremiumRateSampleData$_store
builder $PremiumRateSampleData$_store(builder build_0, (int, int, int, int) v) inline;

;; $PremiumRateSampleData$_store_cell
cell $PremiumRateSampleData$_store_cell((int, int, int, int) v) inline;

;; $PremiumRateSampleData$_load
(slice, ((int, int, int, int))) $PremiumRateSampleData$_load(slice sc_0) inline;

;; $PremiumRateSampleData$_as_optional
tuple $PremiumRateSampleData$_as_optional((int, int, int, int) v) inline;

;; $PremiumRateSampleData$_load_opt
tuple $PremiumRateSampleData$_load_opt(cell cl) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) v) inline;

;; $Pool$_load
(slice, ((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $ConfigData$_to_external
(int, int, int, int, int, slice) $ConfigData$_to_external(((int, int, int, int, int, slice)) v) inline;

;; $TokenConfig$_not_null
((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline;

;; $TokenConfig$_to_tuple
tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int, int, int, int)) v) inline;

;; $TokenConfig$_to_opt_tuple
tuple $TokenConfig$_to_opt_tuple(tuple v) inline;

;; $TokenConfig$_to_opt_external
tuple $TokenConfig$_to_opt_external(tuple v) inline;

;; $LPPosition$_to_tuple
tuple $LPPosition$_to_tuple(((int, int, int, int, int, int)) v) inline;

;; $LPPosition$_to_opt_tuple
tuple $LPPosition$_to_opt_tuple(tuple v) inline;

;; $LPPositionData$_not_null
((tuple, int, int, int, int)) $LPPositionData$_not_null(tuple v) inline;

;; $LPPositionData$_as_optional
tuple $LPPositionData$_as_optional((tuple, int, int, int, int) v) inline;

;; $LPPositionData$_to_tuple
tuple $LPPositionData$_to_tuple(((tuple, int, int, int, int)) v) inline;

;; $LPPositionData$_to_opt_tuple
tuple $LPPositionData$_to_opt_tuple(tuple v) inline;

;; $LPPositionData$_to_opt_external
tuple $LPPositionData$_to_opt_external(tuple v) inline;

;; $AccountPerpPosition$_get_positions
_ $AccountPerpPosition$_get_positions((cell) v) inline;

;; $AccountPerpPosition$_not_null
((cell)) $AccountPerpPosition$_not_null(tuple v) inline;

;; $DirectionPerpPosition$_not_null
(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline;

;; $PerpPosition$_to_tuple
tuple $PerpPosition$_to_tuple(((int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_to_tuple
tuple $DirectionPerpPosition$_to_tuple((((int, int, int, int, int), (int, int, int, int, int))) v) inline;

;; $DirectionPerpPosition$_to_opt_tuple
tuple $DirectionPerpPosition$_to_opt_tuple(tuple v) inline;

;; $GlobalLPPosition$_not_null
((int, int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline;

;; $GlobalLPPosition$_to_tuple
tuple $GlobalLPPosition$_to_tuple(((int, int, int, int)) v) inline;

;; $GlobalLPPosition$_to_opt_tuple
tuple $GlobalLPPosition$_to_opt_tuple(tuple v) inline;

;; $PerpPositionData$_not_null
((int, int, tuple, tuple, tuple, tuple)) $PerpPositionData$_not_null(tuple v) inline;

;; $PerpPositionData$_as_optional
tuple $PerpPositionData$_as_optional((int, int, tuple, tuple, tuple, tuple) v) inline;

;; $GlobalPosition$_to_tuple
tuple $GlobalPosition$_to_tuple(((int, int, int, int, int, int, int, int)) v) inline;

;; $GlobalPosition$_not_null
((int, int, int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline;

;; $GlobalPosition$_to_opt_tuple
tuple $GlobalPosition$_to_opt_tuple(tuple v) inline;

;; $GlobalFundingRateSample$_to_tuple
tuple $GlobalFundingRateSample$_to_tuple(((int, int, int)) v) inline;

;; $GlobalFundingRateSample$_not_null
((int, int, int)) $GlobalFundingRateSample$_not_null(tuple v) inline;

;; $GlobalFundingRateSample$_to_opt_tuple
tuple $GlobalFundingRateSample$_to_opt_tuple(tuple v) inline;

;; $PerpPositionData$_to_tuple
tuple $PerpPositionData$_to_tuple(((int, int, tuple, tuple, tuple, tuple)) v) inline;

;; $PerpPositionData$_to_opt_tuple
tuple $PerpPositionData$_to_opt_tuple(tuple v) inline;

;; $PerpPositionData$_to_opt_external
tuple $PerpPositionData$_to_opt_external(tuple v) inline;

;; $UpdatePriceParam$_get_tokenId
_ $UpdatePriceParam$_get_tokenId((int, int) v) inline;

;; $UpdatePriceParam$_get_price
_ $UpdatePriceParam$_get_price((int, int) v) inline;

;; $UpdatePriceParam$_not_null
((int, int)) $UpdatePriceParam$_not_null(tuple v) inline;

;; $PremiumRateSampleRange$_not_null
((int, cell)) $PremiumRateSampleRange$_not_null(tuple v) inline;

;; $PremiumRateSampleRangeParam$_not_null
((int, int, cell)) $PremiumRateSampleRangeParam$_not_null(tuple v) inline;

;; $PremiumRateSample$_get_deviationRate
_ $PremiumRateSample$_get_deviationRate((int, int) v) inline;

;; $PremiumRateSample$_get_premiumRate
_ $PremiumRateSample$_get_premiumRate((int, int) v) inline;

;; $PremiumRateSample$_not_null
((int, int)) $PremiumRateSample$_not_null(tuple v) inline;

;; $PremiumRateSampleData$_not_null
((int, int, int, int)) $PremiumRateSampleData$_not_null(tuple v) inline;

;; $Pool$init$_load
(slice, ((int))) $Pool$init$_load(slice sc_0) inline;

;; $Pool$_contract_init
(int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $Pool$_contract_init(int $deployId) impure inline_ref;

;; $Pool$_contract_load
(int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $ConfigData$_constructor_isExecutor_gasConsumption_minTonsForStorage_lpBonusFactor_lpLiquidityFactor_orderBook
((int, int, int, int, int, slice)) $ConfigData$_constructor_isExecutor_gasConsumption_minTonsForStorage_lpBonusFactor_lpLiquidityFactor_orderBook(int isExecutor, int gasConsumption, int minTonsForStorage, int lpBonusFactor, int lpLiquidityFactor, slice orderBook) inline;

;; $Pool$_fun_configData
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), (int, int, int, int, int, slice)) $Pool$_fun_configData((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, slice $executor) impure inline_ref;

;; $Pool$_fun_tokenConfig
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_tokenConfig((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref;

;; $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime
((int, int, int, int, int, int)) $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(int positionId, int liquidity, int bonus, int realizedFundingFee, int entryFundingFeeGrowth, int unlockTime) inline;

;; $LPPositionIncreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFeeDelta_realizedFundingFeeAfter_entryFundingFeeGrowthAfter_trxId
((int, int, slice, int, int, int, int, int, int, int, int, int)) $LPPositionIncreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFeeDelta_realizedFundingFeeAfter_entryFundingFeeGrowthAfter_trxId(int opType, int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int unlockTimeAfter, int realizedFundingFeeDelta, int realizedFundingFeeAfter, int entryFundingFeeGrowthAfter, int trxId) inline;

;; $GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId
((int, int, int, int, int)) $GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId(int lpFundAfter, int liquidityAfter, int tradingFee, int realizedPnl, int trxId) inline;

;; $Pool$_fun_increaseLPPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increaseLPPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref;

;; $LPPositionDecreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_entryFundingFeeGrowthAfter_receive_trxId
((int, int, slice, int, int, int, int, int, int, int, int)) $LPPositionDecreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_entryFundingFeeGrowthAfter_receive_trxId(int opType, int positionId, slice account, int liquidityDelta, int liquidityAfter, int bonusDelta, int bonusAfter, int fundingFeeDelta, int entryFundingFeeGrowthAfter, int receive, int trxId) inline;

;; $Pool$_fun_decreaseLPPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), int) $Pool$_fun_decreaseLPPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref;

;; $LPPositionData$_constructor_lpPosition_globalLPFund_globalLPLiquidity_globalLPFundingFeeGrowth_globalLPUnrealizedPnl
((tuple, int, int, int, int)) $LPPositionData$_constructor_lpPosition_globalLPFund_globalLPLiquidity_globalLPFundingFeeGrowth_globalLPUnrealizedPnl(tuple lpPosition, int globalLPFund, int globalLPLiquidity, int globalLPFundingFeeGrowth, int globalLPUnrealizedPnl) inline;

;; $Pool$_fun_lpPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_lpPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, slice $account) impure inline_ref;

;; $AccountPerpPosition$_constructor_positions
((cell)) $AccountPerpPosition$_constructor_positions(cell positions) inline;

;; $DirectionPerpPosition$_constructor_longPosition_shortPosition
(((int, int, int, int, int), (int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int) longPosition, (int, int, int, int, int) shortPosition) inline;

;; $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth
((int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(int positionId, int margin, int size, int entryPrice, int entryFundingFeeGrowth) inline;

;; $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue
((int, int, int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(int longMargin, int shortMargin, int longSize, int shortSize, int longFundingFeeGrowth, int shortFundingFeeGrowth, int longValue, int shortValue) inline;

;; $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl
((int, int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(int netSize, int isLong, int entryPrice, int unrealizedPnl) inline;

;; $PerpPositionIncreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_entryFundingFeeGrowthAfter_trxId
((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_entryFundingFeeGrowthAfter_trxId(int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int entryPrice, int tradingFee, int fundingFee, int entryFundingFeeGrowthAfter, int trxId) inline;

;; $GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId
((int, int, int, int, int, int, int, int)) $GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId(int tokenId, int longMarginAfter, int shortMarginAfter, int longSizeAfter, int shortSizeAfter, int longFundingFeeGrowthAfter, int shortFundingFeeGrowthAfter, int trxId) inline;

;; $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId
((int, int, int, int, int)) $GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId(int tokenId, int netSizeAfter, int isLong, int entryPriceAfter, int trxId) inline;

;; $Pool$_fun_increasePerpPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increasePerpPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $opType, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $indexPrice, int $tradePrice) impure inline_ref;

;; $PerpPositionDecreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_trxId
((int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_trxId(int opType, int positionId, slice account, int tokenId, int isLong, int marginDelta, int marginAfter, int sizeDelta, int sizeAfter, int tradePrice, int realizedPnLDelta, int tradingFee, int fundingFee, int entryFundingFeeGrowthAfter, int receive, int trxId) inline;

;; $Pool$_fun_decreasePerpPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), int) $Pool$_fun_decreasePerpPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $opType, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $indexPrice, int $tradePrice) impure inline_ref;

;; $Pool$_fun_liquidatePerpPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), int) $Pool$_fun_liquidatePerpPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $trxId, slice $account, int $tokenId, int $isLong, int $indexPrice, int $tradePrice) impure inline_ref;

;; $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition_globalFundingRateSample
((int, int, tuple, tuple, tuple, tuple)) $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition_globalFundingRateSample(int globalPerpNetValue, int globalPerpSingleValue, tuple perpPosition, tuple globalLPPosition, tuple globalPosition, tuple globalFundingRateSample) inline;

;; $Pool$_fun_perpPosition
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_perpPosition((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $tokenId, slice $account) impure inline_ref;

;; $UpdatePriceEvent$_constructor_tokenId_price_lpFundingFee
((int, int, int)) $UpdatePriceEvent$_constructor_tokenId_price_lpFundingFee(int tokenId, int price, int lpFundingFee) inline;

;; $GlobalFundingRateSample$_constructor_lastAdjustFundingRateTime_sampleCount_cumulativePremiumRate
((int, int, int)) $GlobalFundingRateSample$_constructor_lastAdjustFundingRateTime_sampleCount_cumulativePremiumRate(int lastAdjustFundingRateTime, int sampleCount, int cumulativePremiumRate) inline;

;; $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate
((int, int, int, int)) $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate(int rangeId, int sampleId, int deviationRate, int premiumRate) inline;

;; $Pool$_fun_updateFundingRate
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), int) $Pool$_fun_updateFundingRate((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $tokenId, int $indexPrice) impure inline_ref;

;; $Pool$_fun_updatePriceAndFundingFee
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_updatePriceAndFundingFee((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $pricesLength, cell $prices) impure inline_ref;

;; $PremiumRateSample$_constructor_deviationRate_premiumRate
((int, int)) $PremiumRateSample$_constructor_deviationRate_premiumRate(int deviationRate, int premiumRate) inline;

;; $Pool$_fun_searchPremiumRate
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), (int, int, int, int)) $Pool$_fun_searchPremiumRate((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $tokenId, int $deviationRate) impure inline_ref;

;; $Pool$_fun_calculatePremiumRate
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_calculatePremiumRate((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, int $tokenId, int $sizeDelta, int $isLong) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Pool$_fun_forward
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_forward((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_notify
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_notify((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $Pool$_fun_requireOwner
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), ()) $Pool$_fun_requireOwner((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $Pool$_fun_owner
((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell), slice) $Pool$_fun_owner((int, int, cell, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_liquidityProportion_interestRate_maxFundingRate
((slice, int, int, int, int, int, int, int, int, int)) $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_liquidityProportion_interestRate_maxFundingRate(slice name, int enable, int minMargin, int maxLeverage, int liquidationFee, int tradingFeeRate, int lpTradingFeeRate, int liquidityProportion, int interestRate, int maxFundingRate) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdateLPPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $PremiumRateChangedEvent$_constructor_tokenId_deviationRate_premiumRate
((int, int, int)) $PremiumRateChangedEvent$_constructor_tokenId_deviationRate_premiumRate(int tokenId, int deviationRate, int premiumRate) inline;

;; $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId
((int, int, int)) $UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId(int orderId, int receive, int trxId) inline;

;; $PremiumRateSampleRange$_constructor_sampleLength_samples
((int, cell)) $PremiumRateSampleRange$_constructor_sampleLength_samples(int sampleLength, cell samples) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
