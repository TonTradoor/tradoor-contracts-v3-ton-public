#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $Pool$_contract_init(int $deployId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = (50000000, 30000000, null(), 1, 600, 1, null(), null(), null(), 1, null(), null(), 1, null(), null(), 0);
    $self'owner = __tact_context_get_sender();
    $self'orderBook = __tact_create_address(0, 0);
    ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth) = $GlobalLPLiquidity$_constructor_lpFund_liquidity_fundingFeeGrowth(0, 0, 0);
    return ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee);
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), (int, int, slice)) $Pool$_fun_configData((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $ConfigData$_constructor_lpLockTime_bonusFactor_orderBook($self'lpLockTime, $self'bonusFactor, $self'orderBook));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), (int, tuple)) $Pool$_fun_tokenConfig((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $tokenId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $TokenConfigData$_constructor_tokenIdNext_tokenConfig($self'tokenIdNext, $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId))));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), tuple) $Pool$_fun_priceData((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $tokenId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $PriceData$_load_opt(__tact_dict_get_int_cell($self'prices, 257, $tokenId)));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_tokenEnabled((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $tokenIndex) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenIndex));
    if (null?($tokenConfigOpt)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), false);
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $TokenConfig$_get_enable($TokenConfig$_not_null($tokenConfigOpt)));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_getPrice((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $tokenId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $priceData = $PriceData$_load_opt(__tact_dict_get_int_cell($self'prices, 257, $tokenId));
    int $price = 0;
    if ((~ null?($priceData))) {
        $price = $PriceData$_get_price($PriceData$_not_null($priceData));
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $price);
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_calculateUnrealizedPnL((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $isLong, int $size, int $entryPrice, int $price) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    if ($isLong) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), (($size * ($price - $entryPrice)) / 100000000000000000000));
    } else {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), (($size * ($entryPrice - $price)) / 100000000000000000000));
    }
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_calculateTotalGlobalUnrealizedPnl((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    int $totalGlobalUnrealizedPnl = 0;
    int $i = 1;
    while (($i < $self'tokenIdNext)) {
        int $tokenEnabled = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_tokenEnabled($i);
        if ($tokenEnabled) {
            tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $i));
            if ((~ null?($globalLPPositionOpt))) {
                var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
                int $indexPrice = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_getPrice($i);
                int $unrealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($globalLPPosition'isLong, $globalLPPosition'netSize, $globalLPPosition'entryPrice, $indexPrice);
                $totalGlobalUnrealizedPnl = ($totalGlobalUnrealizedPnl + $unrealizedPnl);
            }
        }
        $i = ($i + 1);
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $totalGlobalUnrealizedPnl);
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), ()) $Pool$_fun_increaseLPPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(0, 0, 0, 0, 0, 0);
    if ((~ null?($lpPositionOpt))) {
        ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    } else {
        $lpPosition'positionId = $self'lpPositionIndexNext;
        $self'lpPositionIndexNext = ($self'lpPositionIndexNext + 1);
    }
    int $globalNetLP = ($self'globalLPLiquidity'lpFund + ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateTotalGlobalUnrealizedPnl());
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    int $bonus = 0;
    if (($globalNetLP < $self'globalLPLiquidity'liquidity)) {
        $bonus = ((($self'bonusFactor * ($self'globalLPLiquidity'liquidity - $globalNetLP)) * $liquidityDelta) / $self'globalLPLiquidity'liquidity);
        $lpPosition'bonus = ($lpPosition'bonus + $bonus);
    }
    $lpPosition'liquidity = ($lpPosition'liquidity + $liquidityDelta);
    $lpPosition'unlockTime = (now() + $self'lpLockTime);
    $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    $self'globalLPLiquidity'lpFund = ($self'globalLPLiquidity'lpFund + $liquidityDelta);
    $self'globalLPLiquidity'liquidity = ($self'globalLPLiquidity'liquidity + $liquidityDelta);
    $global_emit($LPPositionIncreasedEvent$_store_cell($LPPositionIncreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFee_realizedFundingFeeAfter_trxId($lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $lpPosition'unlockTime, 0, $lpPosition'realizedFundingFee, $trxId)));
    $global_emit($GlobalLPChangedEvent$_store_cell($GlobalLPChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_trxId($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, 0, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_decreaseLPPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    throw_unless(5238, (~ null?($lpPositionOpt)));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    throw_unless(31425, ($lpPosition'unlockTime <= now()));
    if (($lpPosition'liquidity < $liquidityDelta)) {
        $liquidityDelta = $lpPosition'liquidity;
    }
    int $totalGlobalUnrealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateTotalGlobalUnrealizedPnl();
    int $globalNetLP = ($self'globalLPLiquidity'lpFund + $totalGlobalUnrealizedPnl);
    throw_unless(39251, ($globalNetLP > 0));
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    throw_unless(11117, ($globalNetLP > 0));
    int $receive = 0;
    int $bonus = 0;
    if (($globalNetLP >= $self'globalLPLiquidity'liquidity)) {
        int $n = (((now() - $lpPosition'unlockTime) + $self'lpLockTime) / 86400);
        if (($lpPosition'bonus == 0)) {
            $bonus = (((($liquidityDelta * $self'bonusFactor) * ($globalNetLP - $self'globalLPLiquidity'liquidity)) * min($n, 100)) / ($globalNetLP * 1000));
        } else {
            int $bonus1 = (($liquidityDelta * ($globalNetLP - $self'globalLPLiquidity'liquidity)) / $globalNetLP);
            int $bonus2 = $lpPosition'bonus;
            int $bonus3 = (((($liquidityDelta * $self'bonusFactor) * ($globalNetLP - $self'globalLPLiquidity'liquidity)) * min($n, 100)) / ($globalNetLP * 1000));
            $bonus = max(min($bonus1, $bonus2), $bonus3);
        }
        $receive = ($liquidityDelta + $bonus);
    } else {
        $receive = (($liquidityDelta * $globalNetLP) / $self'globalLPLiquidity'liquidity);
    }
    $lpPosition'liquidity = ($lpPosition'liquidity - $liquidityDelta);
    $lpPosition'bonus = ($lpPosition'bonus - $bonus);
    if (( (($lpPosition'liquidity > 0)) ? (true) : (($lpPosition'bonus > 0)) )) {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    } else {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_opt(null()));
    }
    $self'globalLPLiquidity'lpFund = ($self'globalLPLiquidity'lpFund - $receive);
    $self'globalLPLiquidity'liquidity = ($self'globalLPLiquidity'liquidity - $liquidityDelta);
    $global_emit($LPPositionDecreasedEvent$_store_cell($LPPositionDecreasedEvent$_constructor_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_receive_trxId($lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $lpPosition'realizedFundingFee, $receive, $trxId)));
    $global_emit($GlobalLPChangedEvent$_store_cell($GlobalLPChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_trxId($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, 0, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $receive);
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), tuple) $Pool$_fun_lpPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, slice $account) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $lpPosition = null();
    if ((~ null?($account))) {
        $lpPosition = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, __tact_not_null($account)));
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $LPPositionData$_as_optional($LPPositionData$_constructor_lpPosition_globalLPLiquidity($lpPosition, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth))));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_calculateEntryPrice((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $sizeBefore, int $entryPrice, int $sizeDelta, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    if (( (($sizeBefore == 0)) ? (($sizeDelta == 0)) : (false) )) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), 0);
    }
    if (($sizeBefore == 0)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $tradePrice);
    }
    if (($sizeDelta == 0)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $entryPrice);
    }
    int $liquidity = (($sizeBefore * $entryPrice) + ($sizeDelta * $tradePrice));
    int $sizeAfter = ($sizeBefore + $sizeDelta);
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ($liquidity / $sizeAfter));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), ()) $Pool$_fun_increasePerpPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    if (($perpPosition'size == 0)) {
        throw_unless(62409, ($marginDelta >= $tokenConfig'minMargin));
        $perpPosition'positionId = $self'perpPositionIndexNext;
        $self'perpPositionIndexNext = $self'perpPositionIndexNext + 1;
    }
    tuple $globalLpPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice) = ((~ null?($globalLpPositionOpt)) ? $GlobalLPPosition$_not_null($globalLpPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLpPosition'netSize > 0)) ? (($isLong == $globalLpPosition'isLong)) : (false) )) {
        int $sizeUsed = (($sizeDelta > $globalLpPosition'netSize) ? $globalLpPosition'netSize : $sizeDelta);
        $lpRealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $sizeUsed, $globalLpPosition'entryPrice, $tradePrice);
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLpPosition'netSize = $globalLpPosition'netSize - $sizeUsed;
        if (($globalLpPosition'netSize == 0)) {
            $globalLpPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLpPosition'entryPrice = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateEntryPrice($globalLpPosition'netSize, $globalLpPosition'entryPrice, $sizeRemaining, $tradePrice);
        $globalLpPosition'netSize = $globalLpPosition'netSize + $sizeRemaining;
        $globalLpPosition'isLong = (~ $isLong);
    }
    int $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000 * 100000000000000000000));
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000);
    int $protocalTradingFee = ($tradingFee - $lpTradingFee);
    $self'protocalTradingFee = $self'protocalTradingFee + $protocalTradingFee;
    $self'globalLPLiquidity'lpFund = $self'globalLPLiquidity'lpFund + ($lpRealizedPnl + $lpTradingFee);
    throw_unless(58161, ((($globalLpPosition'netSize * $globalLpPosition'entryPrice) / 100000000000000000000) <= $self'globalLPLiquidity'lpFund));
    int $fundingFee = 0;
    $perpPosition'margin = $perpPosition'margin + (($marginDelta + $fundingFee) - $tradingFee);
    $perpPosition'entryPrice = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateEntryPrice($perpPosition'size, $perpPosition'entryPrice, $sizeDelta, $tradePrice);
    $perpPosition'size = $perpPosition'size + $sizeDelta;
    int $unrealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $perpPosition'size, $perpPosition'entryPrice, $tradePrice);
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
    throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
    throw_unless(42634, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 100000000000000000000)));
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice)));
    $global_emit($PerpPositionIncreasedEvent$_store_cell($PerpPositionIncreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_trxId($perpPosition'positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $tradingFee, $fundingFee, $trxId)));
    $global_emit($GlobalLPPositionChangedEvent$_store_cell($GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId($tokenId, $globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice, $trxId)));
    $global_emit($GlobalLPChangedEvent$_store_cell($GlobalLPChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_trxId($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $lpTradingFee, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_fun_decreasePerpPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $trxId, int $isLiquidate, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    if ($isLiquidate) {
        $marginDelta = $perpPosition'margin;
        $sizeDelta = $perpPosition'size;
    } else {
        if (($sizeDelta > $perpPosition'size)) {
            $sizeDelta = $perpPosition'size;
        }
    }
    int $fundingFee = 0;
    if ($isLiquidate) {
        int $unrealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $perpPosition'size, $perpPosition'entryPrice, $tradePrice);
        int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
        throw_unless(18995, ($maintenanceMargin >= ($perpPosition'margin + $unrealizedPnl)));
        int $liquidatePrice = ((((($perpPosition'margin + $fundingFee) - $tokenConfig'liquidationFee) * 100000000000000000000) + ($isLong ? ((- $perpPosition'entryPrice) * $perpPosition'size) : ($perpPosition'entryPrice * $perpPosition'size))) / ($perpPosition'size * ($tokenConfig'tradingFeeRate + ($isLong ? (- 1000000) : 1000000))));
        throw_unless(55429, ($isLong ? ($liquidatePrice < $perpPosition'entryPrice) : ($liquidatePrice > $perpPosition'entryPrice)));
        $tradePrice = $liquidatePrice;
    }
    tuple $globalLpPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice) = ((~ null?($globalLpPositionOpt)) ? $GlobalLPPosition$_not_null($globalLpPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLpPosition'netSize > 0)) ? (($isLong != $globalLpPosition'isLong)) : (false) )) {
        int $sizeUsed = (($sizeDelta > $globalLpPosition'netSize) ? $globalLpPosition'netSize : $sizeDelta);
        $lpRealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $sizeUsed, $globalLpPosition'entryPrice, $tradePrice);
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLpPosition'netSize = $globalLpPosition'netSize - $sizeUsed;
        if (($globalLpPosition'netSize == 0)) {
            $globalLpPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLpPosition'entryPrice = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateEntryPrice($globalLpPosition'netSize, $globalLpPosition'entryPrice, $sizeDelta, $tradePrice);
        $globalLpPosition'netSize = $globalLpPosition'netSize + $sizeRemaining;
        $globalLpPosition'isLong = (~ $isLong);
    }
    int $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000 * 100000000000000000000));
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000);
    int $protocalTradingFee = ($tradingFee - $lpTradingFee);
    $self'protocalTradingFee = $self'protocalTradingFee + $protocalTradingFee;
    $self'globalLPLiquidity'lpFund = $self'globalLPLiquidity'lpFund + ($lpRealizedPnl + $lpTradingFee);
    int $positionId = $perpPosition'positionId;
    int $receive = 0;
    if ($isLiquidate) {
        $receive = $tokenConfig'liquidationFee;
        ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
        $global_emit($PerpPositionLiquidatedEvent$_store_cell($PerpPositionLiquidatedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_sizeDelta_liquidatePrice_tradingFee_fundingFee_liquidationFee_trxId($positionId, $account, $tokenId, $isLong, $marginDelta, $sizeDelta, $tradePrice, $tradingFee, $fundingFee, $receive, $trxId)));
    } else {
        int $realizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $sizeDelta, $perpPosition'entryPrice, $tradePrice);
        throw_unless(58161, ((($globalLpPosition'netSize * $globalLpPosition'entryPrice) / 100000000000000000000) <= $self'globalLPLiquidity'lpFund));
        $perpPosition'margin = $perpPosition'margin + (($realizedPnl + $fundingFee) - $tradingFee);
        throw_unless(62409, ($perpPosition'margin >= 0));
        if (($marginDelta > $perpPosition'margin)) {
            $marginDelta = $perpPosition'margin;
        }
        $perpPosition'margin = $perpPosition'margin - $marginDelta;
        $perpPosition'size = $perpPosition'size - $sizeDelta;
        if (($perpPosition'size > 0)) {
            int $unrealizedPnl = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_calculateUnrealizedPnL($isLong, $perpPosition'size, $perpPosition'entryPrice, $tradePrice);
            int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
            throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
            throw_unless(42634, (($perpPosition'margin * $tokenConfig'maxLeverage) >= $perpPosition'size));
            $receive = $marginDelta;
        } else {
            $receive = $perpPosition'margin;
            ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
        }
        $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_receive_trxId($perpPosition'positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $realizedPnl, $tradingFee, $fundingFee, $receive, $trxId)));
    }
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice)));
    $global_emit($GlobalLPPositionChangedEvent$_store_cell($GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId($tokenId, $globalLpPosition'netSize, $globalLpPosition'isLong, $globalLpPosition'entryPrice, $trxId)));
    $global_emit($GlobalLPChangedEvent$_store_cell($GlobalLPChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_fundingFee_trxId($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $lpTradingFee, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $receive);
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), tuple) $Pool$_fun_perpPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $tokenId, slice $account) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    tuple $perpPosition = null();
    if ((~ null?($account))) {
        tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
        if ((~ null?($accountPerpPositionOpt))) {
            $perpPosition = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($AccountPerpPosition$_get_positions($AccountPerpPosition$_not_null($accountPerpPositionOpt)), 267, __tact_not_null($account)));
        }
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $PerpPositionData$_as_optional($PerpPositionData$_constructor_perpPosition_globalLPPosition($perpPosition, $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId)))));
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), ()) $Pool$_fun_setPrice((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, int $pricesLength, cell $prices) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    if (($pricesLength <= 0)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
    }
    int $i = 0;
    while (($i < $pricesLength)) {
        tuple $updatePrice = $UpdatePrice$_load_opt(__tact_dict_get_int_cell($prices, 257, $i));
        if ((~ null?($updatePrice))) {
            int $price = $UpdatePrice$_get_price($UpdatePrice$_not_null($updatePrice));
            int $tokenId = $UpdatePrice$_get_tokenId($UpdatePrice$_not_null($updatePrice));
            tuple $priceDataOpt = $PriceData$_load_opt(__tact_dict_get_int_cell($self'prices, 257, $tokenId));
            if ((~ null?($priceDataOpt))) {
                var ($priceData'price) = $PriceData$_not_null($priceDataOpt);
                $priceData'price = $price;
                $self'prices~__tact_dict_set_int_cell(257, $tokenId, $PriceData$_store_cell(($priceData'price)));
            } else {
                $self'prices~__tact_dict_set_int_cell(257, $tokenId, $PriceData$_store_cell($PriceData$_constructor_price($price)));
            }
        }
        $i = ($i + 1);
    }
    $global_emit($UpdatePriceEvent$_store_cell($UpdatePriceEvent$_constructor_pricesLength_prices($pricesLength, $prices)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), ()) $Pool$_fun_requireOwner((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), slice) $Pool$_fun_owner((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), $self'owner);
}

;;
;; Receivers of a Contract Pool
;;

(((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int)), ()) $Pool$_internal_binary_UpdateConfig((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, (int, int, int, int, slice) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee) = $self;
    var ($msg'gasConsumption, $msg'minTonsForStorage, $msg'lpLockTime, $msg'bonusFactor, $msg'orderBook) = $msg;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_requireOwner();
    $self'gasConsumption = $msg'gasConsumption;
    $self'minTonsForStorage = $msg'minTonsForStorage;
    $self'lpLockTime = $msg'lpLockTime;
    $self'bonusFactor = $msg'bonusFactor;
    $self'orderBook = $msg'orderBook;
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

(((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int)), ()) $Pool$_internal_binary_UpdateTokenConfig((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, (int, slice, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee) = $self;
    var ($msg'tokenId, $msg'name, $msg'enable, $msg'minMargin, $msg'maxLeverage, $msg'liquidationFee, $msg'tradingFeeRate, $msg'lpTradingFeeRate, $msg'interestRate, $msg'maxFundingRate) = $msg;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_requireOwner();
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $msg'tokenId));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = ((~ null?($tokenConfigOpt)) ? $TokenConfig$_not_null($tokenConfigOpt) : $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_interestRate_maxFundingRate(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), false, (10 * 1000000), 100, (2 * 100000), 1000, 600000, 0, 0));
    if ((~ null?($msg'name))) {
        $tokenConfig'name = $msg'name;
    }
    if ((~ null?($msg'enable))) {
        $tokenConfig'enable = $msg'enable;
    }
    if ((~ null?($msg'minMargin))) {
        $tokenConfig'minMargin = $msg'minMargin;
    }
    if ((~ null?($msg'maxLeverage))) {
        $tokenConfig'maxLeverage = $msg'maxLeverage;
    }
    if ((~ null?($msg'liquidationFee))) {
        $tokenConfig'liquidationFee = $msg'liquidationFee;
    }
    if ((~ null?($msg'interestRate))) {
        $tokenConfig'interestRate = $msg'interestRate;
    }
    if ((~ null?($msg'tradingFeeRate))) {
        $tokenConfig'tradingFeeRate = $msg'tradingFeeRate;
    }
    if ((~ null?($msg'lpTradingFeeRate))) {
        $tokenConfig'lpTradingFeeRate = $msg'lpTradingFeeRate;
    }
    if ((~ null?($msg'maxFundingRate))) {
        $tokenConfig'maxFundingRate = $msg'maxFundingRate;
    }
    if (($msg'tokenId >= $self'tokenIdNext)) {
        $self'tokenIdNext = ($msg'tokenId + 1);
    }
    $self'tokenConfigs~__tact_dict_set_int_cell(257, $msg'tokenId, $TokenConfig$_store_cell(($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate)));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

(((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int)), ()) $Pool$_internal_binary_UpdateLPPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, (int, int, slice, int, int, int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee) = $self;
    var ($msg'isIncrease, $msg'orderId, $msg'account, $msg'liquidityDelta, $msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_setPrice($msg'pricesLength, $msg'prices);
    int $receive = 0;
    if ($msg'isIncrease) {
        ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_increaseLPPosition($msg'account, $msg'liquidityDelta, $msg'trxId);
    } else {
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_decreaseLPPosition($msg'account, $msg'liquidityDelta, $msg'trxId);
    }
    int $msgValue = ((($Context$_get_value(__tact_context_get()) - ($self'gasConsumption * 2)) - $self'minTonsForStorage) - $Context$_fun_readForwardFee(__tact_context_get()));
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdateLPPositionSuccess$_store_cell($UpdateLPPositionSuccess$_constructor_orderId_receive_trxId($msg'orderId, $receive, $msg'trxId))));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

(((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int)), ()) $Pool$_internal_binary_UpdatePerpPosition((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, (int, int, int, slice, int, int, int, int, int, int, int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee) = $self;
    var ($msg'orderId, $msg'opType, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'triggerAbove, $msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_setPrice($msg'pricesLength, $msg'prices);
    int $tradePrice = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_getPrice($msg'tokenId);
    int $receive = 0;
    if (( (($msg'opType == 10)) ? (true) : (($msg'opType == 11)) )) {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_increasePerpPosition($msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice);
    } elseif (($msg'opType == 3)) {
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_decreasePerpPosition($msg'trxId, true, $msg'account, $msg'tokenId, $msg'isLong, 0, 0, $tradePrice);
    } else {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_decreasePerpPosition($msg'trxId, false, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice);
    }
    int $msgValue = ((($Context$_get_value(__tact_context_get()) - ($self'gasConsumption * 2)) - $self'minTonsForStorage) - $Context$_fun_readForwardFee(__tact_context_get()));
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdatePerpPositionSuccess$_store_cell($UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId($msg'orderId, $receive, $msg'trxId))));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

(((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int)), ()) $Pool$_internal_binary_Deploy((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) $self, (int) $deploy) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'bonusFactor, $self'owner, $self'orderBook, $self'lpPositions, $self'lpPositionIndexNext, ($self'globalLPLiquidity'lpFund, $self'globalLPLiquidity'liquidity, $self'globalLPLiquidity'fundingFeeGrowth), $self'perpPositions, $self'perpPositionIndexNext, $self'globalLPPositions, $self'prices, $self'protocalTradingFee), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %configData() method_id(82657) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_configData();
    return $ConfigData$_to_external(res);
}

_ %tokenConfig(int $$tokenId) method_id(124956) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_tokenConfig($tokenId);
    return $TokenConfigData$_to_external(res);
}

_ %priceData(int $$tokenId) method_id(71672) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_priceData($tokenId);
    return $PriceData$_to_opt_external(res);
}

_ %lpPosition(slice $$account) method_id(120059) {
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_lpPosition($account);
    return $LPPositionData$_to_opt_external(res);
}

_ %perpPosition(int $$tokenId, slice $$account) method_id(105096) {
    int $tokenId = $$tokenId;
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpPosition($tokenId, $account);
    return $PerpPositionData$_to_opt_external(res);
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmZaqt7vxi5Py2oUm2U49KC4c8JmeNMRovhHSsnKob5k8j";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int), int) $Pool$_contract_router_internal((int, int, cell, int, int, int, slice, slice, cell, int, (int, int, int), cell, int, cell, cell, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 2443370762) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$Pool$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateTokenConfig message
    if (op == 2464869117) {
        var msg = in_msg~$UpdateTokenConfig$_load();
        self~$Pool$_internal_binary_UpdateTokenConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateLPPosition message
    if (op == 3902592095) {
        var msg = in_msg~$UpdateLPPosition$_load();
        self~$Pool$_internal_binary_UpdateLPPosition(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePerpPosition message
    if (op == 4283950423) {
        var msg = in_msg~$UpdatePerpPosition$_load();
        self~$Pool$_internal_binary_UpdatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
