#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $Pool$_contract_init(int $deployId) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = (null(), null(), null(), 40000000, 90000000, 10000000, 10000000, 10000000000000000, 100, null(), null(), 0, 0, 0, 0, 0, 0, 0, 0, 1, null(), null(), null(), null());
    $self'owner = __tact_context_get_sender();
    $self'orderBook = __tact_context_get_sender();
    $self'tlpJetton = __tact_context_get_sender();
    $self'claimExecutor = __tact_context_get_sender();
    return ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices);
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, int, int, int, slice, slice, slice)) $Pool$_fun_configData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), $ConfigData$_constructor_lpGasConsumption_perpGasConsumption_minTonsForStorage_gasForMintTlp_maxLpNetCap_tlpJetton_orderBook_claimExecutor($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'tlpJetton, $self'orderBook, $self'claimExecutor));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), tuple) $Pool$_fun_tokenConfig((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId)));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), int) $Pool$_fun_priceData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), __tact_dict_get_uint_uint($self'prices, 16, $tokenId, 128));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), int) $Pool$_fun_exceedGas((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $ctx'value);
    int $storageFee = ($self'minTonsForStorage - min($tonBalanceBeforeMsg, $self'minTonsForStorage));
    int $extraValue = max(0, ($tonBalanceBeforeMsg - $self'minTonsForStorage));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), (($ctx'value - $storageFee) + $extraValue));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increaseLiquidity((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $jettonDelta, int $lpFundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    int $availableJetton = max(0, ($self'maxLpNetCap - $globalNetLP));
    throw_unless(23653, ($jettonDelta <= $availableJetton));
    int $tlpPrice = (($self'tlpSupply == 0) ? 1000000000000000000 : ((($globalNetLP * 1000) * 1000000000000000000) / $self'tlpSupply));
    int $tlpDelta = ((($jettonDelta * 1000) * 1000000000000000000) / $tlpPrice);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'tlpJetton, $self'gasForMintTlp, 1, true, $JettonMint$_store_cell($JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload($account, $account, $tlpDelta, null(), 0, $global_emptySlice()))));
    $self'globalLPFund = $self'globalLPFund + $jettonDelta;
    $self'tlpSupply = $self'tlpSupply + $tlpDelta;
    int $msgValue = ((($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_exceedGas() - $self'lpGasConsumption) - $self'gasForMintTlp);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $LiquidityPoolUpdated$_store_cell($LiquidityPoolUpdated$_constructor_isIncrease_orderId_tlpPrice_tlpDelta_jettonDelta_trxId(true, $orderId, $tlpPrice, $tlpDelta, $jettonDelta, $trxId))));
    $global_emit($LiquidityIncreasedEvent$_store_cell($LiquidityIncreasedEvent$_constructor_trxId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth($trxId, 1, $account, $jettonDelta, $tlpPrice, $tlpDelta, $self'tlpSupply, $self'globalLPFund, $lpFundingFeeGrowth, $rolloverFeeGrowth)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_decreaseLiquidity((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $tlpDelta, int $lpFundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    int $tlpPrice = ((($globalNetLP * 1000) * 1000000000000000000) / $self'tlpSupply);
    int $jettonDelta = (($tlpPrice * $tlpDelta) / 1000000000000000000000);
    $self'globalLPFund = $self'globalLPFund - $jettonDelta;
    $self'tlpSupply = $self'tlpSupply - $tlpDelta;
    int $msgValue = (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_exceedGas() - $self'lpGasConsumption);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 3, $LiquidityPoolUpdated$_store_cell($LiquidityPoolUpdated$_constructor_isIncrease_orderId_tlpPrice_tlpDelta_jettonDelta_trxId(false, $orderId, $tlpPrice, $tlpDelta, $jettonDelta, $trxId))));
    $global_emit($LiquidityDecreasedEvent$_store_cell($LiquidityDecreasedEvent$_constructor_trxId_opType_account_tlpDelta_jettonDelta_tlpPrice_tlpSupply_lpFundAfter_entryLpFundingFeeGrowth_entryRolloverFeeGrowth($trxId, 2, $account, $tlpDelta, $jettonDelta, $tlpPrice, $self'tlpSupply, $self'globalLPFund, $lpFundingFeeGrowth, $rolloverFeeGrowth)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, int, int, int, int, int, int)) $Pool$_fun_globalPoolData((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), $GlobalPoolData$_constructor_tlpSupply_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth_globalPerpNetValue_globalPerpSingleValue($self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_increasePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    if (($sizeDelta > 0)) {
        int $valueDelta = (($sizeDelta * $tradePrice) / 1000000000000000000);
        throw_unless(31332, ($valueDelta >= $tokenConfig'minValue));
        throw_unless(23245, ($valueDelta <= $tokenConfig'maxValue));
    }
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    if (($perpPosition'size == 0)) {
        $perpPosition'positionId = $self'perpPositionIndexNext;
        $self'perpPositionIndexNext = $self'perpPositionIndexNext + 1;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    if ($isLong) {
        $globalPosition'longSize = $globalPosition'longSize + $sizeDelta;
    } else {
        $globalPosition'shortSize = $globalPosition'shortSize + $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong == $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ($isLong) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = (~ $isLong);
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + ((($marginDelta + $fundingFee) - $tradingFee) - $rolloverFee);
    int $marginDeltaAfter = ($perpPosition'margin - $marginBefore);
    $perpPosition'entryPrice = ((($perpPosition'size * $perpPosition'entryPrice) + ($sizeDelta * $tradePrice)) / ($perpPosition'size + $sizeDelta));
    $perpPosition'size = $perpPosition'size + $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $fundingFeeGrowth;
    $perpPosition'entryRolloverFeeGrowth = $rolloverFeeGrowth;
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
    throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
    throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 1000000000000000000)));
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin + $marginDeltaAfter;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin + $marginDeltaAfter;
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    int $msgValue = (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_exceedGas() - $self'perpGasConsumption);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $PerpPositionUpdated$_store_cell($PerpPositionUpdated$_constructor_orderId_payout_trxId($orderId, 0, $trxId))));
    $global_emit($PerpPositionIncreasedEvent$_store_cell($PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, $opType, $perpPosition'positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $tradingFee, $fundingFee, $rolloverFee, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_decreasePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    if (($sizeDelta > $perpPosition'size)) {
        $sizeDelta = $perpPosition'size;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $positionId = $perpPosition'positionId;
    int $payout = 0;
    int $realizedPnl = 0;
    if ($isLong) {
        $realizedPnl = (($sizeDelta * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $realizedPnl = (($sizeDelta * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + ((($realizedPnl + $fundingFee) - $tradingFee) - $rolloverFee);
    throw_unless(62409, ($perpPosition'margin >= 0));
    if (($marginDelta > $perpPosition'margin)) {
        $marginDelta = $perpPosition'margin;
    }
    $perpPosition'margin = $perpPosition'margin - $marginDelta;
    $perpPosition'size = $perpPosition'size - $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $fundingFeeGrowth;
    $perpPosition'entryRolloverFeeGrowth = $rolloverFeeGrowth;
    int $marginDeltaAfter = ($marginBefore - $perpPosition'margin);
    if (($perpPosition'size > 0)) {
        int $unrealizedPnl = 0;
        if ($isLong) {
            $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
        } else {
            $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
        throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
        throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 1000000000000000000)));
        $payout = $marginDelta;
    } else {
        $marginDeltaAfter = $marginDeltaAfter + $perpPosition'margin;
        $payout = ($marginDelta + $perpPosition'margin);
        ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0);
    }
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDeltaAfter;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDeltaAfter;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    int $msgValue = (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_exceedGas() - $self'perpGasConsumption);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $PerpPositionUpdated$_store_cell($PerpPositionUpdated$_constructor_orderId_payout_trxId($orderId, $payout, $trxId))));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, $opType, $positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $rolloverFee, $payout, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_liquidatePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $tokenId, int $isLong, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    int $marginDelta = $perpPosition'margin;
    int $sizeDelta = $perpPosition'size;
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
    throw_unless(40940, ($maintenanceMargin >= ((($perpPosition'margin + $fundingFee) - $rolloverFee) + $unrealizedPnl)));
    int $liquidatePrice = (((((($perpPosition'margin + $fundingFee) - $rolloverFee) - $tokenConfig'liquidationFee) * 1000000000000000000) + ($isLong ? ((- $perpPosition'entryPrice) * $perpPosition'size) : ($perpPosition'entryPrice * $perpPosition'size))) / (($perpPosition'size * (($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate) + ($isLong ? -1000000000 : 1000000000))) / 1000000000));
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($liquidatePrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $liquidatePrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $liquidatePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = ((($sizeDelta * $liquidatePrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
    int $protocolTradingFee = ($tradingFee - $lpTradingFee);
    $self'protocolTradingFee = $self'protocolTradingFee + $protocolTradingFee;
    $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    int $positionId = $perpPosition'positionId;
    int $payout = $tokenConfig'liquidationFee;
    int $realizedPnl = (- ((($marginDelta - $tradingFee) + $fundingFee) - $rolloverFee));
    ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0);
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDelta;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDelta;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    int $msgValue = (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_exceedGas() - $self'perpGasConsumption);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $PerpPositionUpdated$_store_cell($PerpPositionUpdated$_constructor_orderId_payout_trxId($orderId, $payout, $trxId))));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, 3, $positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $liquidatePrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $rolloverFee, $payout, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), (int, int, tuple, tuple, tuple)) $Pool$_fun_perpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, int $tokenId, slice $account) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    tuple $perpPosition = null();
    if ((~ null?($account))) {
        tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
        if ((~ null?($accountPerpPositionOpt))) {
            $perpPosition = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($AccountPerpPosition$_get_positions($AccountPerpPosition$_not_null($accountPerpPositionOpt)), 267, __tact_not_null($account)));
        }
    }
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition($self'globalPerpNetValue, $self'globalPerpSingleValue, $perpPosition, $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId)), $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId))));
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), ()) $Pool$_fun_requireOwner((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), slice) $Pool$_fun_owner((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), $self'owner);
}

;;
;; Receivers of a Contract Pool
;;

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateConfig((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (slice, slice, slice, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($msg'tlpJetton, $msg'orderBook, $msg'claimExecutor, $msg'lpGasConsumption, $msg'perpGasConsumption, $msg'minTonsForStorage, $msg'gasForMintTlp, $msg'maxLpNetCap, $msg'lpRolloverFeeRate) = $msg;
    ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_requireOwner();
    $self'tlpJetton = $msg'tlpJetton;
    $self'orderBook = $msg'orderBook;
    $self'claimExecutor = $msg'claimExecutor;
    $self'lpGasConsumption = $msg'lpGasConsumption;
    $self'perpGasConsumption = $msg'perpGasConsumption;
    $self'minTonsForStorage = $msg'minTonsForStorage;
    $self'gasForMintTlp = $msg'gasForMintTlp;
    $self'maxLpNetCap = $msg'maxLpNetCap;
    $self'lpRolloverFeeRate = $msg'lpRolloverFeeRate;
    ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_reply(__gen_cell_comment_6295eb1c7c2429a7653770536e6fe4b297a8392349c80f082ccbf76fc3404f1f());
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateTokenConfig((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (int, (slice, int, int, int, int, int, int, int, int)) $msg) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($msg'tokenId, ($msg'config'name, $msg'config'enable, $msg'config'minValue, $msg'config'maxValue, $msg'config'maxLeverage, $msg'config'liquidationFee, $msg'config'maintenanceRate, $msg'config'tradingFeeRate, $msg'config'lpTradingFeeRate)) = $msg;
    ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_requireOwner();
    $self'tokenConfigs~__tact_dict_set_uint_cell(16, $msg'tokenId, $TokenConfig$_store_cell(($msg'config'name, $msg'config'enable, $msg'config'minValue, $msg'config'maxValue, $msg'config'maxLeverage, $msg'config'liquidationFee, $msg'config'maintenanceRate, $msg'config'tradingFeeRate, $msg'config'lpTradingFeeRate)));
    ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_reply(__gen_cell_comment_5f40ab830585de2e7b657bcf572345f7c30d22f5ea16c94fdb8100b7a554ed18());
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_ClaimProtocolFee((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($msg'trxId, $msg'feeReceiver) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'claimExecutor, __tact_context_get_sender()) ));
    if (($self'protocolTradingFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, 0, false, 64, $SendProtocolFee$_store_cell($SendProtocolFee$_constructor_trxId_feeReceiver_amount($msg'trxId, $msg'feeReceiver, $self'protocolTradingFee))));
        $self'protocolTradingFee = 0;
    }
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) %$Pool$_internal_empty((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateLiquidityPool((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (int, int, slice, int, int, cell, int, int) $msg) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($msg'isIncrease, $msg'orderId, $msg'account, $msg'jettonDelta, $msg'trxId, $msg'prices, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    cell $prices = $self'prices;
    int $globalLPUnrealizedPnl = 0;
    var ($tokenId, $price, $fresh$flag_2) = __tact_dict_min_uint_uint($prices, 16, 128);
    while ($fresh$flag_2) {
        tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
        if ((~ null?($globalLPPositionOpt))) {
            var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
            if ($globalLPPosition'isLong) {
                $globalLPUnrealizedPnl = $globalLPUnrealizedPnl + (($globalLPPosition'netSize * ($price - $globalLPPosition'entryPrice)) / 1000000000000000000);
            } else {
                $globalLPUnrealizedPnl = $globalLPUnrealizedPnl + (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $price)) / 1000000000000000000);
            }
        }
        ($tokenId, $price, $fresh$flag_2) = __tact_dict_next_uint_uint($prices, 16, $tokenId, 128);
    }
    $self'globalLPUnrealizedPnl = $globalLPUnrealizedPnl;
    $self'prices = $prices;
    int $lpFundingFeeGrowth = ($msg'lpFundingFeeGrowth - $self'globalLpFundingFeeGrowth);
    $self'globalLPFund = $self'globalLPFund + $lpFundingFeeGrowth;
    $self'globalLpFundingFeeGrowth = $msg'lpFundingFeeGrowth;
    int $rolloverFeeGrowth = ($msg'rolloverFeeGrowth - $self'globalRolloverFeeGrowth);
    int $lpRolloverFeeGrowth = (($rolloverFeeGrowth * $self'lpRolloverFeeRate) / 1000000000);
    $self'globalLPFund = $self'globalLPFund + $lpRolloverFeeGrowth;
    $self'protocolTradingFee = $self'protocolTradingFee + ($rolloverFeeGrowth - $lpRolloverFeeGrowth);
    $self'globalRolloverFeeGrowth = $msg'rolloverFeeGrowth;
    if ($msg'isIncrease) {
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_increaseLiquidity($msg'trxId, $msg'orderId, $msg'account, $msg'jettonDelta, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth);
    } else {
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_decreaseLiquidity($msg'trxId, $msg'orderId, $msg'account, $msg'jettonDelta, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth);
    }
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_UpdatePerpPosition((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (int, int, int, slice, int, int, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($msg'orderId, $msg'opType, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'triggerAbove, $msg'trxId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    int $tradePrice = $msg'price;
    $self'prices~__tact_dict_set_uint_uint(16, $msg'tokenId, $tradePrice, 128);
    if (( (($msg'opType == 10)) ? (true) : (($msg'opType == 11)) )) {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_increasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth);
    } elseif (($msg'opType == 3)) {
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_liquidatePerpPosition($msg'trxId, $msg'orderId, $msg'account, $msg'tokenId, $msg'isLong, $tradePrice, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth);
    } elseif (($msg'opType == 4)) {
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_decreasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth);
    } else {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_decreasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth);
    }
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

(((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell)), ()) $Pool$_internal_binary_Deploy((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'orderBook, $self'claimExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'gasForMintTlp, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'tokenConfigs, $self'tlpJetton, $self'tlpSupply, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'prices), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %configData() method_id(82657) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_configData();
    return $ConfigData$_to_external(res);
}

_ %tokenConfig(int $$tokenId) method_id(124956) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_tokenConfig($tokenId);
    return $TokenConfig$_to_opt_external(res);
}

_ %priceData(int $$tokenId) method_id(71672) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_priceData($tokenId);
    return res;
}

_ %globalPoolData() method_id(94742) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_globalPoolData();
    return $GlobalPoolData$_to_external(res);
}

_ %perpPosition(int $$tokenId, slice $$account) method_id(105096) {
    int $tokenId = $$tokenId;
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpPosition($tokenId, $account);
    return $PerpPositionData$_to_external(res);
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRJ3Nbqx3qB4vzCi3wuJxBaHL8QbKNsMEmRXgbGCkDAd1";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell), int) $Pool$_contract_router_internal((slice, slice, slice, int, int, int, int, int, int, cell, slice, int, int, int, int, int, int, int, int, int, cell, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 978998165) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$Pool$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateTokenConfig message
    if (op == 3863104642) {
        var msg = in_msg~$UpdateTokenConfig$_load();
        self~$Pool$_internal_binary_UpdateTokenConfig(msg);
        return (self, true);
    }
    
    ;; Receive ClaimProtocolFee message
    if (op == 4273121126) {
        var msg = in_msg~$ClaimProtocolFee$_load();
        self~$Pool$_internal_binary_ClaimProtocolFee(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Pool$_internal_empty();
        return (self, true);
    }
    
    ;; Receive UpdateLiquidityPool message
    if (op == 1428410654) {
        var msg = in_msg~$UpdateLiquidityPool$_load();
        self~$Pool$_internal_binary_UpdateLiquidityPool(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePerpPosition message
    if (op == 4283950423) {
        var msg = in_msg~$UpdatePerpPosition$_load();
        self~$Pool$_internal_binary_UpdatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
