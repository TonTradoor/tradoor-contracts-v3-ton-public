#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $Pool$_contract_init(int $deployId) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = (40000000, 90000000, 10000000, null(), 86400, 1000000000, 10000000000, 1000000000, null(), null(), 0, null(), null(), null(), 1, null(), 0, 0, 0, 0, null(), 1, null(), 0, 0, null(), null(), null());
    $self'owner = __tact_context_get_sender();
    $self'orderBook = __tact_create_address(0, 0);
    $self'claimExecutor = __tact_create_address(0, 0);
    $self'executors~__tact_dict_set_slice_int(267, __tact_context_get_sender(), true, 1);
    return ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates);
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), (int, int, int, int, int, int, int, slice, slice, int)) $Pool$_fun_configData((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, slice $executor) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    int $isExecutor = null();
    if ((~ null?($executor))) {
        $isExecutor = __tact_dict_get_slice_int($self'executors, 267, __tact_not_null($executor), 1);
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $ConfigData$_constructor_isExecutor_lpGasConsumption_perpGasConsumption_minTonsForStorage_lpAddBonusFactor_lpRemoveBonusFactor_lpLiquidityFactor_orderBook_claimExecutor_protocolTradingFee($isExecutor, $self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'orderBook, $self'claimExecutor, $self'protocolTradingFee));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), tuple) $Pool$_fun_tokenConfig((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $tokenId) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId)));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), int) $Pool$_fun_priceData((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $tokenId) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), __tact_dict_get_int_int($self'prices, 257, $tokenId, 257));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), int) $Pool$_fun_exceedGas((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $orderType) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $Context$_get_value(__tact_context_get()));
    int $storageFee = ($self'minTonsForStorage - min($tonBalanceBeforeMsg, $self'minTonsForStorage));
    int $extraValue = max(0, ($tonBalanceBeforeMsg - $self'minTonsForStorage));
    int $gasConsumption = (($orderType == 1) ? $self'lpGasConsumption : $self'perpGasConsumption);
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ((($Context$_get_value(__tact_context_get()) - $storageFee) - $gasConsumption) + $extraValue));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_increaseLPPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $liquidityDelta) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(0, 0, 0, 0, 0, 0);
    if ((~ null?($lpPositionOpt))) {
        ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    } else {
        $lpPosition'positionId = $self'lpPositionIndexNext;
        $self'lpPositionIndexNext = ($self'lpPositionIndexNext + 1);
    }
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    int $bonus = 0;
    if (($globalNetLP < $self'globalLPLiquidity)) {
        $bonus = ((($self'lpAddBonusFactor * ($self'globalLPLiquidity - $globalNetLP)) * $liquidityDelta) / ($self'globalLPLiquidity * 1000000000));
        $lpPosition'bonus = ($lpPosition'bonus + $bonus);
    }
    int $realizedFundingFee = 0;
    if (($lpPosition'liquidity > 0)) {
        $realizedFundingFee = ((($self'globalLPFundingFeeGrowth - $lpPosition'entryFundingFeeGrowth) * $lpPosition'liquidity) / 100000000000000000000);
    }
    $lpPosition'liquidity = ($lpPosition'liquidity + $liquidityDelta);
    $lpPosition'realizedFundingFee = $lpPosition'realizedFundingFee + $realizedFundingFee;
    $lpPosition'entryFundingFeeGrowth = $self'globalLPFundingFeeGrowth;
    $lpPosition'unlockTime = (now() + $self'lpLockTime);
    $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    $self'globalLPFund = ($self'globalLPFund + $liquidityDelta);
    $self'globalLPLiquidity = ($self'globalLPLiquidity + $liquidityDelta);
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(1);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdateLPPositionSuccess$_store_cell($UpdateLPPositionSuccess$_constructor_orderId_receive_trxId($orderId, 0, $trxId))));
    $global_emit($LPPositionIncreasedEvent$_store_cell($LPPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFeeDelta_realizedFundingFeeAfter_entryFundingFeeGrowthAfter_lpFundAfter_lpLiquidityAfter($trxId, $orderId, 1, $lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $lpPosition'unlockTime, $realizedFundingFee, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $self'globalLPFund, $self'globalLPLiquidity)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_decreaseLPPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $liquidityDelta) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    throw_unless(5238, (~ null?($lpPositionOpt)));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    throw_unless(31425, ($lpPosition'unlockTime <= now()));
    if (($lpPosition'liquidity < $liquidityDelta)) {
        $liquidityDelta = $lpPosition'liquidity;
    }
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    throw_unless(39251, ($globalNetLP > 0));
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    throw_unless(54040, ($globalNetLP > 0));
    int $receive = 0;
    int $bonus = 0;
    if (($globalNetLP >= $self'globalLPLiquidity)) {
        int $n = (((now() - $lpPosition'unlockTime) + 86400) / 86400);
        if (($lpPosition'bonus == 0)) {
            $bonus = (((($liquidityDelta * $self'lpRemoveBonusFactor) * ($globalNetLP - $self'globalLPLiquidity)) * min($n, 100)) / (($globalNetLP * 10000) * 1000000000));
        } else {
            int $bonus1 = (($liquidityDelta * ($globalNetLP - $self'globalLPLiquidity)) / $globalNetLP);
            int $bonus2 = $lpPosition'bonus;
            int $bonus3 = (((($liquidityDelta * $self'lpRemoveBonusFactor) * ($globalNetLP - $self'globalLPLiquidity)) * min($n, 100)) / (($globalNetLP * 10000) * 1000000000));
            $bonus = max(min($bonus1, $bonus2), $bonus3);
        }
        $receive = ($liquidityDelta + $bonus);
    } else {
        $receive = (($liquidityDelta * $globalNetLP) / $self'globalLPLiquidity);
    }
    int $realizedFundingFee = 0;
    if (($lpPosition'liquidity > 0)) {
        $realizedFundingFee = ((($self'globalLPFundingFeeGrowth - $lpPosition'entryFundingFeeGrowth) * $lpPosition'liquidity) / 100000000000000000000);
    }
    $realizedFundingFee = $realizedFundingFee + $lpPosition'realizedFundingFee;
    $receive = $receive + $realizedFundingFee;
    $lpPosition'realizedFundingFee = 0;
    $lpPosition'liquidity = $lpPosition'liquidity - $liquidityDelta;
    $lpPosition'bonus = $lpPosition'bonus - min($lpPosition'bonus, $bonus);
    if (( (($lpPosition'liquidity > 0)) ? (true) : (($lpPosition'bonus > 0)) )) {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    } else {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_opt(null()));
    }
    $self'globalLPFund = ($self'globalLPFund - $receive);
    $self'globalLPLiquidity = ($self'globalLPLiquidity - $liquidityDelta);
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(1);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdateLPPositionSuccess$_store_cell($UpdateLPPositionSuccess$_constructor_orderId_receive_trxId($orderId, $receive, $trxId))));
    $global_emit($LPPositionDecreasedEvent$_store_cell($LPPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_entryFundingFeeGrowthAfter_receive_lpFundAfter_lpLiquidityAfter($trxId, $orderId, 2, $lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $receive, $self'globalLPFund, $self'globalLPLiquidity)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), (tuple, int, int, int, int)) $Pool$_fun_lpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, slice $account) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $lpPosition = null();
    if ((~ null?($account))) {
        $lpPosition = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, __tact_not_null($account)));
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $LPPositionData$_constructor_lpPosition_globalLPFund_globalLPLiquidity_globalLPFundingFeeGrowth_globalLPUnrealizedPnl($lpPosition, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_increasePerpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $lpReceivedFundingFee) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    if (($sizeDelta > 0)) {
        int $valueDelta = (($sizeDelta * $tradePrice) / 100000000000000000000);
        throw_unless(31332, ($valueDelta >= $tokenConfig'minValue));
        throw_unless(23245, ($valueDelta <= $tokenConfig'maxValue));
    }
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    if (($perpPosition'size == 0)) {
        $perpPosition'positionId = $self'perpPositionIndexNext;
        $self'perpPositionIndexNext = $self'perpPositionIndexNext + 1;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    if ($isLong) {
        $globalPosition'longSize = $globalPosition'longSize + $sizeDelta;
    } else {
        $globalPosition'shortSize = $globalPosition'shortSize + $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 100000000000000000000);
    __tact_debug_str(__gen_slice_string_87b42f43ce1694bdcacb4178171ec36b62b65f184172aca8d174f0fc216a514a());
    __tact_debug_str(__tact_int_to_string($singleValueBefore));
    __tact_debug_str(__tact_int_to_string($netValueBefore));
    __tact_debug_str(__tact_int_to_string($self'globalPerpSingleValue));
    __tact_debug_str(__tact_int_to_string($self'globalPerpNetValue));
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong == $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ($isLong) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = (~ $isLong);
    }
    int $lpUnrealizedPnl = 0;
    if ($globalLPPosition'isLong) {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
    } else {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    $self'globalLPUnrealizedPnl = (($self'globalLPUnrealizedPnl - $globalLPPosition'unrealizedPnl) + $lpUnrealizedPnl);
    $globalLPPosition'unrealizedPnl = $lpUnrealizedPnl;
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    throw_unless(23314, ($self'globalPerpSingleValue <= (($globalNetLP * $self'lpLiquidityFactor) / 1000000000)));
    throw_unless(55754, ($self'globalPerpNetValue <= $globalNetLP));
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if ($isLong) {
        $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
    } else {
        $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + (($marginDelta + $fundingFee) - $tradingFee);
    int $marginDeltaAfter = ($perpPosition'margin - $marginBefore);
    $perpPosition'entryPrice = ((($perpPosition'size * $perpPosition'entryPrice) + ($sizeDelta * $tradePrice)) / ($perpPosition'size + $sizeDelta));
    $perpPosition'size = $perpPosition'size + $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $entryFundingFeeGrowthAfter;
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
    throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
    throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 100000000000000000000)));
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin + $marginDeltaAfter;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin + $marginDeltaAfter;
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(2);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdatePerpPositionSuccess$_store_cell($UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId($orderId, 0, $trxId))));
    $global_emit($PerpPositionIncreasedEvent$_store_cell($PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_entryFundingFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongFundingFeeGrowthAfter_globalShortFundingFeeGrowthAfter_globalLPFundingFeeGrowthAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpLiquidityAfter_lpTradingFee_lpRealizedPnl_lpReceivedFundingFee($trxId, $orderId, $opType, $perpPosition'positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $self'globalLPFundingFeeGrowth, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $lpReceivedFundingFee)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_decreasePerpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $lpReceivedFundingFee) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    if (($sizeDelta > $perpPosition'size)) {
        $sizeDelta = $perpPosition'size;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if ($isLong) {
        $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
    } else {
        $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
    }
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $positionId = $perpPosition'positionId;
    int $receive = 0;
    int $realizedPnl = 0;
    if ($isLong) {
        $realizedPnl = (($sizeDelta * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $realizedPnl = (($sizeDelta * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + (($realizedPnl + $fundingFee) - $tradingFee);
    throw_unless(62409, ($perpPosition'margin >= 0));
    if (($marginDelta > $perpPosition'margin)) {
        $marginDelta = $perpPosition'margin;
    }
    $perpPosition'margin = $perpPosition'margin - $marginDelta;
    $perpPosition'size = $perpPosition'size - $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $entryFundingFeeGrowthAfter;
    int $marginDeltaAfter = ($marginBefore - $perpPosition'margin);
    if (($perpPosition'size > 0)) {
        int $unrealizedPnl = 0;
        if ($isLong) {
            $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
        } else {
            $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
        throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
        throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 100000000000000000000)));
        $receive = $marginDelta;
    } else {
        $marginDeltaAfter = $marginDeltaAfter + $perpPosition'margin;
        $receive = ($marginDelta + $perpPosition'margin);
        ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
    }
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDeltaAfter;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDeltaAfter;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $lpUnrealizedPnl = 0;
    if ($globalLPPosition'isLong) {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
    } else {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    $self'globalLPUnrealizedPnl = (($self'globalLPUnrealizedPnl - $globalLPPosition'unrealizedPnl) + $lpUnrealizedPnl);
    $globalLPPosition'unrealizedPnl = $lpUnrealizedPnl;
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 100000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(2);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdatePerpPositionSuccess$_store_cell($UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId($orderId, $receive, $trxId))));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongFundingFeeGrowthAfter_globalShortFundingFeeGrowthAfter_globalLPFundingFeeGrowthAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpLiquidityAfter_lpTradingFee_lpRealizedPnl_lpReceivedFundingFee($trxId, $orderId, $opType, $positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $receive, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $self'globalLPFundingFeeGrowth, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $lpReceivedFundingFee)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_liquidatePerpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $trxId, int $orderId, slice $account, int $tokenId, int $isLong, int $tradePrice, int $lpReceivedFundingFee) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    int $marginDelta = $perpPosition'margin;
    int $sizeDelta = $perpPosition'size;
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if ($isLong) {
        $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
    } else {
        $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
        $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
    }
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
    throw_unless(18995, ($maintenanceMargin >= (($perpPosition'margin + $fundingFee) + $unrealizedPnl)));
    int $liquidatePrice = ((((($perpPosition'margin + $fundingFee) - $tokenConfig'liquidationFee) * 100000000000000000000) + ($isLong ? ((- $perpPosition'entryPrice) * $perpPosition'size) : ($perpPosition'entryPrice * $perpPosition'size))) / (($perpPosition'size * (($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate) + ($isLong ? (- 1000000000) : 1000000000))) / 1000000000));
    $tradePrice = $liquidatePrice;
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
    int $protocolTradingFee = ($tradingFee - $lpTradingFee);
    $self'protocolTradingFee = $self'protocolTradingFee + $protocolTradingFee;
    $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    int $positionId = $perpPosition'positionId;
    int $receive = $tokenConfig'liquidationFee;
    int $realizedPnl = (- (($marginDelta - $tradingFee) + $fundingFee));
    ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDelta;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDelta;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $lpUnrealizedPnl = 0;
    if ($globalLPPosition'isLong) {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
    } else {
        $lpUnrealizedPnl = (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    $self'globalLPUnrealizedPnl = (($self'globalLPUnrealizedPnl - $globalLPPosition'unrealizedPnl) + $lpUnrealizedPnl);
    $globalLPPosition'unrealizedPnl = $lpUnrealizedPnl;
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 100000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(2);
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdatePerpPositionSuccess$_store_cell($UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId($orderId, $receive, $trxId))));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongFundingFeeGrowthAfter_globalShortFundingFeeGrowthAfter_globalLPFundingFeeGrowthAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpLiquidityAfter_lpTradingFee_lpRealizedPnl_lpReceivedFundingFee($trxId, $orderId, 3, $positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $receive, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $self'globalLPFundingFeeGrowth, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $lpReceivedFundingFee)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), (int, int, tuple, tuple, tuple, tuple, int)) $Pool$_fun_perpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $tokenId, slice $account) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    tuple $perpPosition = null();
    if ((~ null?($account))) {
        tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
        if ((~ null?($accountPerpPositionOpt))) {
            $perpPosition = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($AccountPerpPosition$_get_positions($AccountPerpPosition$_not_null($accountPerpPositionOpt)), 267, __tact_not_null($account)));
        }
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition_globalFundingRateSample_prevPremiumRate($self'globalPerpNetValue, $self'globalPerpSingleValue, $perpPosition, $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId)), $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId)), $GlobalFundingRateSample$_load_opt(__tact_dict_get_int_cell($self'globalFundingRateSamples, 257, $tokenId)), __tact_dict_get_int_int($self'prevPremiumRates, 257, $tokenId, 257)));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), (int, int, int, int)) $Pool$_fun_updatePriceAndFundingFee((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, int $tokenId, int $price, int $updateValue) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    $self'prices~__tact_dict_set_int_int(257, $tokenId, $price, 257);
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    if ($updateValue) {
        tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
        __tact_debug_bool(null?($globalLPPositionOpt));
        if ((~ null?($globalLPPositionOpt))) {
            var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
            int $unrealizedPnl = 0;
            if ($globalLPPosition'isLong) {
                $unrealizedPnl = (($globalLPPosition'netSize * ($price - $globalLPPosition'entryPrice)) / 100000000000000000000);
            } else {
                $unrealizedPnl = (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $price)) / 100000000000000000000);
            }
            $self'globalLPUnrealizedPnl = (($self'globalLPUnrealizedPnl - $globalLPPosition'unrealizedPnl) + $unrealizedPnl);
            $globalLPPosition'unrealizedPnl = $unrealizedPnl;
            $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
        }
        int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
        int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
        $globalPosition'longValue = (($globalPosition'longSize * $price) / 100000000000000000000);
        $globalPosition'shortValue = (($globalPosition'shortSize * $price) / 100000000000000000000);
        $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
        $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
        $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    }
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(59588, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    tuple $sampleOpt = $GlobalFundingRateSample$_load_opt(__tact_dict_get_int_cell($self'globalFundingRateSamples, 257, $tokenId));
    var ($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate) = ((~ null?($sampleOpt)) ? $GlobalFundingRateSample$_not_null($sampleOpt) : $GlobalFundingRateSample$_constructor_lastAdjustFundingRateTime_sampleCount_cumulativePremiumRate((now() - (now() % 3600)), 0, 0));
    int $lastAdjustFundingRateTime = $sample'lastAdjustFundingRateTime;
    int $maxSamplingTime = ($lastAdjustFundingRateTime + 3600);
    int $timestamp = now();
    if (($maxSamplingTime < $timestamp)) {
        $timestamp = $maxSamplingTime;
    }
    int $lastSamplingTime = ($lastAdjustFundingRateTime + ($sample'sampleCount * 5));
    int $timeDelta = ($timestamp - $lastSamplingTime);
    if (($timeDelta < 5)) {
        return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $UpdateFundingRateResult$_constructor_lpReceivedFundingFeeDelta_globalLPFundingFeeGrowth_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter(0, $self'globalLPFundingFeeGrowth, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth));
    }
    int $sampleCountDelta = ($timeDelta / 5);
    int $sampleCountAfter = ($sample'sampleCount + $sampleCountDelta);
    int $prevPremiumRate = (null?(__tact_dict_get_int_int($self'prevPremiumRates, 257, $tokenId, 257)) ? 0 : __tact_not_null(__tact_dict_get_int_int($self'prevPremiumRates, 257, $tokenId, 257)));
    int $cumulativePremiumRate = ($prevPremiumRate * (((($sample'sampleCount + 1) + $sampleCountAfter) * $sampleCountDelta) / 2));
    $cumulativePremiumRate = ($sample'cumulativePremiumRate + $cumulativePremiumRate);
    if (($sampleCountAfter < 720)) {
        $sample'cumulativePremiumRate = $cumulativePremiumRate;
        $sample'sampleCount = $sampleCountAfter;
        $self'globalFundingRateSamples~__tact_dict_set_int_cell(257, $tokenId, $GlobalFundingRateSample$_store_cell(($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate)));
        return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $UpdateFundingRateResult$_constructor_lpReceivedFundingFeeDelta_globalLPFundingFeeGrowth_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter(0, $self'globalLPFundingFeeGrowth, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth));
    }
    int $premiumRateAvg = ($cumulativePremiumRate / 2076480);
    int $rateDelta = ($tokenConfig'interestRate - $premiumRateAvg);
    int $clampedRateDelta = 0;
    if (($rateDelta > 62500)) {
        $clampedRateDelta = 62500;
    } elseif (($rateDelta < (- 62500))) {
        $clampedRateDelta = (- 62500);
    } else {
        $clampedRateDelta = $rateDelta;
    }
    int $fundingRateDelta = ($premiumRateAvg + $clampedRateDelta);
    int $clampedFundingRateDelta = 0;
    if (($fundingRateDelta > $tokenConfig'maxFundingRate)) {
        $clampedFundingRateDelta = $tokenConfig'maxFundingRate;
    } elseif (($fundingRateDelta < (- $tokenConfig'maxFundingRate))) {
        $clampedFundingRateDelta = (- $tokenConfig'maxFundingRate);
    } else {
        $clampedFundingRateDelta = $fundingRateDelta;
    }
    $sample'lastAdjustFundingRateTime = $maxSamplingTime;
    $sample'cumulativePremiumRate = 0;
    $sample'sampleCount = 0;
    $self'globalFundingRateSamples~__tact_dict_set_int_cell(257, $tokenId, $GlobalFundingRateSample$_store_cell(($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate)));
    int $paidSize = 0;
    int $receivedSize = 0;
    if (($fundingRateDelta >= 0)) {
        $paidSize = $globalPosition'longSize;
        $receivedSize = $globalPosition'shortSize;
    } else {
        $paidSize = $globalPosition'shortSize;
        $receivedSize = $globalPosition'longSize;
    }
    int $paidFundingFeeGrowthDelta = (($price * abs($fundingRateDelta)) / 1000000000);
    int $receivedFundingFeeGrowthDelta = 0;
    int $lpReceivedFundingFee = 0;
    if (($paidFundingFeeGrowthDelta > 0)) {
        if (($paidSize > $receivedSize)) {
            if (($receivedSize > 0)) {
                $receivedFundingFeeGrowthDelta = $paidFundingFeeGrowthDelta;
                $lpReceivedFundingFee = ($receivedFundingFeeGrowthDelta * ($paidSize - $receivedSize));
                $self'globalLPFundingFeeGrowth = $self'globalLPFundingFeeGrowth + ($lpReceivedFundingFee / $self'globalLPLiquidity);
            } else {
                $lpReceivedFundingFee = ($paidFundingFeeGrowthDelta * $paidSize);
                $self'globalLPFundingFeeGrowth = $self'globalLPFundingFeeGrowth + ($lpReceivedFundingFee / $self'globalLPLiquidity);
            }
        } else {
            if (($receivedSize > 0)) {
                $receivedFundingFeeGrowthDelta = (($paidFundingFeeGrowthDelta * $paidSize) / $receivedSize);
            } else {
                $lpReceivedFundingFee = ($paidFundingFeeGrowthDelta * $paidSize);
                $self'globalLPFundingFeeGrowth = $self'globalLPFundingFeeGrowth + ($lpReceivedFundingFee / $self'globalLPLiquidity);
            }
        }
    }
    if (($fundingRateDelta >= 0)) {
        $globalPosition'longFundingFeeGrowth = $globalPosition'longFundingFeeGrowth - $paidFundingFeeGrowthDelta;
        $globalPosition'shortFundingFeeGrowth = $globalPosition'shortFundingFeeGrowth + $receivedFundingFeeGrowthDelta;
    } else {
        $globalPosition'longFundingFeeGrowth = $globalPosition'longFundingFeeGrowth + $receivedFundingFeeGrowthDelta;
        $globalPosition'shortFundingFeeGrowth = $globalPosition'shortFundingFeeGrowth - $paidFundingFeeGrowthDelta;
    }
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $UpdateFundingRateResult$_constructor_lpReceivedFundingFeeDelta_globalLPFundingFeeGrowth_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter(($lpReceivedFundingFee / 100000000000000000000), $self'globalLPFundingFeeGrowth, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth));
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), ()) $Pool$_fun_requireOwner((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), slice) $Pool$_fun_owner((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self) impure inline_ref {
    var (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)) = $self;
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), $self'owner);
}

;;
;; Receivers of a Contract Pool
;;

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateConfig((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, cell, slice, int, int, int, int, int, int, int, slice) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'executorLength, $msg'executors, $msg'claimExecutor, $msg'lpGasConsumption, $msg'perpGasConsumption, $msg'minTonsForStorage, $msg'lpLockTime, $msg'lpAddBonusFactor, $msg'lpRemoveBonusFactor, $msg'lpLiquidityFactor, $msg'orderBook) = $msg;
    ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_requireOwner();
    int $i = 0;
    while (($i < $msg'executorLength)) {
        tuple $executor = $ExecutorParam$_load_opt(__tact_dict_get_int_cell($msg'executors, 257, $i));
        if ((~ null?($executor))) {
            $self'executors~__tact_dict_set_slice_int(267, $ExecutorParam$_get_executor($ExecutorParam$_not_null($executor)), $ExecutorParam$_get_enable($ExecutorParam$_not_null($executor)), 1);
        }
        $i = $i + 1;
    }
    $self'claimExecutor = $msg'claimExecutor;
    $self'lpGasConsumption = $msg'lpGasConsumption;
    $self'perpGasConsumption = $msg'perpGasConsumption;
    $self'minTonsForStorage = $msg'minTonsForStorage;
    $self'lpLockTime = $msg'lpLockTime;
    $self'lpAddBonusFactor = $msg'lpAddBonusFactor;
    $self'lpRemoveBonusFactor = $msg'lpRemoveBonusFactor;
    $self'lpLiquidityFactor = $msg'lpLiquidityFactor;
    $self'orderBook = $msg'orderBook;
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateTokenConfig((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, slice, int, int, int, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'tokenId, $msg'name, $msg'enable, $msg'minValue, $msg'maxValue, $msg'maxLeverage, $msg'liquidationFee, $msg'maintenanceRate, $msg'tradingFeeRate, $msg'lpTradingFeeRate, $msg'interestRate, $msg'maxFundingRate, $msg'liquidityProportion) = $msg;
    ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_requireOwner();
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $msg'tokenId));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = ((~ null?($tokenConfigOpt)) ? $TokenConfig$_not_null($tokenConfigOpt) : $TokenConfig$_constructor_name_enable_minValue_maxValue_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_maintenanceRate_liquidityProportion_interestRate_maxFundingRate(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), false, (100 * 1000000), (10000000 * 1000000), 105, (5 * 100000), 1000000, 600000000, 10000000, 100000000, 0, 62500));
    $tokenConfig'name = $msg'name;
    $tokenConfig'enable = $msg'enable;
    $tokenConfig'minValue = $msg'minValue;
    $tokenConfig'maxValue = $msg'maxValue;
    $tokenConfig'maxLeverage = $msg'maxLeverage;
    $tokenConfig'liquidationFee = $msg'liquidationFee;
    $tokenConfig'maintenanceRate = $msg'maintenanceRate;
    $tokenConfig'tradingFeeRate = $msg'tradingFeeRate;
    $tokenConfig'lpTradingFeeRate = $msg'lpTradingFeeRate;
    $tokenConfig'interestRate = $msg'interestRate;
    $tokenConfig'maxFundingRate = $msg'maxFundingRate;
    $tokenConfig'liquidityProportion = $msg'liquidityProportion;
    $self'tokenConfigs~__tact_dict_set_int_cell(257, $msg'tokenId, $TokenConfig$_store_cell(($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minValue, $tokenConfig'maxValue, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate)));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_ClaimProtocolFee((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, slice) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'trxId, $msg'feeReceiver) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'claimExecutor, __tact_context_get_sender()) ));
    if (($self'protocolTradingFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, 0, false, 64, $SendProtocolFee$_store_cell($SendProtocolFee$_constructor_trxId_feeReceiver_amount($msg'trxId, $msg'feeReceiver, $self'protocolTradingFee))));
        $self'protocolTradingFee = 0;
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_UpdateLPPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, int, slice, int, int) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'isIncrease, $msg'orderId, $msg'account, $msg'liquidityDelta, $msg'trxId) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    if ($msg'isIncrease) {
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_increaseLPPosition($msg'trxId, $msg'orderId, $msg'account, $msg'liquidityDelta);
    } else {
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_decreaseLPPosition($msg'trxId, $msg'orderId, $msg'account, $msg'liquidityDelta);
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_UpdatePerpPosition((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, int, int, slice, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'orderId, $msg'opType, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'triggerAbove, $msg'trxId, $msg'price, $msg'premiumRate) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    var ($result'lpReceivedFundingFeeDelta, $result'globalLPFundingFeeGrowth, $result'longFundingFeeGrowthAfter, $result'shortFundingFeeGrowthAfter) = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_updatePriceAndFundingFee($msg'tokenId, $msg'price, false);
    int $indexPrice = $msg'price;
    throw_unless(19114, (abs($msg'premiumRate) < 1000000000));
    int $tradePrice = (((1000000000 + $msg'premiumRate) * $indexPrice) / 1000000000);
    $self'prevPremiumRates~__tact_dict_set_int_int(257, $msg'tokenId, $msg'premiumRate, 257);
    if (( (($msg'opType == 10)) ? (true) : (($msg'opType == 11)) )) {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_increasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $result'lpReceivedFundingFeeDelta);
    } elseif (($msg'opType == 3)) {
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_liquidatePerpPosition($msg'trxId, $msg'orderId, $msg'account, $msg'tokenId, $msg'isLong, $tradePrice, $result'lpReceivedFundingFeeDelta);
    } elseif (($msg'opType == 4)) {
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_decreasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $result'lpReceivedFundingFeeDelta);
    } else {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_decreasePerpPosition($msg'trxId, $msg'orderId, $msg'opType, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $tradePrice, $result'lpReceivedFundingFeeDelta);
    }
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_UpdatePrice((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int, int, cell) $msg) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    __tact_debug_str(__gen_slice_string_2a01e7b7c6a9528f6219a4a225ff8a5d07cb86cbf63443f949740246b2d1819f());
    int $isExecutor = false;
    int $isExecutorOpt = __tact_dict_get_slice_int($self'executors, 267, __tact_context_get_sender(), 1);
    if ((~ null?($isExecutorOpt))) {
        $isExecutor = __tact_not_null($isExecutorOpt);
    }
    throw_unless(41207, $isExecutor);
    if (($msg'pricesLength <= 0)) {
        return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
    }
    int $i = 0;
    int $totalGlobalUnrealizedPnl = $self'globalLPUnrealizedPnl;
    cell $resultDatas = null();
    while (($i < $msg'pricesLength)) {
        tuple $updatePrice = $UpdatePriceParam$_load_opt(__tact_dict_get_int_cell($msg'prices, 257, $i));
        if ((~ null?($updatePrice))) {
            int $tokenId = $UpdatePriceParam$_get_tokenId($UpdatePriceParam$_not_null($updatePrice));
            var ($result'lpReceivedFundingFeeDelta, $result'globalLPFundingFeeGrowth, $result'longFundingFeeGrowthAfter, $result'shortFundingFeeGrowthAfter) = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_updatePriceAndFundingFee($tokenId, $UpdatePriceParam$_get_price($UpdatePriceParam$_not_null($updatePrice)), true);
            $resultDatas~__tact_dict_set_int_cell(257, $i, $UpdateFundingRateEventData$_store_cell($UpdateFundingRateEventData$_constructor_trxId_tokenId_price_lpReceivedFundingFeeDelta_globalLPFundingFeeGrowth_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter($msg'trxId, $tokenId, $UpdatePriceParam$_get_price($UpdatePriceParam$_not_null($updatePrice)), $result'lpReceivedFundingFeeDelta, $result'globalLPFundingFeeGrowth, $result'longFundingFeeGrowthAfter, $result'shortFundingFeeGrowthAfter)));
        }
        $i = $i + 1;
    }
    $global_emit($UpdateFundingFeeEvent$_store_cell($UpdateFundingFeeEvent$_constructor_length_datas($msg'pricesLength, $resultDatas)));
    int $msgValue = ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_exceedGas(2);
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $msgValue, 2));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

(((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell)), ()) $Pool$_internal_binary_Deploy((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'lpGasConsumption, $self'perpGasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'lpLockTime, $self'lpAddBonusFactor, $self'lpRemoveBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'claimExecutor, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'prevPremiumRates), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %configData(slice $$executor) method_id(82657) {
    slice $executor = null?($$executor) ? null() : __tact_verify_address($$executor);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_configData($executor);
    return $ConfigData$_to_external(res);
}

_ %tokenConfig(int $$tokenId) method_id(124956) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_tokenConfig($tokenId);
    return $TokenConfig$_to_opt_external(res);
}

_ %priceData(int $$tokenId) method_id(71672) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_priceData($tokenId);
    return res;
}

_ %lpPosition(slice $$account) method_id(120059) {
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_lpPosition($account);
    return $LPPositionData$_to_external(res);
}

_ %perpPosition(int $$tokenId, slice $$account) method_id(105096) {
    int $tokenId = $$tokenId;
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpPosition($tokenId, $account);
    return $PerpPositionData$_to_external(res);
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPpBcDhpLBYLbEhSyFUpvXduy87afrSDgJ2tvue4ANRiu";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell), int) $Pool$_contract_router_internal((int, int, int, cell, int, int, int, int, slice, slice, int, slice, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 1251946368) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$Pool$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateTokenConfig message
    if (op == 3408848546) {
        var msg = in_msg~$UpdateTokenConfig$_load();
        self~$Pool$_internal_binary_UpdateTokenConfig(msg);
        return (self, true);
    }
    
    ;; Receive ClaimProtocolFee message
    if (op == 4273121126) {
        var msg = in_msg~$ClaimProtocolFee$_load();
        self~$Pool$_internal_binary_ClaimProtocolFee(msg);
        return (self, true);
    }
    
    ;; Receive UpdateLPPosition message
    if (op == 3902592095) {
        var msg = in_msg~$UpdateLPPosition$_load();
        self~$Pool$_internal_binary_UpdateLPPosition(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePerpPosition message
    if (op == 4283950423) {
        var msg = in_msg~$UpdatePerpPosition$_load();
        self~$Pool$_internal_binary_UpdatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePrice message
    if (op == 499684748) {
        var msg = in_msg~$UpdatePrice$_load();
        self~$Pool$_internal_binary_UpdatePrice(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
