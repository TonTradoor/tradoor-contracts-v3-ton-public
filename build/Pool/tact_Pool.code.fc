#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $Pool$_contract_init(int $deployId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = (50000000, 30000000, null(), 1, 600, 1000000000, 1000000000, null(), null(), 0, null(), null(), 1, null(), 0, 0, 0, 0, null(), 1, null(), 0, 0, null(), null(), null(), 0, null());
    $self'owner = __tact_context_get_sender();
    $self'orderBook = __tact_create_address(0, 0);
    $self'executors~__tact_dict_set_slice_int(267, __tact_context_get_sender(), true, 1);
    return ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples);
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), (int, int, int, int, int, int, slice)) $Pool$_fun_configData((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, slice $executor) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    int $isExecutor = null();
    if ((~ null?($executor))) {
        $isExecutor = __tact_dict_get_slice_int($self'executors, 267, __tact_not_null($executor), 1);
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $ConfigData$_constructor_isExecutor_gasConsumption_minTonsForStorage_lpLockTime_lpBonusFactor_lpLiquidityFactor_orderBook($isExecutor, $self'gasConsumption, $self'minTonsForStorage, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'orderBook));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), (int, tuple)) $Pool$_fun_tokenConfig((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $tokenId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $TokenConfigData$_constructor_tokenIdNext_tokenConfig($self'tokenIdNext, $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId))));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), ()) $Pool$_fun_increaseLPPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_constructor_positionId_liquidity_bonus_realizedFundingFee_entryFundingFeeGrowth_unlockTime(0, 0, 0, 0, 0, 0);
    if ((~ null?($lpPositionOpt))) {
        ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    } else {
        $lpPosition'positionId = $self'lpPositionIndexNext;
        $self'lpPositionIndexNext = ($self'lpPositionIndexNext + 1);
    }
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    int $bonus = 0;
    if (($globalNetLP < $self'globalLPLiquidity)) {
        $bonus = ((($self'lpBonusFactor * ($self'globalLPLiquidity - $globalNetLP)) * $liquidityDelta) / ($self'globalLPLiquidity * 1000000000));
        $lpPosition'bonus = ($lpPosition'bonus + $bonus);
    }
    int $realizedFundingFee = 0;
    if (($lpPosition'liquidity > 0)) {
        $realizedFundingFee = ((($self'globalLPFundingFeeGrowth - $lpPosition'entryFundingFeeGrowth) * $lpPosition'liquidity) / 100000000000000000000);
    }
    $lpPosition'liquidity = ($lpPosition'liquidity + $liquidityDelta);
    $lpPosition'realizedFundingFee = $lpPosition'realizedFundingFee + $realizedFundingFee;
    $lpPosition'entryFundingFeeGrowth = $self'globalLPFundingFeeGrowth;
    $lpPosition'unlockTime = (now() + $self'lpLockTime);
    $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    $self'globalLPFund = ($self'globalLPFund + $liquidityDelta);
    $self'globalLPLiquidity = ($self'globalLPLiquidity + $liquidityDelta);
    $global_emit($LPPositionIncreasedEvent$_store_cell($LPPositionIncreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_unlockTimeAfter_realizedFundingFeeDelta_realizedFundingFeeAfter_entryFundingFeeGrowthAfter_trxId(1, $lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $lpPosition'unlockTime, $realizedFundingFee, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $trxId)));
    $global_emit($GlobalLPLiquidityChangedEvent$_store_cell($GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId($self'globalLPFund, $self'globalLPLiquidity, 0, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), int) $Pool$_fun_decreaseLPPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, slice $account, int $liquidityDelta, int $trxId) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $lpPositionOpt = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, $account));
    throw_unless(5238, (~ null?($lpPositionOpt)));
    var ($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime) = $LPPosition$_not_null($lpPositionOpt);
    throw_unless(31425, ($lpPosition'unlockTime <= now()));
    if (($lpPosition'liquidity < $liquidityDelta)) {
        $liquidityDelta = $lpPosition'liquidity;
    }
    int $totalGlobalUnrealizedPnl = $self'globalLPUnrealizedPnl;
    int $globalNetLP = ($self'globalLPFund + $totalGlobalUnrealizedPnl);
    throw_unless(39251, ($globalNetLP > 0));
    if (($globalNetLP < 0)) {
        $globalNetLP = 0;
    }
    throw_unless(54040, ($globalNetLP > 0));
    int $receive = 0;
    int $bonus = 0;
    if (($globalNetLP >= $self'globalLPLiquidity)) {
        int $n = (((now() - $lpPosition'unlockTime) + $self'lpLockTime) / 86400);
        if (($lpPosition'bonus == 0)) {
            $bonus = (((($liquidityDelta * $self'lpBonusFactor) * ($globalNetLP - $self'globalLPLiquidity)) * min($n, 100)) / (($globalNetLP * 1000) * 1000000000));
        } else {
            int $bonus1 = (($liquidityDelta * ($globalNetLP - $self'globalLPLiquidity)) / $globalNetLP);
            int $bonus2 = $lpPosition'bonus;
            int $bonus3 = (((($liquidityDelta * $self'lpBonusFactor) * ($globalNetLP - $self'globalLPLiquidity)) * min($n, 100)) / (($globalNetLP * 1000) * 1000000000));
            $bonus = max(min($bonus1, $bonus2), $bonus3);
        }
        $receive = ($liquidityDelta + $bonus);
    } else {
        $receive = (($liquidityDelta * $globalNetLP) / $self'globalLPLiquidity);
    }
    int $realizedFundingFee = 0;
    if (($lpPosition'liquidity > 0)) {
        $realizedFundingFee = ((($self'globalLPFundingFeeGrowth - $lpPosition'entryFundingFeeGrowth) * $lpPosition'liquidity) / 100000000000000000000);
    }
    $realizedFundingFee = $realizedFundingFee + $lpPosition'realizedFundingFee;
    $receive = $receive + $realizedFundingFee;
    $lpPosition'realizedFundingFee = 0;
    $lpPosition'liquidity = $lpPosition'liquidity - $liquidityDelta;
    $lpPosition'bonus = $lpPosition'bonus - max($lpPosition'bonus, $bonus);
    if (( (($lpPosition'liquidity > 0)) ? (true) : (($lpPosition'bonus > 0)) )) {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_cell(($lpPosition'positionId, $lpPosition'liquidity, $lpPosition'bonus, $lpPosition'realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $lpPosition'unlockTime)));
    } else {
        $self'lpPositions~__tact_dict_set_slice_cell(267, $account, $LPPosition$_store_opt(null()));
    }
    $self'globalLPFund = ($self'globalLPFund - $receive);
    $self'globalLPLiquidity = ($self'globalLPLiquidity - $liquidityDelta);
    $global_emit($LPPositionDecreasedEvent$_store_cell($LPPositionDecreasedEvent$_constructor_opType_positionId_account_liquidityDelta_liquidityAfter_bonusDelta_bonusAfter_fundingFeeDelta_entryFundingFeeGrowthAfter_receive_trxId(2, $lpPosition'positionId, $account, $liquidityDelta, $lpPosition'liquidity, $bonus, $lpPosition'bonus, $realizedFundingFee, $lpPosition'entryFundingFeeGrowth, $receive, $trxId)));
    $global_emit($GlobalLPLiquidityChangedEvent$_store_cell($GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId($self'globalLPFund, $self'globalLPLiquidity, 0, 0, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $receive);
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), tuple) $Pool$_fun_lpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, slice $account) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $lpPosition = null();
    if ((~ null?($account))) {
        $lpPosition = $LPPosition$_load_opt(__tact_dict_get_slice_cell($self'lpPositions, 267, __tact_not_null($account)));
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $LPPositionData$_as_optional($LPPositionData$_constructor_lpPosition_globalLPFund_globalLPLiquidity_globalLPFundingFeeGrowth_globalLPUnrealizedPnl($lpPosition, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl)));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), ()) $Pool$_fun_increasePerpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $opType, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $indexPrice, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    if (($perpPosition'size == 0)) {
        throw_unless(62409, ($marginDelta >= $tokenConfig'minMargin));
        $perpPosition'positionId = $self'perpPositionIndexNext;
        $self'perpPositionIndexNext = $self'perpPositionIndexNext + 1;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    if ($isLong) {
        $globalPosition'longSize = $globalPosition'longSize + $sizeDelta;
    } else {
        $globalPosition'shortSize = $globalPosition'shortSize + $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $indexPrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $indexPrice) / 100000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    throw_unless(23314, ($self'globalPerpSingleValue <= (($self'globalLPFund * $self'lpLiquidityFactor) / 1000000000)));
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    throw_unless(55754, ($self'globalPerpNetValue <= $self'globalLPFund));
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong == $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ($isLong) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = (~ $isLong);
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if (($perpPosition'size > 0)) {
        if ($isLong) {
            $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
        } else {
            $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
        }
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + (($marginDelta + $fundingFee) - $tradingFee);
    int $marginDeltaAfter = ($perpPosition'margin - $marginBefore);
    $perpPosition'entryPrice = ((($perpPosition'size * $perpPosition'entryPrice) + ($sizeDelta * $tradePrice)) / ($perpPosition'size + $sizeDelta));
    $perpPosition'size = $perpPosition'size + $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $entryFundingFeeGrowthAfter;
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
    throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
    throw_unless(42634, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 100000000000000000000)));
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin + $marginDeltaAfter;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin + $marginDeltaAfter;
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    $global_emit($PerpPositionIncreasedEvent$_store_cell($PerpPositionIncreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_entryFundingFeeGrowthAfter_trxId($opType, $perpPosition'positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $trxId)));
    $global_emit($GlobalPositionChangedEvent$_store_cell($GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId($tokenId, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $trxId)));
    $global_emit($GlobalLPPositionChangedEvent$_store_cell($GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId($tokenId, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $trxId)));
    $global_emit($GlobalLPLiquidityChangedEvent$_store_cell($GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId($self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), int) $Pool$_fun_decreasePerpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $opType, int $trxId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $indexPrice, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    if (($sizeDelta > $perpPosition'size)) {
        $sizeDelta = $perpPosition'size;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if (($perpPosition'size > 0)) {
        if ($isLong) {
            $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
        } else {
            $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
        }
    }
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        $self'protocolTradingFee = $self'protocolTradingFee + ($tradingFee - $lpTradingFee);
        $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    }
    int $positionId = $perpPosition'positionId;
    int $receive = 0;
    int $realizedPnl = 0;
    if ($isLong) {
        $realizedPnl = (($sizeDelta * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $realizedPnl = (($sizeDelta * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + (($realizedPnl + $fundingFee) - $tradingFee);
    throw_unless(62409, ($perpPosition'margin >= 0));
    if (($marginDelta > $perpPosition'margin)) {
        $marginDelta = $perpPosition'margin;
    }
    $perpPosition'margin = $perpPosition'margin - $marginDelta;
    $perpPosition'size = $perpPosition'size - $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $entryFundingFeeGrowthAfter;
    int $marginDeltaAfter = ($marginBefore - $perpPosition'margin);
    if (($perpPosition'size > 0)) {
        int $unrealizedPnl = 0;
        if ($isLong) {
            $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
        } else {
            $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
        throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
        throw_unless(42634, (($perpPosition'margin * $tokenConfig'maxLeverage) >= $perpPosition'size));
        $receive = $marginDelta;
    } else {
        $marginDeltaAfter = $marginDeltaAfter + $perpPosition'margin;
        $receive = ($marginDelta + $perpPosition'margin);
        ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
    }
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDeltaAfter;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDeltaAfter;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $indexPrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $indexPrice) / 100000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_trxId($opType, $positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $realizedPnl, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $receive, $trxId)));
    $global_emit($GlobalPositionChangedEvent$_store_cell($GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId($tokenId, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $trxId)));
    $global_emit($GlobalLPPositionChangedEvent$_store_cell($GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId($tokenId, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $trxId)));
    $global_emit($GlobalLPLiquidityChangedEvent$_store_cell($GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId($self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $receive);
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), int) $Pool$_fun_liquidatePerpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $trxId, slice $account, int $tokenId, int $isLong, int $indexPrice, int $tradePrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth));
    int $marginDelta = $perpPosition'margin;
    int $sizeDelta = $perpPosition'size;
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longFundingFeeGrowth_shortFundingFeeGrowth_longValue_shortValue(0, 0, 0, 0, 0, 0, 0, 0));
    int $fundingFee = 0;
    int $entryFundingFeeGrowthAfter = 0;
    if (($perpPosition'size > 0)) {
        if ($isLong) {
            $fundingFee = ((($globalPosition'longFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
        } else {
            $fundingFee = ((($globalPosition'shortFundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 100000000000000000000);
            $entryFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
        }
    }
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 100000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 100000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000)) + $tokenConfig'liquidationFee);
    throw_unless(18995, ($maintenanceMargin >= ($perpPosition'margin + $unrealizedPnl)));
    int $liquidatePrice = ((((($perpPosition'margin + $fundingFee) - $tokenConfig'liquidationFee) * 100000000000000000000) + ($isLong ? ((- $perpPosition'entryPrice) * $perpPosition'size) : ($perpPosition'entryPrice * $perpPosition'size))) / (($perpPosition'size * ($tokenConfig'tradingFeeRate + ($isLong ? (- 1000000000) : 1000000000))) / 1000000000));
    throw_unless(55429, ($isLong ? ($liquidatePrice < $perpPosition'entryPrice) : ($liquidatePrice > $perpPosition'entryPrice)));
    $tradePrice = $liquidatePrice;
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice_unrealizedPnl(0, false, 0, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 100000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 100000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / (1000000000 * 100000000000000000000));
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
    int $protocolTradingFee = ($tradingFee - $lpTradingFee);
    $self'protocolTradingFee = $self'protocolTradingFee + $protocolTradingFee;
    $self'globalLPFund = $self'globalLPFund + ($lpRealizedPnl + $lpTradingFee);
    int $positionId = $perpPosition'positionId;
    int $receive = 0;
    int $realizedPnl = 0;
    $receive = $tokenConfig'liquidationFee;
    $realizedPnl = (- $lpRealizedPnl);
    ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth(0, 0, 0, 0, 0);
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDelta;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDelta;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
    int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
    $globalPosition'longValue = (($globalPosition'longSize * $indexPrice) / 100000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $indexPrice) / 100000000000000000000);
    $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
    $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth))));
    $self'perpPositions~__tact_dict_set_int_cell(257, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_realizedPnLDelta_tradingFee_fundingFee_entryFundingFeeGrowthAfter_receive_trxId(3, $positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $realizedPnl, $tradingFee, $fundingFee, $entryFundingFeeGrowthAfter, $receive, $trxId)));
    $global_emit($GlobalPositionChangedEvent$_store_cell($GlobalPositionChangedEvent$_constructor_tokenId_longMarginAfter_shortMarginAfter_longSizeAfter_shortSizeAfter_longFundingFeeGrowthAfter_shortFundingFeeGrowthAfter_trxId($tokenId, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $trxId)));
    $global_emit($GlobalLPPositionChangedEvent$_store_cell($GlobalLPPositionChangedEvent$_constructor_tokenId_netSizeAfter_isLong_entryPriceAfter_trxId($tokenId, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $trxId)));
    $global_emit($GlobalLPLiquidityChangedEvent$_store_cell($GlobalLPLiquidityChangedEvent$_constructor_lpFundAfter_liquidityAfter_tradingFee_realizedPnl_trxId($self'globalLPFund, $self'globalLPLiquidity, $lpTradingFee, $lpRealizedPnl, $trxId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $receive);
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), tuple) $Pool$_fun_perpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $tokenId, slice $account) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $perpPosition = null();
    if ((~ null?($account))) {
        tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_int_cell($self'perpPositions, 257, $tokenId));
        if ((~ null?($accountPerpPositionOpt))) {
            $perpPosition = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($AccountPerpPosition$_get_positions($AccountPerpPosition$_not_null($accountPerpPositionOpt)), 267, __tact_not_null($account)));
        }
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PerpPositionData$_as_optional($PerpPositionData$_constructor_globalPerpNetValue_globalPerpSingleValue_perpPosition_globalLPPosition_globalPosition_globalFundingRateSample($self'globalPerpNetValue, $self'globalPerpSingleValue, $perpPosition, $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId)), $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId)), $GlobalFundingRateSample$_load_opt(__tact_dict_get_int_cell($self'globalFundingRateSamples, 257, $tokenId)))));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), int) $Pool$_fun_updateFundingRate((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $tokenId, int $indexPrice) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    throw_unless(59588, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    tuple $sampleOpt = $GlobalFundingRateSample$_load_opt(__tact_dict_get_int_cell($self'globalFundingRateSamples, 257, $tokenId));
    var ($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate) = ((~ null?($sampleOpt)) ? $GlobalFundingRateSample$_not_null($sampleOpt) : $GlobalFundingRateSample$_constructor_lastAdjustFundingRateTime_sampleCount_cumulativePremiumRate((now() - (now() % 3600)), 0, 0));
    int $lastAdjustFundingRateTime = $sample'lastAdjustFundingRateTime;
    int $maxSamplingTime = ($lastAdjustFundingRateTime + 3600);
    int $timestamp = now();
    if (($maxSamplingTime < $timestamp)) {
        $timestamp = $maxSamplingTime;
    }
    int $lastSamplingTime = ($lastAdjustFundingRateTime + ($sample'sampleCount * 5));
    int $timeDelta = ($timestamp - $lastSamplingTime);
    if (($timeDelta < 5)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), 0);
    }
    tuple $prevPremiumRateSampleOpt = $PremiumRateSampleData$_load_opt(__tact_dict_get_int_cell($self'prevPremiumRateSamples, 257, $tokenId));
    var ($prevPremiumRateSample'rangeId, $prevPremiumRateSample'sampleId, $prevPremiumRateSample'deviationRate, $prevPremiumRateSample'premiumRate) = ((~ null?($prevPremiumRateSampleOpt)) ? $PremiumRateSampleData$_not_null($prevPremiumRateSampleOpt) : $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate(0, 0, 0, 0));
    int $premiumRate = $prevPremiumRateSample'premiumRate;
    int $sampleCountDelta = ($timeDelta / 5);
    int $sampleCountAfter = ($sample'sampleCount + $sampleCountDelta);
    int $cumulativePremiumRate = ($premiumRate * (((($sample'sampleCount + 1) + $sampleCountAfter) * $sampleCountDelta) / 2));
    $cumulativePremiumRate = ($sample'cumulativePremiumRate + $cumulativePremiumRate);
    if (($sampleCountAfter < 720)) {
        $sample'cumulativePremiumRate = $cumulativePremiumRate;
        $sample'sampleCount = $sampleCountAfter;
        $self'globalFundingRateSamples~__tact_dict_set_int_cell(257, $tokenId, $GlobalFundingRateSample$_store_cell(($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate)));
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), 0);
    }
    int $premiumRateAvg = ($cumulativePremiumRate / 2076480);
    int $rateDelta = ($tokenConfig'interestRate - $premiumRateAvg);
    int $clampedRateDelta = 0;
    if (($rateDelta > 62500)) {
        $clampedRateDelta = 62500;
    } elseif (($rateDelta < (- 62500))) {
        $clampedRateDelta = (- 62500);
    } else {
        $clampedRateDelta = $rateDelta;
    }
    int $fundingRateDelta = ($premiumRateAvg + $clampedRateDelta);
    $sample'lastAdjustFundingRateTime = $maxSamplingTime;
    $sample'cumulativePremiumRate = 0;
    $sample'sampleCount = 0;
    $self'globalFundingRateSamples~__tact_dict_set_int_cell(257, $tokenId, $GlobalFundingRateSample$_store_cell(($sample'lastAdjustFundingRateTime, $sample'sampleCount, $sample'cumulativePremiumRate)));
    int $maxFundingRate = $tokenConfig'maxFundingRate;
    int $clampedFundingRateDelta = 0;
    if (($fundingRateDelta > $maxFundingRate)) {
        $clampedFundingRateDelta = $maxFundingRate;
    } elseif (($fundingRateDelta < (- $maxFundingRate))) {
        $clampedFundingRateDelta = (- $maxFundingRate);
    } else {
        $clampedFundingRateDelta = $fundingRateDelta;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
    if (null?($globalPositionOpt)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), 0);
    }
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = $GlobalPosition$_not_null($globalPositionOpt);
    int $paidSize = 0;
    int $receivedSize = 0;
    if (($clampedFundingRateDelta >= 0)) {
        $paidSize = $globalPosition'longSize;
        $receivedSize = $globalPosition'shortSize;
    } else {
        $paidSize = $globalPosition'shortSize;
        $receivedSize = $globalPosition'longSize;
    }
    int $paidFundingFeeGrowthDelta = (($indexPrice * $clampedFundingRateDelta) / 1000000000);
    int $receivedFundingFeeGrowthDelta = 0;
    int $lpReceivedFundingFee = 0;
    if (($paidFundingFeeGrowthDelta > 0)) {
        if (($receivedSize > 0)) {
            $receivedFundingFeeGrowthDelta = $paidFundingFeeGrowthDelta;
            $lpReceivedFundingFee = ($paidFundingFeeGrowthDelta * ($paidSize - $receivedSize));
            $self'globalLPFundingFeeGrowth = $self'globalLPFundingFeeGrowth + ($lpReceivedFundingFee / $self'globalLPLiquidity);
        } else {
            $lpReceivedFundingFee = ($paidSize * $paidFundingFeeGrowthDelta);
            $self'globalLPFundingFeeGrowth = $self'globalLPFundingFeeGrowth + ($lpReceivedFundingFee / $self'globalLPLiquidity);
        }
    }
    int $longFundingFeeGrowthAfter = $globalPosition'longFundingFeeGrowth;
    int $shortFundingFeeGrowthAfter = $globalPosition'shortFundingFeeGrowth;
    if (($clampedFundingRateDelta >= 0)) {
        $longFundingFeeGrowthAfter = ($longFundingFeeGrowthAfter - $paidFundingFeeGrowthDelta);
        $shortFundingFeeGrowthAfter = ($shortFundingFeeGrowthAfter + $receivedFundingFeeGrowthDelta);
    } else {
        $longFundingFeeGrowthAfter = ($longFundingFeeGrowthAfter + $receivedFundingFeeGrowthDelta);
        $shortFundingFeeGrowthAfter = ($shortFundingFeeGrowthAfter - $paidFundingFeeGrowthDelta);
    }
    $globalPosition'longFundingFeeGrowth = $longFundingFeeGrowthAfter;
    $globalPosition'shortFundingFeeGrowth = $shortFundingFeeGrowthAfter;
    $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ($lpReceivedFundingFee / 100000000000000000000));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), ()) $Pool$_fun_updatePriceAndFundingFee((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $pricesLength, cell $prices) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    if (($pricesLength <= 0)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
    }
    int $i = 0;
    int $totalGlobalUnrealizedPnl = $self'globalLPUnrealizedPnl;
    while (($i < $pricesLength)) {
        tuple $updatePrice = $UpdatePriceParam$_load_opt(__tact_dict_get_int_cell($prices, 257, $i));
        if ((~ null?($updatePrice))) {
            int $price = $UpdatePriceParam$_get_price($UpdatePriceParam$_not_null($updatePrice));
            int $tokenId = $UpdatePriceParam$_get_tokenId($UpdatePriceParam$_not_null($updatePrice));
            int $priceOpt = __tact_dict_get_int_int($self'prices, 257, $tokenId, 257);
            if ((~ null?($priceOpt))) {
                $self'prices~__tact_dict_set_int_int(257, $tokenId, $price, 257);
            } else {
                $self'prices~__tact_dict_set_int_int(257, $tokenId, $price, 257);
            }
            tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
            if ((~ null?($globalLPPositionOpt))) {
                var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
                int $unrealizedPnl = 0;
                if ($globalLPPosition'isLong) {
                    $unrealizedPnl = (($globalLPPosition'netSize * ($price - $globalLPPosition'entryPrice)) / 100000000000000000000);
                } else {
                    $unrealizedPnl = (($globalLPPosition'netSize * ($globalLPPosition'entryPrice - $price)) / 100000000000000000000);
                }
                $totalGlobalUnrealizedPnl = (($totalGlobalUnrealizedPnl - $globalLPPosition'unrealizedPnl) + $unrealizedPnl);
                $self'globalLPPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl)));
            }
            tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_int_cell($self'globalPositions, 257, $tokenId));
            if ((~ null?($globalPositionOpt))) {
                var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue) = $GlobalPosition$_not_null($globalPositionOpt);
                int $singleValueBefore = max($globalPosition'longValue, $globalPosition'shortValue);
                int $netValueBefore = abs(($globalPosition'longValue - $globalPosition'shortValue));
                $globalPosition'longValue = (($globalPosition'longSize * $price) / 100000000000000000000);
                $globalPosition'shortValue = (($globalPosition'shortSize * $price) / 100000000000000000000);
                $self'globalPerpSingleValue = $self'globalPerpSingleValue + (max($globalPosition'longValue, $globalPosition'shortValue) - $singleValueBefore);
                $self'globalPerpNetValue = $self'globalPerpNetValue + (abs(($globalPosition'longValue - $globalPosition'shortValue)) - $netValueBefore);
                $self'globalPositions~__tact_dict_set_int_cell(257, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longFundingFeeGrowth, $globalPosition'shortFundingFeeGrowth, $globalPosition'longValue, $globalPosition'shortValue)));
            }
            int $lpReceivedFundingFee = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_updateFundingRate($tokenId, $price);
            $global_emit($UpdatePriceEvent$_store_cell($UpdatePriceEvent$_constructor_tokenId_price_lpFundingFee($tokenId, $price, $lpReceivedFundingFee)));
        }
        $i = ($i + 1);
    }
    $self'globalLPUnrealizedPnl = $totalGlobalUnrealizedPnl;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), (int, int, int, int)) $Pool$_fun_searchPremiumRate((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $tokenId, int $deviationRate) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    int $rangeId = ($deviationRate / 10000000);
    if (($rangeId >= 200)) {
        $rangeId = (($rangeId / 10) * 10);
    } elseif (($rangeId >= 300)) {
        $rangeId = 300;
    }
    tuple $premiumRateSampleRangeOpt = $PremiumRateSampleRange$_load_opt(__tact_dict_get_int_cell($self'premiumRateSampleRanges, 257, $rangeId));
    if (null?($premiumRateSampleRangeOpt)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, 0, 0, 0));
    }
    var ($premiumRateSampleRange'sampleLength, $premiumRateSampleRange'samples) = $PremiumRateSampleRange$_not_null($premiumRateSampleRangeOpt);
    tuple $prevPremiumRateSampleOpt = $PremiumRateSampleData$_load_opt(__tact_dict_get_int_cell($self'prevPremiumRateSamples, 257, $tokenId));
    var ($prevSample'rangeId, $prevSample'sampleId, $prevSample'deviationRate, $prevSample'premiumRate) = ((~ null?($prevPremiumRateSampleOpt)) ? $PremiumRateSampleData$_not_null($prevPremiumRateSampleOpt) : $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate(0, 0, 0, 0));
    if (($deviationRate == $prevSample'deviationRate)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ($prevSample'rangeId, $prevSample'sampleId, $prevSample'deviationRate, $prevSample'premiumRate));
    }
    int $start = 0;
    int $end = $premiumRateSampleRange'sampleLength;
    int $cur = 0;
    int $forward = (($deviationRate > $prevSample'deviationRate) ? true : false);
    var ($curSample'deviationRate, $curSample'premiumRate) = $PremiumRateSample$_constructor_deviationRate_premiumRate(0, 0);
    if (($rangeId == $prevSample'rangeId)) {
        $cur = $prevSample'sampleId;
        $curSample'deviationRate = $prevSample'deviationRate;
        $curSample'premiumRate = $prevSample'premiumRate;
        if (($deviationRate > $prevSample'deviationRate)) {
            $start = $prevSample'sampleId;
            $cur = $start;
        } else {
            $end = $prevSample'sampleId;
            $cur = $end;
        }
    } else {
        if ($forward) {
            tuple $startSampleOpt = $PremiumRateSample$_load_opt(__tact_dict_get_int_cell($premiumRateSampleRange'samples, 257, $start));
            if ((~ null?($startSampleOpt))) {
                ($curSample'deviationRate, $curSample'premiumRate) = $PremiumRateSample$_constructor_deviationRate_premiumRate($PremiumRateSample$_get_deviationRate($PremiumRateSample$_not_null($startSampleOpt)), $PremiumRateSample$_get_premiumRate($PremiumRateSample$_not_null($startSampleOpt)));
            }
        } else {
            tuple $endSampleOpt = $PremiumRateSample$_load_opt(__tact_dict_get_int_cell($premiumRateSampleRange'samples, 257, $end));
            if ((~ null?($endSampleOpt))) {
                ($curSample'deviationRate, $curSample'premiumRate) = $PremiumRateSample$_constructor_deviationRate_premiumRate($PremiumRateSample$_get_deviationRate($PremiumRateSample$_not_null($endSampleOpt)), $PremiumRateSample$_get_premiumRate($PremiumRateSample$_not_null($endSampleOpt)));
            }
        }
    }
    while (( (($cur >= $start)) ? (($cur <= $end)) : (false) )) {
        int $next = ($forward ? ($cur + 1) : ($cur - 1));
        tuple $nextSampleOpt = $PremiumRateSample$_load_opt(__tact_dict_get_int_cell($premiumRateSampleRange'samples, 257, $next));
        if (null?($nextSampleOpt)) {
            return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, $cur, $curSample'deviationRate, $curSample'premiumRate));
        }
        var ($nextSample'deviationRate, $nextSample'premiumRate) = $PremiumRateSample$_not_null($nextSampleOpt);
        if ($forward) {
            if (($deviationRate < $nextSample'deviationRate)) {
                return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, $cur, $curSample'deviationRate, $curSample'premiumRate));
            } elseif (($deviationRate == $nextSample'deviationRate)) {
                return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, $next, $nextSample'deviationRate, $nextSample'premiumRate));
            } else {
                ($curSample'deviationRate, $curSample'premiumRate) = ($nextSample'deviationRate, $nextSample'premiumRate);
                $cur = $next;
            }
        } else {
            if (($deviationRate >= $nextSample'deviationRate)) {
                return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, $next, $nextSample'deviationRate, $nextSample'premiumRate));
            } else {
                ($curSample'deviationRate, $curSample'premiumRate) = ($nextSample'deviationRate, $nextSample'premiumRate);
                $cur = $next;
            }
        }
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate($rangeId, $cur, $curSample'deviationRate, $curSample'premiumRate));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), tuple) $Pool$_fun_calculatePremiumRate((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, int $tokenId, int $sizeDelta, int $isLong) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $tokenId));
    if (null?($tokenConfigOpt)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), null());
    }
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = $TokenConfig$_not_null($tokenConfigOpt);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_int_cell($self'globalLPPositions, 257, $tokenId));
    if (null?($globalLPPositionOpt)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), null());
    }
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $globalLPPosition'unrealizedPnl) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
    int $globalLPNetSizeAfter = $globalLPPosition'netSize;
    int $globalLPIsLongAfter = $globalLPPosition'isLong;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong == $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = min($globalLPPosition'netSize, $sizeDelta);
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPNetSizeAfter = $globalLPNetSizeAfter - $sizeUsed;
    }
    if (($sizeRemaining > 0)) {
        $globalLPNetSizeAfter = $globalLPNetSizeAfter + $sizeRemaining;
        $globalLPIsLongAfter = (~ $isLong);
    }
    int $tokenLiquidity = ((($self'globalLPFund + $self'globalLPUnrealizedPnl) * $tokenConfig'liquidityProportion) / 1000000000);
    int $deviationRate = (($globalLPNetSizeAfter * 1000000000) / $tokenLiquidity);
    var ($premiumRateSample'rangeId, $premiumRateSample'sampleId, $premiumRateSample'deviationRate, $premiumRateSample'premiumRate) = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_searchPremiumRate($tokenId, $deviationRate);
    if ($globalLPIsLongAfter) {
        $premiumRateSample'deviationRate = (- $premiumRateSample'deviationRate);
        $premiumRateSample'premiumRate = (- $premiumRateSample'premiumRate);
    }
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $PremiumRateSampleData$_as_optional(($premiumRateSample'rangeId, $premiumRateSample'sampleId, $premiumRateSample'deviationRate, $premiumRateSample'premiumRate)));
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), ()) $Pool$_fun_requireOwner((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), slice) $Pool$_fun_owner((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self) impure inline_ref {
    var (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)) = $self;
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), $self'owner);
}

;;
;; Receivers of a Contract Pool
;;

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_UpdateConfig((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (slice, int, int, int, int, int, int, slice) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'executor, $msg'enableExecutor, $msg'gasConsumption, $msg'minTonsForStorage, $msg'lpLockTime, $msg'lpBonusFactor, $msg'lpLiquidityFactor, $msg'orderBook) = $msg;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_requireOwner();
    if (( ((~ null?($msg'executor))) ? ((~ null?($msg'enableExecutor))) : (false) )) {
        $self'executors~__tact_dict_set_slice_int(267, __tact_not_null($msg'executor), __tact_not_null($msg'enableExecutor), 1);
    }
    if ((~ null?($msg'gasConsumption))) {
        $self'gasConsumption = __tact_not_null($msg'gasConsumption);
    }
    if ((~ null?($msg'minTonsForStorage))) {
        $self'minTonsForStorage = __tact_not_null($msg'minTonsForStorage);
    }
    if ((~ null?($msg'lpLockTime))) {
        $self'lpLockTime = __tact_not_null($msg'lpLockTime);
    }
    if ((~ null?($msg'lpBonusFactor))) {
        $self'lpBonusFactor = __tact_not_null($msg'lpBonusFactor);
    }
    if ((~ null?($msg'lpLiquidityFactor))) {
        $self'lpLiquidityFactor = __tact_not_null($msg'lpLiquidityFactor);
    }
    if ((~ null?($msg'orderBook))) {
        $self'orderBook = __tact_not_null($msg'orderBook);
    }
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_UpdateTokenConfig((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int, slice, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'tokenId, $msg'name, $msg'enable, $msg'minMargin, $msg'maxLeverage, $msg'liquidationFee, $msg'tradingFeeRate, $msg'lpTradingFeeRate, $msg'interestRate, $msg'maxFundingRate) = $msg;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_requireOwner();
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_int_cell($self'tokenConfigs, 257, $msg'tokenId));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate) = ((~ null?($tokenConfigOpt)) ? $TokenConfig$_not_null($tokenConfigOpt) : $TokenConfig$_constructor_name_enable_minMargin_maxLeverage_liquidationFee_tradingFeeRate_lpTradingFeeRate_liquidityProportion_interestRate_maxFundingRate(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), false, (10 * 1000000), 100, (2 * 100000), 1000000, 600000000, 100000000, 0, 0));
    if ((~ null?($msg'name))) {
        $tokenConfig'name = __tact_not_null($msg'name);
    }
    if ((~ null?($msg'enable))) {
        $tokenConfig'enable = __tact_not_null($msg'enable);
    }
    if ((~ null?($msg'minMargin))) {
        $tokenConfig'minMargin = __tact_not_null($msg'minMargin);
    }
    if ((~ null?($msg'maxLeverage))) {
        $tokenConfig'maxLeverage = __tact_not_null($msg'maxLeverage);
    }
    if ((~ null?($msg'liquidationFee))) {
        $tokenConfig'liquidationFee = __tact_not_null($msg'liquidationFee);
    }
    if ((~ null?($msg'interestRate))) {
        $tokenConfig'interestRate = __tact_not_null($msg'interestRate);
    }
    if ((~ null?($msg'tradingFeeRate))) {
        $tokenConfig'tradingFeeRate = __tact_not_null($msg'tradingFeeRate);
    }
    if ((~ null?($msg'lpTradingFeeRate))) {
        $tokenConfig'lpTradingFeeRate = __tact_not_null($msg'lpTradingFeeRate);
    }
    if ((~ null?($msg'maxFundingRate))) {
        $tokenConfig'maxFundingRate = __tact_not_null($msg'maxFundingRate);
    }
    if (($msg'tokenId >= $self'tokenIdNext)) {
        $self'tokenIdNext = ($msg'tokenId + 1);
    }
    $self'tokenConfigs~__tact_dict_set_int_cell(257, $msg'tokenId, $TokenConfig$_store_cell(($tokenConfig'name, $tokenConfig'enable, $tokenConfig'minMargin, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'liquidityProportion, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate, $tokenConfig'interestRate, $tokenConfig'maxFundingRate)));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 64));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_UpdateLPPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int, int, slice, int, int, int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'isIncrease, $msg'orderId, $msg'account, $msg'liquidityDelta, $msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_updatePriceAndFundingFee($msg'pricesLength, $msg'prices);
    int $receive = 0;
    if ($msg'isIncrease) {
        ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_increaseLPPosition($msg'account, $msg'liquidityDelta, $msg'trxId);
    } else {
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_decreaseLPPosition($msg'account, $msg'liquidityDelta, $msg'trxId);
    }
    int $msgValue = ((($Context$_get_value(__tact_context_get()) - ($self'gasConsumption * 2)) - $self'minTonsForStorage) - $Context$_fun_readForwardFee(__tact_context_get()));
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdateLPPositionSuccess$_store_cell($UpdateLPPositionSuccess$_constructor_orderId_receive_trxId($msg'orderId, $receive, $msg'trxId))));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_UpdatePerpPosition((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int, int, int, slice, int, int, int, int, int, int, int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'orderId, $msg'opType, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'triggerAbove, $msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'orderBook, __tact_context_get_sender()) ));
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_updatePriceAndFundingFee($msg'pricesLength, $msg'prices);
    int $indexPrice = 0;
    int $pricOpt = __tact_dict_get_int_int($self'prices, 257, $msg'tokenId, 257);
    if ((~ null?($pricOpt))) {
        $indexPrice = __tact_not_null($pricOpt);
    }
    throw_unless(4996, ($indexPrice > 0));
    tuple $premiumRateSampleOpt = null();
    if (( (($msg'opType == 10)) ? (true) : (($msg'opType == 11)) )) {
        $premiumRateSampleOpt = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_calculatePremiumRate($msg'tokenId, $msg'sizeDelta, $msg'isLong);
    } else {
        $premiumRateSampleOpt = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_calculatePremiumRate($msg'tokenId, $msg'sizeDelta, (~ $msg'isLong));
    }
    tuple $prevPremiumRateSampleOpt = $PremiumRateSampleData$_load_opt(__tact_dict_get_int_cell($self'prevPremiumRateSamples, 257, $msg'tokenId));
    var ($prevPremiumRateSample'rangeId, $prevPremiumRateSample'sampleId, $prevPremiumRateSample'deviationRate, $prevPremiumRateSample'premiumRate) = ((~ null?($prevPremiumRateSampleOpt)) ? $PremiumRateSampleData$_not_null($prevPremiumRateSampleOpt) : $PremiumRateSampleData$_constructor_rangeId_sampleId_deviationRate_premiumRate(0, 0, 0, 0));
    int $avgPremiumRate = $prevPremiumRateSample'premiumRate;
    if ((~ null?($premiumRateSampleOpt))) {
        var ($premiumRateSample'rangeId, $premiumRateSample'sampleId, $premiumRateSample'deviationRate, $premiumRateSample'premiumRate) = $PremiumRateSampleData$_not_null($premiumRateSampleOpt);
        $avgPremiumRate = (($premiumRateSample'premiumRate + $avgPremiumRate) / 2);
        ($prevPremiumRateSample'rangeId, $prevPremiumRateSample'sampleId, $prevPremiumRateSample'deviationRate, $prevPremiumRateSample'premiumRate) = ($premiumRateSample'rangeId, $premiumRateSample'sampleId, $premiumRateSample'deviationRate, $premiumRateSample'premiumRate);
        $self'prevPremiumRateSamples~__tact_dict_set_int_cell(257, $msg'tokenId, $PremiumRateSampleData$_store_cell(($prevPremiumRateSample'rangeId, $prevPremiumRateSample'sampleId, $prevPremiumRateSample'deviationRate, $prevPremiumRateSample'premiumRate)));
        $global_emit($PremiumRateChangedEvent$_store_cell($PremiumRateChangedEvent$_constructor_tokenId_deviationRate_premiumRate($msg'tokenId, $prevPremiumRateSample'deviationRate, $prevPremiumRateSample'premiumRate)));
    }
    int $tradePrice = (((1000000000 + $avgPremiumRate) * $indexPrice) / 1000000000);
    int $receive = 0;
    if (( (($msg'opType == 10)) ? (true) : (($msg'opType == 11)) )) {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_increasePerpPosition($msg'opType, $msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $indexPrice, $tradePrice);
    } elseif (($msg'opType == 3)) {
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_liquidatePerpPosition($msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, $indexPrice, $tradePrice);
    } elseif (($msg'opType == 4)) {
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_decreasePerpPosition($msg'opType, $msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $indexPrice, $tradePrice);
    } else {
        if ($msg'triggerAbove) {
            throw_unless(1644, ($tradePrice >= $msg'triggerPrice));
        } else {
            throw_unless(1644, ($tradePrice <= $msg'triggerPrice));
        }
        $receive = ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_decreasePerpPosition($msg'opType, $msg'trxId, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $indexPrice, $tradePrice);
    }
    int $msgValue = ((($Context$_get_value(__tact_context_get()) - ($self'gasConsumption * 2)) - $self'minTonsForStorage) - $Context$_fun_readForwardFee(__tact_context_get()));
    throw_unless(9429, ($msgValue > 0));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'orderBook, $msgValue, false, 1, $UpdatePerpPositionSuccess$_store_cell($UpdatePerpPositionSuccess$_constructor_orderId_receive_trxId($msg'orderId, $receive, $msg'trxId))));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_UpdatePrice((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int, int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'trxId, $msg'pricesLength, $msg'prices) = $msg;
    int $isExecutor = false;
    int $isExecutorOpt = __tact_dict_get_slice_int($self'executors, 267, __tact_context_get_sender(), 1);
    if ((~ null?($isExecutorOpt))) {
        $isExecutor = __tact_not_null($isExecutorOpt);
    }
    throw_unless(41207, $isExecutor);
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_updatePriceAndFundingFee($msg'pricesLength, $msg'prices);
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_SetPremiumRateSampleRange((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int, cell) $msg) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($msg'sampleRangeLength, $msg'sampleRanges) = $msg;
    int $isExecutor = false;
    int $isExecutorOpt = __tact_dict_get_slice_int($self'executors, 267, __tact_context_get_sender(), 1);
    if ((~ null?($isExecutorOpt))) {
        $isExecutor = __tact_not_null($isExecutorOpt);
    }
    throw_unless(41207, $isExecutor);
    if (($msg'sampleRangeLength <= 0)) {
        return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
    }
    int $i = 0;
    while (($i < $msg'sampleRangeLength)) {
        tuple $premiumRateSampleRangeParamOpt = $PremiumRateSampleRangeParam$_load_opt(__tact_dict_get_int_cell($msg'sampleRanges, 257, $i));
        if ((~ null?($premiumRateSampleRangeParamOpt))) {
            var ($premiumRateSampleRangeParam'sampleId, $premiumRateSampleRangeParam'sampleLength, $premiumRateSampleRangeParam'samples) = $PremiumRateSampleRangeParam$_not_null($premiumRateSampleRangeParamOpt);
            $self'premiumRateSampleRanges~__tact_dict_set_int_cell(257, $premiumRateSampleRangeParam'sampleId, $PremiumRateSampleRange$_store_cell($PremiumRateSampleRange$_constructor_sampleLength_samples($premiumRateSampleRangeParam'sampleLength, $premiumRateSampleRangeParam'samples)));
            if (($premiumRateSampleRangeParam'sampleId >= $self'premiumRateSampleRangeLength)) {
                $self'premiumRateSampleRangeLength = ($premiumRateSampleRangeParam'sampleId + 1);
            }
        }
        $i = $i + 1;
    }
    $global_send($SendParameters$_constructor_to_value_mode(__tact_context_get_sender(), 0, 64));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

(((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell)), ()) $Pool$_internal_binary_Deploy((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) $self, (int) $deploy) impure inline {
    var ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'gasConsumption, $self'minTonsForStorage, $self'tokenConfigs, $self'tokenIdNext, $self'lpLockTime, $self'lpBonusFactor, $self'lpLiquidityFactor, $self'owner, $self'orderBook, $self'protocolTradingFee, $self'executors, $self'lpPositions, $self'lpPositionIndexNext, $self'globalLPPositions, $self'globalLPFund, $self'globalLPLiquidity, $self'globalLPFundingFeeGrowth, $self'globalLPUnrealizedPnl, $self'perpPositions, $self'perpPositionIndexNext, $self'globalPositions, $self'globalPerpNetValue, $self'globalPerpSingleValue, $self'globalFundingRateSamples, $self'prices, $self'premiumRateSampleRanges, $self'premiumRateSampleRangeLength, $self'prevPremiumRateSamples), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %configData(slice $$executor) method_id(82657) {
    slice $executor = null?($$executor) ? null() : __tact_verify_address($$executor);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_configData($executor);
    return $ConfigData$_to_external(res);
}

_ %tokenConfig(int $$tokenId) method_id(124956) {
    int $tokenId = $$tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_tokenConfig($tokenId);
    return $TokenConfigData$_to_external(res);
}

_ %lpPosition(slice $$account) method_id(120059) {
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_lpPosition($account);
    return $LPPositionData$_to_opt_external(res);
}

_ %perpPosition(int $$tokenId, slice $$account) method_id(105096) {
    int $tokenId = $$tokenId;
    slice $account = null?($$account) ? null() : __tact_verify_address($$account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpPosition($tokenId, $account);
    return $PerpPositionData$_to_opt_external(res);
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmPpYBqrP7c6ADwB9chRoEkc2ALx9BLYjM9u93TEeTf4Qa";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell), int) $Pool$_contract_router_internal((int, int, cell, int, int, int, int, slice, slice, int, cell, cell, int, cell, int, int, int, int, cell, int, cell, int, int, cell, cell, cell, int, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 198381229) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$Pool$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateTokenConfig message
    if (op == 1775519856) {
        var msg = in_msg~$UpdateTokenConfig$_load();
        self~$Pool$_internal_binary_UpdateTokenConfig(msg);
        return (self, true);
    }
    
    ;; Receive UpdateLPPosition message
    if (op == 3902592095) {
        var msg = in_msg~$UpdateLPPosition$_load();
        self~$Pool$_internal_binary_UpdateLPPosition(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePerpPosition message
    if (op == 4283950423) {
        var msg = in_msg~$UpdatePerpPosition$_load();
        self~$Pool$_internal_binary_UpdatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive UpdatePrice message
    if (op == 499684748) {
        var msg = in_msg~$UpdatePrice$_load();
        self~$Pool$_internal_binary_UpdatePrice(msg);
        return (self, true);
    }
    
    ;; Receive SetPremiumRateSampleRange message
    if (op == 24568009) {
        var msg = in_msg~$SetPremiumRateSampleRange$_load();
        self~$Pool$_internal_binary_SetPremiumRateSampleRange(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
