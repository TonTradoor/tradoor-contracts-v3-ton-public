global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT";

() __tact_debug_str(slice value) impure asm "STRDUMP" "DROP";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder __tact_store_bool(builder b, int v) inline {
    return b.store_int(v, 1);
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

int __tact_slice_eq_bits(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm "2 TUPLE";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm "2 UNTUPLE";

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm "3 TUPLE";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm "3 UNTUPLE";

forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v) asm "4 TUPLE";

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm "4 UNTUPLE";

forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v) asm "5 TUPLE";

forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v) asm "5 UNTUPLE";

slice __tact_int_to_string(int src) inline_ref {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);
    
        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);
    
        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (( ((~ null?($params'code))) ? (true) : ((~ null?($params'data))) )) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

() $global_emit(cell $body) impure inline {
    cell $c = end_cell(store_ref(store_uint(begin_cell(), 15211807202738752817960438464513, 104), $body));
    send_raw_message($c, 0);
}

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return begin_parse($self);
}

((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell), ()) $Pool$_fun_forward((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if ((0 > 0)) {
        var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = __tact_my_balance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            raw_reserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (128 + 2), $body, $code, $data));
            return (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (64 + 2), $body, $code, $data));
    return (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates), ());
}

((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell), ()) $Pool$_fun_reply((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell) $self, cell $body) impure inline {
    var (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates)) = $self;
    ($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates)~$Pool$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates), ());
}

((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell), ()) $Pool$_fun_notify((int, int, int, cell, int, int, int, int, int, int, int, slice, slice, slice, cell, slice, cell, int, cell, int, (int, int), cell, cell, int, cell, int, int, cell, cell, int, int, cell, int, cell, int, cell, int, cell, int, cell, cell, cell) $self, cell $body) impure inline {
    var (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates)) = $self;
    ($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates)~$Pool$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'minExecutionFee, $self'gasConsumption, $self'minTonsForStorage, $self'tokenInfos, $self'tokenIndexNext, $self'lockTime, $self'bonusFactor, $self'minLPMargin, $self'maxLPLeverage, $self'lpLiquidationFee, $self'lpMaxRiskRate, $self'usdc, $self'owner, $self'operator, $self'executors, $self'executionFeeReceiver, $self'increaseRBFPositionOrders, $self'increaseRBFPositionIndexNext, $self'decreaseRBFPositionOrders, $self'decreaseRBFPositionIndexNext, ($self'globalRBFPosition'riskBufferFund, $self'globalRBFPosition'liquidity), $self'fundPositions, $self'increaseLPPositionOrders, $self'increaseLPPositionIndexNext, $self'decreaseLPPositionOrders, $self'decreaseLPPositionIndexNext, $self'globalLiquidity, $self'globalLPPositions, $self'lpPositions, $self'lpTradingFeeGrowth, $self'lpFundingFeeGrowth, $self'increasePerpPositionMarketOrders, $self'increasePerpPositionMarketIndexNext, $self'decreasePerpPositionMarketOrders, $self'decreasePerpPositionMarketIndexNext, $self'increasePerpPositionLimitOrders, $self'increasePerpPositionLimitIndexNext, $self'decreasePerpPositionLimitOrders, $self'decreasePerpPositionLimitIndexNext, $self'perpPositions, $self'GlobalFundingRateSamples, $self'PreviousGlobalFundingRates), ());
}